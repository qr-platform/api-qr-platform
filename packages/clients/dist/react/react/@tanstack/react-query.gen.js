"use strict";
// This file is auto-generated by @hey-api/openapi-ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.postOrgsFirstMutation = exports.postOrgsFirstOptions = exports.postOrgsFirstQueryKey = exports.putOrgsMutation = exports.getOrgsCurrentOptions = exports.getOrgsCurrentQueryKey = exports.putApiKeysByApiKeyIdStatusMutation = exports.putApiKeysByApiKeyIdMutation = exports.getApiKeysByApiKeyIdOptions = exports.getApiKeysByApiKeyIdQueryKey = exports.deleteApiKeysByApiKeyIdMutation = exports.postApiKeysMutation = exports.postApiKeysOptions = exports.postApiKeysQueryKey = exports.getApiKeysOptions = exports.getApiKeysQueryKey = exports.postAuthPasswordChangeMutation = exports.postAuthPasswordChangeOptions = exports.postAuthPasswordChangeQueryKey = exports.postAuthPasswordResetVerifyMutation = exports.postAuthPasswordResetVerifyOptions = exports.postAuthPasswordResetVerifyQueryKey = exports.postAuthPasswordResetMutation = exports.postAuthPasswordResetOptions = exports.postAuthPasswordResetQueryKey = exports.getAuthSignOutOptions = exports.getAuthSignOutQueryKey = exports.getAuthMeOptions = exports.getAuthMeQueryKey = exports.postAuthEmailVerifyMutation = exports.postAuthEmailVerifyOptions = exports.postAuthEmailVerifyQueryKey = exports.postAuthEmailVerifySendMutation = exports.postAuthEmailVerifySendOptions = exports.postAuthEmailVerifySendQueryKey = exports.postAuthSignInVerifyMutation = exports.postAuthSignInVerifyOptions = exports.postAuthSignInVerifyQueryKey = exports.postAuthSignInMutation = exports.postAuthSignInOptions = exports.postAuthSignInQueryKey = exports.postAuthRegisterVerifyResendMutation = exports.postAuthRegisterVerifyResendOptions = exports.postAuthRegisterVerifyResendQueryKey = exports.postAuthRegisterVerifyMutation = exports.postAuthRegisterVerifyOptions = exports.postAuthRegisterVerifyQueryKey = exports.postAuthRegisterMutation = exports.postAuthRegisterOptions = exports.postAuthRegisterQueryKey = void 0;
exports.getPlansCurrentOptions = exports.getPlansCurrentQueryKey = exports.getPlansOptions = exports.getPlansQueryKey = exports.getRolesOptions = exports.getRolesQueryKey = exports.getWorkspacesByWorkspaceIdMembersOptions = exports.getWorkspacesByWorkspaceIdMembersQueryKey = exports.postWorkspacesByWorkspaceIdMembersByUserIdRoleMutation = exports.postWorkspacesByWorkspaceIdMembersByUserIdRoleOptions = exports.postWorkspacesByWorkspaceIdMembersByUserIdRoleQueryKey = exports.getWorkspacesByWorkspaceIdMembersByUserIdRoleOptions = exports.getWorkspacesByWorkspaceIdMembersByUserIdRoleQueryKey = exports.deleteWorkspacesByWorkspaceIdMembersByUserIdRoleMutation = exports.putWorkspacesByWorkspaceIdMutation = exports.getWorkspacesByWorkspaceIdOptions = exports.getWorkspacesByWorkspaceIdQueryKey = exports.deleteWorkspacesByWorkspaceIdMutation = exports.postWorkspacesMutation = exports.postWorkspacesOptions = exports.postWorkspacesQueryKey = exports.getWorkspacesOptions = exports.getWorkspacesQueryKey = exports.deleteMembersByUserIdRoleByRoleNameMutation = exports.postMembersByUserIdRoleMutation = exports.postMembersByUserIdRoleOptions = exports.postMembersByUserIdRoleQueryKey = exports.getMembersByUserIdRolesOptions = exports.getMembersByUserIdRolesQueryKey = exports.deleteMembersByUserIdMutation = exports.postMembersMutation = exports.postMembersOptions = exports.postMembersQueryKey = exports.getMembersOptions = exports.getMembersQueryKey = exports.getInvitesByTokenDeclineOptions = exports.getInvitesByTokenDeclineQueryKey = exports.getInvitesByTokenAcceptOptions = exports.getInvitesByTokenAcceptQueryKey = exports.deleteInvitesByInvitationIdMutation = exports.getInvitesMeOptions = exports.getInvitesMeQueryKey = exports.postInvitesMutation = exports.postInvitesOptions = exports.postInvitesQueryKey = exports.getInvitesOptions = exports.getInvitesQueryKey = exports.postOrgsCurrentByOrgIdMutation = exports.postOrgsCurrentByOrgIdOptions = exports.postOrgsCurrentByOrgIdQueryKey = void 0;
exports.postCodesByCodeIdRouterRulesQueryKey = exports.getCodesByCodeIdRouterRulesInfiniteOptions = exports.getCodesByCodeIdRouterRulesInfiniteQueryKey = exports.getCodesByCodeIdRouterRulesOptions = exports.getCodesByCodeIdRouterRulesQueryKey = exports.getCodesByCodeIdScansInfiniteOptions = exports.getCodesByCodeIdScansInfiniteQueryKey = exports.getCodesByCodeIdScansOptions = exports.getCodesByCodeIdScansQueryKey = exports.getWorkspacesByWorkspaceIdSettingsServiceBySettingSlugValueOptions = exports.getWorkspacesByWorkspaceIdSettingsServiceBySettingSlugValueQueryKey = exports.putWorkspacesByWorkspaceIdSettingsServiceBySettingSlugMutation = exports.getWorkspacesByWorkspaceIdSettingsServiceBySettingSlugOptions = exports.getWorkspacesByWorkspaceIdSettingsServiceBySettingSlugQueryKey = exports.deleteWorkspacesByWorkspaceIdSettingsServiceBySettingSlugMutation = exports.getWorkspacesByWorkspaceIdSettingsServiceOptions = exports.getWorkspacesByWorkspaceIdSettingsServiceQueryKey = exports.getWorkspacesByWorkspaceIdSettingsCustomBySettingSlugValueOptions = exports.getWorkspacesByWorkspaceIdSettingsCustomBySettingSlugValueQueryKey = exports.putWorkspacesByWorkspaceIdSettingsCustomBySettingSlugMutation = exports.getWorkspacesByWorkspaceIdSettingsCustomBySettingSlugOptions = exports.getWorkspacesByWorkspaceIdSettingsCustomBySettingSlugQueryKey = exports.deleteWorkspacesByWorkspaceIdSettingsCustomBySettingSlugMutation = exports.postWorkspacesByWorkspaceIdSettingsCustomMutation = exports.postWorkspacesByWorkspaceIdSettingsCustomOptions = exports.postWorkspacesByWorkspaceIdSettingsCustomQueryKey = exports.getWorkspacesByWorkspaceIdSettingsCustomOptions = exports.getWorkspacesByWorkspaceIdSettingsCustomQueryKey = exports.getWorkspacesByWorkspaceIdSettingsOptions = exports.getWorkspacesByWorkspaceIdSettingsQueryKey = exports.getSettingsServiceBySettingSlugValueOptions = exports.getSettingsServiceBySettingSlugValueQueryKey = exports.putSettingsServiceBySettingSlugMutation = exports.getSettingsServiceBySettingSlugOptions = exports.getSettingsServiceBySettingSlugQueryKey = exports.getSettingsServiceOptions = exports.getSettingsServiceQueryKey = exports.getSettingsCustomBySettingSlugValueOptions = exports.getSettingsCustomBySettingSlugValueQueryKey = exports.putSettingsCustomBySettingSlugMutation = exports.getSettingsCustomBySettingSlugOptions = exports.getSettingsCustomBySettingSlugQueryKey = exports.deleteSettingsCustomBySettingSlugMutation = exports.postSettingsCustomMutation = exports.postSettingsCustomOptions = exports.postSettingsCustomQueryKey = exports.getSettingsCustomOptions = exports.getSettingsCustomQueryKey = exports.getSettingsOptions = exports.getSettingsQueryKey = void 0;
exports.deleteCodesByCodeIdVersionsMutation = exports.getCodesByCodeIdVersionByVersionOptions = exports.getCodesByCodeIdVersionByVersionQueryKey = exports.postCodesLinksRefreshMutation = exports.postCodesLinksRefreshOptions = exports.postCodesLinksRefreshQueryKey = exports.postCodesByCodeIdValidateMutation = exports.postCodesByCodeIdValidateOptions = exports.postCodesByCodeIdValidateQueryKey = exports.postCodesValidateMutation = exports.postCodesValidateOptions = exports.postCodesValidateQueryKey = exports.postCodesGenerateByTypeMutation = exports.postCodesGenerateByTypeOptions = exports.postCodesGenerateByTypeQueryKey = exports.postCodesBulkGetMutation = exports.postCodesBulkGetOptions = exports.postCodesBulkGetQueryKey = exports.postCodesByCodeIdRestoreMutation = exports.postCodesByCodeIdRestoreOptions = exports.postCodesByCodeIdRestoreQueryKey = exports.deleteCodesByCodeIdPermanentMutation = exports.deleteCodesPermanentMutation = exports.putCodesByCodeIdOptionsMutation = exports.postCodesMutation = exports.postCodesOptions = exports.postCodesQueryKey = exports.getCodesInfiniteOptions = exports.getCodesInfiniteQueryKey = exports.getCodesOptions = exports.getCodesQueryKey = exports.deleteCodesMutation = exports.putCodesByCodeIdMutation = exports.getCodesByCodeIdOptions = exports.getCodesByCodeIdQueryKey = exports.deleteCodesByCodeIdMutation = exports.getCodesLinksInfiniteOptions = exports.getCodesLinksInfiniteQueryKey = exports.getCodesLinksOptions = exports.getCodesLinksQueryKey = exports.getCodesDeletedInfiniteOptions = exports.getCodesDeletedInfiniteQueryKey = exports.getCodesDeletedOptions = exports.getCodesDeletedQueryKey = exports.putCodesByCodeIdRouterRulesByRouterRuleIdMutation = exports.getCodesByCodeIdRouterRulesByRouterRuleIdOptions = exports.getCodesByCodeIdRouterRulesByRouterRuleIdQueryKey = exports.deleteCodesByCodeIdRouterRulesByRouterRuleIdMutation = exports.postCodesByCodeIdRouterRulesMutation = exports.postCodesByCodeIdRouterRulesOptions = void 0;
exports.postTextsQueryKey = exports.getTextsOptions = exports.getTextsQueryKey = exports.getStylesWorkspaceByWorkspaceIdOptions = exports.getStylesWorkspaceByWorkspaceIdQueryKey = exports.putStylesByStyleIdOptionsMutation = exports.putStylesByStyleIdMutation = exports.getStylesByStyleIdOptions = exports.getStylesByStyleIdQueryKey = exports.deleteStylesByStyleIdMutation = exports.getStylesBaseOptions = exports.getStylesBaseQueryKey = exports.postStylesMutation = exports.postStylesOptions = exports.postStylesQueryKey = exports.getStylesOptions = exports.getStylesQueryKey = exports.getTemplatesWorkspaceByWorkspaceIdOptions = exports.getTemplatesWorkspaceByWorkspaceIdQueryKey = exports.putTemplatesByTemplateIdOptionsMutation = exports.putTemplatesByTemplateIdMutation = exports.getTemplatesByTemplateIdOptions = exports.getTemplatesByTemplateIdQueryKey = exports.deleteTemplatesByTemplateIdMutation = exports.getTemplatesBaseOptions = exports.getTemplatesBaseQueryKey = exports.postTemplatesMutation = exports.postTemplatesOptions = exports.postTemplatesQueryKey = exports.getTemplatesOptions = exports.getTemplatesQueryKey = exports.deleteCodesByCodeIdLinksByTypeMutation = exports.deleteCodesByCodeIdLinksMutation = exports.getCodesByCodeIdByTypeLinkOptions = exports.getCodesByCodeIdByTypeLinkQueryKey = exports.getCodesByCodeIdByTypeOptions = exports.getCodesByCodeIdByTypeQueryKey = exports.deleteCodesByCodeIdVersionsLinksByTypeMutation = exports.deleteCodesByCodeIdVersionsLinksMutation = exports.deleteCodesByCodeIdVersionsByVersionLinksByTypeMutation = exports.deleteCodesByCodeIdVersionsByVersionLinksMutation = exports.getCodesByCodeIdVersionByVersionByTypeLinkOptions = exports.getCodesByCodeIdVersionByVersionByTypeLinkQueryKey = exports.getCodesByCodeIdVersionByVersionByTypeOptions = exports.getCodesByCodeIdVersionByVersionByTypeQueryKey = exports.postCodesByCodeIdVersionByVersionRestoreMutation = exports.postCodesByCodeIdVersionByVersionRestoreOptions = exports.postCodesByCodeIdVersionByVersionRestoreQueryKey = exports.getCodesByCodeIdVersionsOptions = exports.getCodesByCodeIdVersionsQueryKey = void 0;
exports.postWorkspacesByWorkspaceIdRouterRuleTemplatesMutation = exports.postWorkspacesByWorkspaceIdRouterRuleTemplatesOptions = exports.postWorkspacesByWorkspaceIdRouterRuleTemplatesQueryKey = exports.getWorkspacesByWorkspaceIdRouterRulesInfiniteOptions = exports.getWorkspacesByWorkspaceIdRouterRulesInfiniteQueryKey = exports.getWorkspacesByWorkspaceIdRouterRulesOptions = exports.getWorkspacesByWorkspaceIdRouterRulesQueryKey = exports.getRouterRulesInfiniteOptions = exports.getRouterRulesInfiniteQueryKey = exports.getRouterRulesOptions = exports.getRouterRulesQueryKey = exports.putRouterRuleTemplatesByRouterRuleTemplateIdMutation = exports.getRouterRuleTemplatesByRouterRuleTemplateIdOptions = exports.getRouterRuleTemplatesByRouterRuleTemplateIdQueryKey = exports.deleteRouterRuleTemplatesByRouterRuleTemplateIdMutation = exports.postRouterRuleTemplatesMutation = exports.postRouterRuleTemplatesOptions = exports.postRouterRuleTemplatesQueryKey = exports.getRouterRuleTemplatesInfiniteOptions = exports.getRouterRuleTemplatesInfiniteQueryKey = exports.getRouterRuleTemplatesOptions = exports.getRouterRuleTemplatesQueryKey = exports.getCountryCodesOptions = exports.getCountryCodesQueryKey = exports.getBordersWorkspaceByWorkspaceIdOptions = exports.getBordersWorkspaceByWorkspaceIdQueryKey = exports.putBordersByBorderIdOptionsMutation = exports.putBordersByBorderIdMutation = exports.getBordersByBorderIdOptions = exports.getBordersByBorderIdQueryKey = exports.deleteBordersByBorderIdMutation = exports.getBordersBaseOptions = exports.getBordersBaseQueryKey = exports.postBordersMutation = exports.postBordersOptions = exports.postBordersQueryKey = exports.getBordersOptions = exports.getBordersQueryKey = exports.getTextsWorkspaceByWorkspaceIdOptions = exports.getTextsWorkspaceByWorkspaceIdQueryKey = exports.putTextsByTextIdOptionsMutation = exports.putTextsByTextIdMutation = exports.getTextsByTextIdOptions = exports.getTextsByTextIdQueryKey = exports.deleteTextsByTextIdMutation = exports.getTextsBaseOptions = exports.getTextsBaseQueryKey = exports.postTextsMutation = exports.postTextsOptions = void 0;
const sdk_gen_1 = require("../sdk.gen");
const react_query_1 = require("@tanstack/react-query");
const client_gen_1 = require("../client.gen");
const createQueryKey = (id, options, infinite) => {
    const params = { _id: id, baseUrl: (options?.client ?? client_gen_1.client).getConfig().baseUrl };
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};
const postAuthRegisterQueryKey = (options) => createQueryKey('postAuthRegister', options);
exports.postAuthRegisterQueryKey = postAuthRegisterQueryKey;
/**
 * Register New User
 * Registers a new user and organization. Sends a verification code and token via email
 */
const postAuthRegisterOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postAuthRegister)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postAuthRegisterQueryKey)(options)
    });
};
exports.postAuthRegisterOptions = postAuthRegisterOptions;
/**
 * Register New User
 * Registers a new user and organization. Sends a verification code and token via email
 */
const postAuthRegisterMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postAuthRegister)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postAuthRegisterMutation = postAuthRegisterMutation;
const postAuthRegisterVerifyQueryKey = (options) => createQueryKey('postAuthRegisterVerify', options);
exports.postAuthRegisterVerifyQueryKey = postAuthRegisterVerifyQueryKey;
/**
 * Verify Registration Code or Token
 * Verifies the 6-digit code or token sent via email after registration
 */
const postAuthRegisterVerifyOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postAuthRegisterVerify)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postAuthRegisterVerifyQueryKey)(options)
    });
};
exports.postAuthRegisterVerifyOptions = postAuthRegisterVerifyOptions;
/**
 * Verify Registration Code or Token
 * Verifies the 6-digit code or token sent via email after registration
 */
const postAuthRegisterVerifyMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postAuthRegisterVerify)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postAuthRegisterVerifyMutation = postAuthRegisterVerifyMutation;
const postAuthRegisterVerifyResendQueryKey = (options) => createQueryKey('postAuthRegisterVerifyResend', options);
exports.postAuthRegisterVerifyResendQueryKey = postAuthRegisterVerifyResendQueryKey;
/**
 * Resend Registration Verification Code and Token
 * Resends the 6-digit verification code or token to the user's email.
 */
const postAuthRegisterVerifyResendOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postAuthRegisterVerifyResend)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postAuthRegisterVerifyResendQueryKey)(options)
    });
};
exports.postAuthRegisterVerifyResendOptions = postAuthRegisterVerifyResendOptions;
/**
 * Resend Registration Verification Code and Token
 * Resends the 6-digit verification code or token to the user's email.
 */
const postAuthRegisterVerifyResendMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postAuthRegisterVerifyResend)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postAuthRegisterVerifyResendMutation = postAuthRegisterVerifyResendMutation;
const postAuthSignInQueryKey = (options) => createQueryKey('postAuthSignIn', options);
exports.postAuthSignInQueryKey = postAuthSignInQueryKey;
/**
 * Sign In User
 * Initiates user sign-in. Returns an access token if password is provided and correct, otherwise indicates if passwordless verification is needed
 */
const postAuthSignInOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postAuthSignIn)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postAuthSignInQueryKey)(options)
    });
};
exports.postAuthSignInOptions = postAuthSignInOptions;
/**
 * Sign In User
 * Initiates user sign-in. Returns an access token if password is provided and correct, otherwise indicates if passwordless verification is needed
 */
const postAuthSignInMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postAuthSignIn)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postAuthSignInMutation = postAuthSignInMutation;
const postAuthSignInVerifyQueryKey = (options) => createQueryKey('postAuthSignInVerify', options);
exports.postAuthSignInVerifyQueryKey = postAuthSignInVerifyQueryKey;
/**
 * Verify Sign In Code or Token
 * Verifies the 6-digit code or token sent via email for passwordless sign-in
 */
const postAuthSignInVerifyOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postAuthSignInVerify)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postAuthSignInVerifyQueryKey)(options)
    });
};
exports.postAuthSignInVerifyOptions = postAuthSignInVerifyOptions;
/**
 * Verify Sign In Code or Token
 * Verifies the 6-digit code or token sent via email for passwordless sign-in
 */
const postAuthSignInVerifyMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postAuthSignInVerify)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postAuthSignInVerifyMutation = postAuthSignInVerifyMutation;
const postAuthEmailVerifySendQueryKey = (options) => createQueryKey('postAuthEmailVerifySend', options);
exports.postAuthEmailVerifySendQueryKey = postAuthEmailVerifySendQueryKey;
/**
 * Send Email Verification Code and Token
 * Sends a verification code and token to the user's email if it's not already verified.
 */
const postAuthEmailVerifySendOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postAuthEmailVerifySend)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postAuthEmailVerifySendQueryKey)(options)
    });
};
exports.postAuthEmailVerifySendOptions = postAuthEmailVerifySendOptions;
/**
 * Send Email Verification Code and Token
 * Sends a verification code and token to the user's email if it's not already verified.
 */
const postAuthEmailVerifySendMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postAuthEmailVerifySend)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postAuthEmailVerifySendMutation = postAuthEmailVerifySendMutation;
const postAuthEmailVerifyQueryKey = (options) => createQueryKey('postAuthEmailVerify', options);
exports.postAuthEmailVerifyQueryKey = postAuthEmailVerifyQueryKey;
/**
 * Verify Email Address
 * Verifies the user's email address using the provided code or token.
 */
const postAuthEmailVerifyOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postAuthEmailVerify)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postAuthEmailVerifyQueryKey)(options)
    });
};
exports.postAuthEmailVerifyOptions = postAuthEmailVerifyOptions;
/**
 * Verify Email Address
 * Verifies the user's email address using the provided code or token.
 */
const postAuthEmailVerifyMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postAuthEmailVerify)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postAuthEmailVerifyMutation = postAuthEmailVerifyMutation;
const getAuthMeQueryKey = (options) => createQueryKey('getAuthMe', options);
exports.getAuthMeQueryKey = getAuthMeQueryKey;
/**
 * Get Current User
 * Retrieves the details of the currently authenticated user
 */
const getAuthMeOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getAuthMe)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getAuthMeQueryKey)(options)
    });
};
exports.getAuthMeOptions = getAuthMeOptions;
const getAuthSignOutQueryKey = (options) => createQueryKey('getAuthSignOut', options);
exports.getAuthSignOutQueryKey = getAuthSignOutQueryKey;
/**
 * Sign Out User
 * Signs out the current user by clearing relevant cookies/session data
 */
const getAuthSignOutOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getAuthSignOut)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getAuthSignOutQueryKey)(options)
    });
};
exports.getAuthSignOutOptions = getAuthSignOutOptions;
const postAuthPasswordResetQueryKey = (options) => createQueryKey('postAuthPasswordReset', options);
exports.postAuthPasswordResetQueryKey = postAuthPasswordResetQueryKey;
/**
 * Request Password Reset
 * Sends a password reset email with a verification token
 */
const postAuthPasswordResetOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postAuthPasswordReset)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postAuthPasswordResetQueryKey)(options)
    });
};
exports.postAuthPasswordResetOptions = postAuthPasswordResetOptions;
/**
 * Request Password Reset
 * Sends a password reset email with a verification token
 */
const postAuthPasswordResetMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postAuthPasswordReset)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postAuthPasswordResetMutation = postAuthPasswordResetMutation;
const postAuthPasswordResetVerifyQueryKey = (options) => createQueryKey('postAuthPasswordResetVerify', options);
exports.postAuthPasswordResetVerifyQueryKey = postAuthPasswordResetVerifyQueryKey;
/**
 * Verify Password Reset
 * Verifies the password reset token and sets a new password
 */
const postAuthPasswordResetVerifyOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postAuthPasswordResetVerify)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postAuthPasswordResetVerifyQueryKey)(options)
    });
};
exports.postAuthPasswordResetVerifyOptions = postAuthPasswordResetVerifyOptions;
/**
 * Verify Password Reset
 * Verifies the password reset token and sets a new password
 */
const postAuthPasswordResetVerifyMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postAuthPasswordResetVerify)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postAuthPasswordResetVerifyMutation = postAuthPasswordResetVerifyMutation;
const postAuthPasswordChangeQueryKey = (options) => createQueryKey('postAuthPasswordChange', options);
exports.postAuthPasswordChangeQueryKey = postAuthPasswordChangeQueryKey;
/**
 * Change Password
 * Changes the password for the authenticated user
 */
const postAuthPasswordChangeOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postAuthPasswordChange)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postAuthPasswordChangeQueryKey)(options)
    });
};
exports.postAuthPasswordChangeOptions = postAuthPasswordChangeOptions;
/**
 * Change Password
 * Changes the password for the authenticated user
 */
const postAuthPasswordChangeMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postAuthPasswordChange)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postAuthPasswordChangeMutation = postAuthPasswordChangeMutation;
const getApiKeysQueryKey = (options) => createQueryKey('getApiKeys', options);
exports.getApiKeysQueryKey = getApiKeysQueryKey;
/**
 * List API keys
 * Retrieves all API keys for the current organization.
 */
const getApiKeysOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getApiKeys)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getApiKeysQueryKey)(options)
    });
};
exports.getApiKeysOptions = getApiKeysOptions;
const postApiKeysQueryKey = (options) => createQueryKey('postApiKeys', options);
exports.postApiKeysQueryKey = postApiKeysQueryKey;
/**
 * Create API key
 * Creates a new API key for the current organization.
 */
const postApiKeysOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postApiKeys)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postApiKeysQueryKey)(options)
    });
};
exports.postApiKeysOptions = postApiKeysOptions;
/**
 * Create API key
 * Creates a new API key for the current organization.
 */
const postApiKeysMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postApiKeys)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postApiKeysMutation = postApiKeysMutation;
/**
 * Delete API key
 * Deletes an API key by its ID.
 */
const deleteApiKeysByApiKeyIdMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.deleteApiKeysByApiKeyId)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.deleteApiKeysByApiKeyIdMutation = deleteApiKeysByApiKeyIdMutation;
const getApiKeysByApiKeyIdQueryKey = (options) => createQueryKey('getApiKeysByApiKeyId', options);
exports.getApiKeysByApiKeyIdQueryKey = getApiKeysByApiKeyIdQueryKey;
/**
 * Get API key details
 * Retrieves details of a specific API key by its ID.
 */
const getApiKeysByApiKeyIdOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getApiKeysByApiKeyId)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getApiKeysByApiKeyIdQueryKey)(options)
    });
};
exports.getApiKeysByApiKeyIdOptions = getApiKeysByApiKeyIdOptions;
/**
 * Update API key
 * Updates an existing API key by its ID.
 */
const putApiKeysByApiKeyIdMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.putApiKeysByApiKeyId)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.putApiKeysByApiKeyIdMutation = putApiKeysByApiKeyIdMutation;
/**
 * Change API key status
 * Changes the status of an API key (activate or disable).
 */
const putApiKeysByApiKeyIdStatusMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.putApiKeysByApiKeyIdStatus)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.putApiKeysByApiKeyIdStatusMutation = putApiKeysByApiKeyIdStatusMutation;
const getOrgsCurrentQueryKey = (options) => createQueryKey('getOrgsCurrent', options);
exports.getOrgsCurrentQueryKey = getOrgsCurrentQueryKey;
/**
 * Get current organization
 * Retrieves details of the current active organization for the authenticated user.
 */
const getOrgsCurrentOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getOrgsCurrent)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getOrgsCurrentQueryKey)(options)
    });
};
exports.getOrgsCurrentOptions = getOrgsCurrentOptions;
/**
 * Update current organization
 * Updates the details of the current active organization.
 */
const putOrgsMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.putOrgs)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.putOrgsMutation = putOrgsMutation;
const postOrgsFirstQueryKey = (options) => createQueryKey('postOrgsFirst', options);
exports.postOrgsFirstQueryKey = postOrgsFirstQueryKey;
/**
 * Create first organization
 * Creates the first organization for a new user. Only works when the user has no organizations.
 */
const postOrgsFirstOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postOrgsFirst)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postOrgsFirstQueryKey)(options)
    });
};
exports.postOrgsFirstOptions = postOrgsFirstOptions;
/**
 * Create first organization
 * Creates the first organization for a new user. Only works when the user has no organizations.
 */
const postOrgsFirstMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postOrgsFirst)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postOrgsFirstMutation = postOrgsFirstMutation;
const postOrgsCurrentByOrgIdQueryKey = (options) => createQueryKey('postOrgsCurrentByOrgId', options);
exports.postOrgsCurrentByOrgIdQueryKey = postOrgsCurrentByOrgIdQueryKey;
/**
 * Switch current organization
 * Switches the current active organization for the authenticated user.
 */
const postOrgsCurrentByOrgIdOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postOrgsCurrentByOrgId)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postOrgsCurrentByOrgIdQueryKey)(options)
    });
};
exports.postOrgsCurrentByOrgIdOptions = postOrgsCurrentByOrgIdOptions;
/**
 * Switch current organization
 * Switches the current active organization for the authenticated user.
 */
const postOrgsCurrentByOrgIdMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postOrgsCurrentByOrgId)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postOrgsCurrentByOrgIdMutation = postOrgsCurrentByOrgIdMutation;
const getInvitesQueryKey = (options) => createQueryKey('getInvites', options);
exports.getInvitesQueryKey = getInvitesQueryKey;
/**
 * List organization invitations
 * Retrieves all invitations for the current organization.
 */
const getInvitesOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getInvites)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getInvitesQueryKey)(options)
    });
};
exports.getInvitesOptions = getInvitesOptions;
const postInvitesQueryKey = (options) => createQueryKey('postInvites', options);
exports.postInvitesQueryKey = postInvitesQueryKey;
/**
 * Create invitation
 * Creates a new invitation to join the organization with a specified role.
 */
const postInvitesOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postInvites)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postInvitesQueryKey)(options)
    });
};
exports.postInvitesOptions = postInvitesOptions;
/**
 * Create invitation
 * Creates a new invitation to join the organization with a specified role.
 */
const postInvitesMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postInvites)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postInvitesMutation = postInvitesMutation;
const getInvitesMeQueryKey = (options) => createQueryKey('getInvitesMe', options);
exports.getInvitesMeQueryKey = getInvitesMeQueryKey;
/**
 * List my invitations
 * Retrieves all invitations sent by the current user.
 */
const getInvitesMeOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getInvitesMe)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getInvitesMeQueryKey)(options)
    });
};
exports.getInvitesMeOptions = getInvitesMeOptions;
/**
 * Delete invitation
 * Deletes an invitation by its ID.
 */
const deleteInvitesByInvitationIdMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.deleteInvitesByInvitationId)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.deleteInvitesByInvitationIdMutation = deleteInvitesByInvitationIdMutation;
const getInvitesByTokenAcceptQueryKey = (options) => createQueryKey('getInvitesByTokenAccept', options);
exports.getInvitesByTokenAcceptQueryKey = getInvitesByTokenAcceptQueryKey;
/**
 * Accept invitation
 * Accepts an invitation using the provided token. Creates a user account if needed.
 */
const getInvitesByTokenAcceptOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getInvitesByTokenAccept)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getInvitesByTokenAcceptQueryKey)(options)
    });
};
exports.getInvitesByTokenAcceptOptions = getInvitesByTokenAcceptOptions;
const getInvitesByTokenDeclineQueryKey = (options) => createQueryKey('getInvitesByTokenDecline', options);
exports.getInvitesByTokenDeclineQueryKey = getInvitesByTokenDeclineQueryKey;
/**
 * Decline invitation
 * Declines an invitation using the provided token.
 */
const getInvitesByTokenDeclineOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getInvitesByTokenDecline)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getInvitesByTokenDeclineQueryKey)(options)
    });
};
exports.getInvitesByTokenDeclineOptions = getInvitesByTokenDeclineOptions;
const getMembersQueryKey = (options) => createQueryKey('getMembers', options);
exports.getMembersQueryKey = getMembersQueryKey;
/**
 * List organization members
 * Retrieves all members of the current organization.
 */
const getMembersOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getMembers)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getMembersQueryKey)(options)
    });
};
exports.getMembersOptions = getMembersOptions;
const postMembersQueryKey = (options) => createQueryKey('postMembers', options);
exports.postMembersQueryKey = postMembersQueryKey;
/**
 * Add a member to organization
 * Adds a new member to the current organization with the specified role.
 */
const postMembersOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postMembers)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postMembersQueryKey)(options)
    });
};
exports.postMembersOptions = postMembersOptions;
/**
 * Add a member to organization
 * Adds a new member to the current organization with the specified role.
 */
const postMembersMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postMembers)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postMembersMutation = postMembersMutation;
/**
 * Remove member from organization
 * Removes a member from the current organization.
 */
const deleteMembersByUserIdMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.deleteMembersByUserId)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.deleteMembersByUserIdMutation = deleteMembersByUserIdMutation;
const getMembersByUserIdRolesQueryKey = (options) => createQueryKey('getMembersByUserIdRoles', options);
exports.getMembersByUserIdRolesQueryKey = getMembersByUserIdRolesQueryKey;
/**
 * Get member roles
 * Retrieves all roles assigned to a member in the current organization.
 */
const getMembersByUserIdRolesOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getMembersByUserIdRoles)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getMembersByUserIdRolesQueryKey)(options)
    });
};
exports.getMembersByUserIdRolesOptions = getMembersByUserIdRolesOptions;
const postMembersByUserIdRoleQueryKey = (options) => createQueryKey('postMembersByUserIdRole', options);
exports.postMembersByUserIdRoleQueryKey = postMembersByUserIdRoleQueryKey;
/**
 * Add role to member
 * Assigns a new role to a member in the current organization.
 */
const postMembersByUserIdRoleOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postMembersByUserIdRole)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postMembersByUserIdRoleQueryKey)(options)
    });
};
exports.postMembersByUserIdRoleOptions = postMembersByUserIdRoleOptions;
/**
 * Add role to member
 * Assigns a new role to a member in the current organization.
 */
const postMembersByUserIdRoleMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postMembersByUserIdRole)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postMembersByUserIdRoleMutation = postMembersByUserIdRoleMutation;
/**
 * Remove role from member
 * Removes a role from a member in the current organization.
 */
const deleteMembersByUserIdRoleByRoleNameMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.deleteMembersByUserIdRoleByRoleName)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.deleteMembersByUserIdRoleByRoleNameMutation = deleteMembersByUserIdRoleByRoleNameMutation;
const getWorkspacesQueryKey = (options) => createQueryKey('getWorkspaces', options);
exports.getWorkspacesQueryKey = getWorkspacesQueryKey;
/**
 * List workspaces
 * Retrieves all workspaces for the current organization.
 */
const getWorkspacesOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getWorkspaces)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getWorkspacesQueryKey)(options)
    });
};
exports.getWorkspacesOptions = getWorkspacesOptions;
const postWorkspacesQueryKey = (options) => createQueryKey('postWorkspaces', options);
exports.postWorkspacesQueryKey = postWorkspacesQueryKey;
/**
 * Create a new workspace
 * Creates a new workspace in the current organization.
 */
const postWorkspacesOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postWorkspaces)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postWorkspacesQueryKey)(options)
    });
};
exports.postWorkspacesOptions = postWorkspacesOptions;
/**
 * Create a new workspace
 * Creates a new workspace in the current organization.
 */
const postWorkspacesMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postWorkspaces)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postWorkspacesMutation = postWorkspacesMutation;
/**
 * Delete workspace
 * Deletes a workspace by its unique identifier.
 */
const deleteWorkspacesByWorkspaceIdMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.deleteWorkspacesByWorkspaceId)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.deleteWorkspacesByWorkspaceIdMutation = deleteWorkspacesByWorkspaceIdMutation;
const getWorkspacesByWorkspaceIdQueryKey = (options) => createQueryKey('getWorkspacesByWorkspaceId', options);
exports.getWorkspacesByWorkspaceIdQueryKey = getWorkspacesByWorkspaceIdQueryKey;
/**
 * Get workspace by ID
 * Retrieves a specific workspace by its unique identifier.
 */
const getWorkspacesByWorkspaceIdOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getWorkspacesByWorkspaceId)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getWorkspacesByWorkspaceIdQueryKey)(options)
    });
};
exports.getWorkspacesByWorkspaceIdOptions = getWorkspacesByWorkspaceIdOptions;
/**
 * Update workspace
 * Updates an existing workspace by its unique identifier.
 */
const putWorkspacesByWorkspaceIdMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.putWorkspacesByWorkspaceId)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.putWorkspacesByWorkspaceIdMutation = putWorkspacesByWorkspaceIdMutation;
/**
 * Remove role from workspace member
 * Removes a role from a user in a specific workspace.
 */
const deleteWorkspacesByWorkspaceIdMembersByUserIdRoleMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.deleteWorkspacesByWorkspaceIdMembersByUserIdRole)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.deleteWorkspacesByWorkspaceIdMembersByUserIdRoleMutation = deleteWorkspacesByWorkspaceIdMembersByUserIdRoleMutation;
const getWorkspacesByWorkspaceIdMembersByUserIdRoleQueryKey = (options) => createQueryKey('getWorkspacesByWorkspaceIdMembersByUserIdRole', options);
exports.getWorkspacesByWorkspaceIdMembersByUserIdRoleQueryKey = getWorkspacesByWorkspaceIdMembersByUserIdRoleQueryKey;
/**
 * Get user roles in workspace
 * Retrieves the roles assigned to a specific user in a workspace.
 */
const getWorkspacesByWorkspaceIdMembersByUserIdRoleOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getWorkspacesByWorkspaceIdMembersByUserIdRole)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getWorkspacesByWorkspaceIdMembersByUserIdRoleQueryKey)(options)
    });
};
exports.getWorkspacesByWorkspaceIdMembersByUserIdRoleOptions = getWorkspacesByWorkspaceIdMembersByUserIdRoleOptions;
const postWorkspacesByWorkspaceIdMembersByUserIdRoleQueryKey = (options) => createQueryKey('postWorkspacesByWorkspaceIdMembersByUserIdRole', options);
exports.postWorkspacesByWorkspaceIdMembersByUserIdRoleQueryKey = postWorkspacesByWorkspaceIdMembersByUserIdRoleQueryKey;
/**
 * Add role to workspace member
 * Assigns a role to a user in a specific workspace.
 */
const postWorkspacesByWorkspaceIdMembersByUserIdRoleOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postWorkspacesByWorkspaceIdMembersByUserIdRole)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postWorkspacesByWorkspaceIdMembersByUserIdRoleQueryKey)(options)
    });
};
exports.postWorkspacesByWorkspaceIdMembersByUserIdRoleOptions = postWorkspacesByWorkspaceIdMembersByUserIdRoleOptions;
/**
 * Add role to workspace member
 * Assigns a role to a user in a specific workspace.
 */
const postWorkspacesByWorkspaceIdMembersByUserIdRoleMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postWorkspacesByWorkspaceIdMembersByUserIdRole)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postWorkspacesByWorkspaceIdMembersByUserIdRoleMutation = postWorkspacesByWorkspaceIdMembersByUserIdRoleMutation;
const getWorkspacesByWorkspaceIdMembersQueryKey = (options) => createQueryKey('getWorkspacesByWorkspaceIdMembers', options);
exports.getWorkspacesByWorkspaceIdMembersQueryKey = getWorkspacesByWorkspaceIdMembersQueryKey;
/**
 * List workspace members
 * Retrieves all members in a specific workspace.
 */
const getWorkspacesByWorkspaceIdMembersOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getWorkspacesByWorkspaceIdMembers)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getWorkspacesByWorkspaceIdMembersQueryKey)(options)
    });
};
exports.getWorkspacesByWorkspaceIdMembersOptions = getWorkspacesByWorkspaceIdMembersOptions;
const getRolesQueryKey = (options) => createQueryKey('getRoles', options);
exports.getRolesQueryKey = getRolesQueryKey;
/**
 * List all roles
 * Retrieves all system roles with their associated permission scopes.
 */
const getRolesOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getRoles)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getRolesQueryKey)(options)
    });
};
exports.getRolesOptions = getRolesOptions;
const getPlansQueryKey = (options) => createQueryKey('getPlans', options);
exports.getPlansQueryKey = getPlansQueryKey;
/**
 * List available plans
 * Retrieves all available plans. If authenticated, the current plan will be marked.
 */
const getPlansOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getPlans)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getPlansQueryKey)(options)
    });
};
exports.getPlansOptions = getPlansOptions;
const getPlansCurrentQueryKey = (options) => createQueryKey('getPlansCurrent', options);
exports.getPlansCurrentQueryKey = getPlansCurrentQueryKey;
/**
 * Get current plan
 * Retrieves the current plan for the authenticated organization with usage details.
 */
const getPlansCurrentOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getPlansCurrent)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getPlansCurrentQueryKey)(options)
    });
};
exports.getPlansCurrentOptions = getPlansCurrentOptions;
const getSettingsQueryKey = (options) => createQueryKey('getSettings', options);
exports.getSettingsQueryKey = getSettingsQueryKey;
/**
 * Get all organization settings
 * Retrieves all settings (custom and service) for the organization.
 */
const getSettingsOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getSettings)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getSettingsQueryKey)(options)
    });
};
exports.getSettingsOptions = getSettingsOptions;
const getSettingsCustomQueryKey = (options) => createQueryKey('getSettingsCustom', options);
exports.getSettingsCustomQueryKey = getSettingsCustomQueryKey;
/**
 * Get all custom settings
 * Retrieves all custom settings for the organization.
 */
const getSettingsCustomOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getSettingsCustom)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getSettingsCustomQueryKey)(options)
    });
};
exports.getSettingsCustomOptions = getSettingsCustomOptions;
const postSettingsCustomQueryKey = (options) => createQueryKey('postSettingsCustom', options);
exports.postSettingsCustomQueryKey = postSettingsCustomQueryKey;
/**
 * Create custom setting
 * Creates a new custom setting for the organization.
 */
const postSettingsCustomOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postSettingsCustom)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postSettingsCustomQueryKey)(options)
    });
};
exports.postSettingsCustomOptions = postSettingsCustomOptions;
/**
 * Create custom setting
 * Creates a new custom setting for the organization.
 */
const postSettingsCustomMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postSettingsCustom)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postSettingsCustomMutation = postSettingsCustomMutation;
/**
 * Delete custom setting
 * Deletes a custom setting by its slug.
 */
const deleteSettingsCustomBySettingSlugMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.deleteSettingsCustomBySettingSlug)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.deleteSettingsCustomBySettingSlugMutation = deleteSettingsCustomBySettingSlugMutation;
const getSettingsCustomBySettingSlugQueryKey = (options) => createQueryKey('getSettingsCustomBySettingSlug', options);
exports.getSettingsCustomBySettingSlugQueryKey = getSettingsCustomBySettingSlugQueryKey;
/**
 * Get custom setting by slug
 * Retrieves a specific custom setting by its slug.
 */
const getSettingsCustomBySettingSlugOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getSettingsCustomBySettingSlug)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getSettingsCustomBySettingSlugQueryKey)(options)
    });
};
exports.getSettingsCustomBySettingSlugOptions = getSettingsCustomBySettingSlugOptions;
/**
 * Update custom setting
 * Updates an existing custom setting by its slug.
 */
const putSettingsCustomBySettingSlugMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.putSettingsCustomBySettingSlug)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.putSettingsCustomBySettingSlugMutation = putSettingsCustomBySettingSlugMutation;
const getSettingsCustomBySettingSlugValueQueryKey = (options) => createQueryKey('getSettingsCustomBySettingSlugValue', options);
exports.getSettingsCustomBySettingSlugValueQueryKey = getSettingsCustomBySettingSlugValueQueryKey;
/**
 * Get custom setting value
 * Retrieves only the value of a specific custom setting by its slug.
 */
const getSettingsCustomBySettingSlugValueOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getSettingsCustomBySettingSlugValue)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getSettingsCustomBySettingSlugValueQueryKey)(options)
    });
};
exports.getSettingsCustomBySettingSlugValueOptions = getSettingsCustomBySettingSlugValueOptions;
const getSettingsServiceQueryKey = (options) => createQueryKey('getSettingsService', options);
exports.getSettingsServiceQueryKey = getSettingsServiceQueryKey;
/**
 * Get all service settings
 * Retrieves all service settings for the organization.
 */
const getSettingsServiceOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getSettingsService)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getSettingsServiceQueryKey)(options)
    });
};
exports.getSettingsServiceOptions = getSettingsServiceOptions;
const getSettingsServiceBySettingSlugQueryKey = (options) => createQueryKey('getSettingsServiceBySettingSlug', options);
exports.getSettingsServiceBySettingSlugQueryKey = getSettingsServiceBySettingSlugQueryKey;
/**
 * Get service setting by slug
 * Retrieves a specific service setting by its slug.
 */
const getSettingsServiceBySettingSlugOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getSettingsServiceBySettingSlug)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getSettingsServiceBySettingSlugQueryKey)(options)
    });
};
exports.getSettingsServiceBySettingSlugOptions = getSettingsServiceBySettingSlugOptions;
/**
 * Upsert service setting
 * Updates an existing service setting or creates it if it does not exist.
 */
const putSettingsServiceBySettingSlugMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.putSettingsServiceBySettingSlug)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.putSettingsServiceBySettingSlugMutation = putSettingsServiceBySettingSlugMutation;
const getSettingsServiceBySettingSlugValueQueryKey = (options) => createQueryKey('getSettingsServiceBySettingSlugValue', options);
exports.getSettingsServiceBySettingSlugValueQueryKey = getSettingsServiceBySettingSlugValueQueryKey;
/**
 * Get service setting value
 * Retrieves only the value of a specific service setting by its slug.
 */
const getSettingsServiceBySettingSlugValueOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getSettingsServiceBySettingSlugValue)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getSettingsServiceBySettingSlugValueQueryKey)(options)
    });
};
exports.getSettingsServiceBySettingSlugValueOptions = getSettingsServiceBySettingSlugValueOptions;
const getWorkspacesByWorkspaceIdSettingsQueryKey = (options) => createQueryKey('getWorkspacesByWorkspaceIdSettings', options);
exports.getWorkspacesByWorkspaceIdSettingsQueryKey = getWorkspacesByWorkspaceIdSettingsQueryKey;
/**
 * Get all workspace settings
 * Retrieves all settings (custom and service) for the workspace.
 */
const getWorkspacesByWorkspaceIdSettingsOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getWorkspacesByWorkspaceIdSettings)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getWorkspacesByWorkspaceIdSettingsQueryKey)(options)
    });
};
exports.getWorkspacesByWorkspaceIdSettingsOptions = getWorkspacesByWorkspaceIdSettingsOptions;
const getWorkspacesByWorkspaceIdSettingsCustomQueryKey = (options) => createQueryKey('getWorkspacesByWorkspaceIdSettingsCustom', options);
exports.getWorkspacesByWorkspaceIdSettingsCustomQueryKey = getWorkspacesByWorkspaceIdSettingsCustomQueryKey;
/**
 * Get all workspace custom settings
 * Retrieves all custom settings for the workspace.
 */
const getWorkspacesByWorkspaceIdSettingsCustomOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getWorkspacesByWorkspaceIdSettingsCustom)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getWorkspacesByWorkspaceIdSettingsCustomQueryKey)(options)
    });
};
exports.getWorkspacesByWorkspaceIdSettingsCustomOptions = getWorkspacesByWorkspaceIdSettingsCustomOptions;
const postWorkspacesByWorkspaceIdSettingsCustomQueryKey = (options) => createQueryKey('postWorkspacesByWorkspaceIdSettingsCustom', options);
exports.postWorkspacesByWorkspaceIdSettingsCustomQueryKey = postWorkspacesByWorkspaceIdSettingsCustomQueryKey;
/**
 * Create workspace custom setting
 * Creates a new custom setting for the workspace.
 */
const postWorkspacesByWorkspaceIdSettingsCustomOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postWorkspacesByWorkspaceIdSettingsCustom)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postWorkspacesByWorkspaceIdSettingsCustomQueryKey)(options)
    });
};
exports.postWorkspacesByWorkspaceIdSettingsCustomOptions = postWorkspacesByWorkspaceIdSettingsCustomOptions;
/**
 * Create workspace custom setting
 * Creates a new custom setting for the workspace.
 */
const postWorkspacesByWorkspaceIdSettingsCustomMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postWorkspacesByWorkspaceIdSettingsCustom)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postWorkspacesByWorkspaceIdSettingsCustomMutation = postWorkspacesByWorkspaceIdSettingsCustomMutation;
/**
 * Delete workspace custom setting
 * Deletes a workspace custom setting by its slug.
 */
const deleteWorkspacesByWorkspaceIdSettingsCustomBySettingSlugMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.deleteWorkspacesByWorkspaceIdSettingsCustomBySettingSlug)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.deleteWorkspacesByWorkspaceIdSettingsCustomBySettingSlugMutation = deleteWorkspacesByWorkspaceIdSettingsCustomBySettingSlugMutation;
const getWorkspacesByWorkspaceIdSettingsCustomBySettingSlugQueryKey = (options) => createQueryKey('getWorkspacesByWorkspaceIdSettingsCustomBySettingSlug', options);
exports.getWorkspacesByWorkspaceIdSettingsCustomBySettingSlugQueryKey = getWorkspacesByWorkspaceIdSettingsCustomBySettingSlugQueryKey;
/**
 * Get workspace custom setting by slug
 * Retrieves a specific workspace custom setting by its slug.
 */
const getWorkspacesByWorkspaceIdSettingsCustomBySettingSlugOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getWorkspacesByWorkspaceIdSettingsCustomBySettingSlug)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getWorkspacesByWorkspaceIdSettingsCustomBySettingSlugQueryKey)(options)
    });
};
exports.getWorkspacesByWorkspaceIdSettingsCustomBySettingSlugOptions = getWorkspacesByWorkspaceIdSettingsCustomBySettingSlugOptions;
/**
 * Update workspace custom setting
 * Updates an existing workspace custom setting by its slug.
 */
const putWorkspacesByWorkspaceIdSettingsCustomBySettingSlugMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.putWorkspacesByWorkspaceIdSettingsCustomBySettingSlug)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.putWorkspacesByWorkspaceIdSettingsCustomBySettingSlugMutation = putWorkspacesByWorkspaceIdSettingsCustomBySettingSlugMutation;
const getWorkspacesByWorkspaceIdSettingsCustomBySettingSlugValueQueryKey = (options) => createQueryKey('getWorkspacesByWorkspaceIdSettingsCustomBySettingSlugValue', options);
exports.getWorkspacesByWorkspaceIdSettingsCustomBySettingSlugValueQueryKey = getWorkspacesByWorkspaceIdSettingsCustomBySettingSlugValueQueryKey;
/**
 * Get workspace custom setting value
 * Retrieves only the value of a specific workspace custom setting by its slug.
 */
const getWorkspacesByWorkspaceIdSettingsCustomBySettingSlugValueOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getWorkspacesByWorkspaceIdSettingsCustomBySettingSlugValue)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getWorkspacesByWorkspaceIdSettingsCustomBySettingSlugValueQueryKey)(options)
    });
};
exports.getWorkspacesByWorkspaceIdSettingsCustomBySettingSlugValueOptions = getWorkspacesByWorkspaceIdSettingsCustomBySettingSlugValueOptions;
const getWorkspacesByWorkspaceIdSettingsServiceQueryKey = (options) => createQueryKey('getWorkspacesByWorkspaceIdSettingsService', options);
exports.getWorkspacesByWorkspaceIdSettingsServiceQueryKey = getWorkspacesByWorkspaceIdSettingsServiceQueryKey;
/**
 * Get all workspace service settings
 * Retrieves all service settings for the workspace.
 */
const getWorkspacesByWorkspaceIdSettingsServiceOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getWorkspacesByWorkspaceIdSettingsService)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getWorkspacesByWorkspaceIdSettingsServiceQueryKey)(options)
    });
};
exports.getWorkspacesByWorkspaceIdSettingsServiceOptions = getWorkspacesByWorkspaceIdSettingsServiceOptions;
/**
 * Delete workspace service setting override
 * Deletes a workspace-level override for a service setting, reverting to organization defaults.
 */
const deleteWorkspacesByWorkspaceIdSettingsServiceBySettingSlugMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.deleteWorkspacesByWorkspaceIdSettingsServiceBySettingSlug)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.deleteWorkspacesByWorkspaceIdSettingsServiceBySettingSlugMutation = deleteWorkspacesByWorkspaceIdSettingsServiceBySettingSlugMutation;
const getWorkspacesByWorkspaceIdSettingsServiceBySettingSlugQueryKey = (options) => createQueryKey('getWorkspacesByWorkspaceIdSettingsServiceBySettingSlug', options);
exports.getWorkspacesByWorkspaceIdSettingsServiceBySettingSlugQueryKey = getWorkspacesByWorkspaceIdSettingsServiceBySettingSlugQueryKey;
/**
 * Get workspace service setting by slug
 * Retrieves a specific workspace service setting by its slug.
 */
const getWorkspacesByWorkspaceIdSettingsServiceBySettingSlugOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getWorkspacesByWorkspaceIdSettingsServiceBySettingSlug)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getWorkspacesByWorkspaceIdSettingsServiceBySettingSlugQueryKey)(options)
    });
};
exports.getWorkspacesByWorkspaceIdSettingsServiceBySettingSlugOptions = getWorkspacesByWorkspaceIdSettingsServiceBySettingSlugOptions;
/**
 * Upsert workspace service setting
 * Updates an existing workspace service setting or creates it if it does not exist.
 */
const putWorkspacesByWorkspaceIdSettingsServiceBySettingSlugMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.putWorkspacesByWorkspaceIdSettingsServiceBySettingSlug)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.putWorkspacesByWorkspaceIdSettingsServiceBySettingSlugMutation = putWorkspacesByWorkspaceIdSettingsServiceBySettingSlugMutation;
const getWorkspacesByWorkspaceIdSettingsServiceBySettingSlugValueQueryKey = (options) => createQueryKey('getWorkspacesByWorkspaceIdSettingsServiceBySettingSlugValue', options);
exports.getWorkspacesByWorkspaceIdSettingsServiceBySettingSlugValueQueryKey = getWorkspacesByWorkspaceIdSettingsServiceBySettingSlugValueQueryKey;
/**
 * Get workspace service setting value
 * Retrieves only the value of a specific workspace service setting by its slug.
 */
const getWorkspacesByWorkspaceIdSettingsServiceBySettingSlugValueOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getWorkspacesByWorkspaceIdSettingsServiceBySettingSlugValue)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getWorkspacesByWorkspaceIdSettingsServiceBySettingSlugValueQueryKey)(options)
    });
};
exports.getWorkspacesByWorkspaceIdSettingsServiceBySettingSlugValueOptions = getWorkspacesByWorkspaceIdSettingsServiceBySettingSlugValueOptions;
const getCodesByCodeIdScansQueryKey = (options) => createQueryKey('getCodesByCodeIdScans', options);
exports.getCodesByCodeIdScansQueryKey = getCodesByCodeIdScansQueryKey;
/**
 * List QR Code Scans
 * Retrieves a paginated list of scans for a specific QR Code with optional filtering
 */
const getCodesByCodeIdScansOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getCodesByCodeIdScans)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getCodesByCodeIdScansQueryKey)(options)
    });
};
exports.getCodesByCodeIdScansOptions = getCodesByCodeIdScansOptions;
const createInfiniteParams = (queryKey, page) => {
    const params = {
        ...queryKey[0]
    };
    if (page.body) {
        params.body = {
            ...queryKey[0].body,
            ...page.body
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path,
            ...page.path
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query,
            ...page.query
        };
    }
    return params;
};
const getCodesByCodeIdScansInfiniteQueryKey = (options) => createQueryKey('getCodesByCodeIdScans', options, true);
exports.getCodesByCodeIdScansInfiniteQueryKey = getCodesByCodeIdScansInfiniteQueryKey;
/**
 * List QR Code Scans
 * Retrieves a paginated list of scans for a specific QR Code with optional filtering
 */
const getCodesByCodeIdScansInfiniteOptions = (options) => {
    return (0, react_query_1.infiniteQueryOptions)(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await (0, sdk_gen_1.getCodesByCodeIdScans)({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getCodesByCodeIdScansInfiniteQueryKey)(options)
    });
};
exports.getCodesByCodeIdScansInfiniteOptions = getCodesByCodeIdScansInfiniteOptions;
const getCodesByCodeIdRouterRulesQueryKey = (options) => createQueryKey('getCodesByCodeIdRouterRules', options);
exports.getCodesByCodeIdRouterRulesQueryKey = getCodesByCodeIdRouterRulesQueryKey;
/**
 * List Router Rule Assignments
 * Retrieves all router rule assignments for a specific QR code with pagination and filtering options. Returns rules sorted by priority (highest first) with enriched template data.
 */
const getCodesByCodeIdRouterRulesOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getCodesByCodeIdRouterRules)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getCodesByCodeIdRouterRulesQueryKey)(options)
    });
};
exports.getCodesByCodeIdRouterRulesOptions = getCodesByCodeIdRouterRulesOptions;
const getCodesByCodeIdRouterRulesInfiniteQueryKey = (options) => createQueryKey('getCodesByCodeIdRouterRules', options, true);
exports.getCodesByCodeIdRouterRulesInfiniteQueryKey = getCodesByCodeIdRouterRulesInfiniteQueryKey;
/**
 * List Router Rule Assignments
 * Retrieves all router rule assignments for a specific QR code with pagination and filtering options. Returns rules sorted by priority (highest first) with enriched template data.
 */
const getCodesByCodeIdRouterRulesInfiniteOptions = (options) => {
    return (0, react_query_1.infiniteQueryOptions)(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await (0, sdk_gen_1.getCodesByCodeIdRouterRules)({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getCodesByCodeIdRouterRulesInfiniteQueryKey)(options)
    });
};
exports.getCodesByCodeIdRouterRulesInfiniteOptions = getCodesByCodeIdRouterRulesInfiniteOptions;
const postCodesByCodeIdRouterRulesQueryKey = (options) => createQueryKey('postCodesByCodeIdRouterRules', options);
exports.postCodesByCodeIdRouterRulesQueryKey = postCodesByCodeIdRouterRulesQueryKey;
/**
 * Create Router Rule Assignment
 * Assigns a router rule to a QR code. You can reference an existing template by ID/name or create an inline custom rule. Rules with the same priority are evaluated in creation order. Scan limits and loop functionality are supported.
 */
const postCodesByCodeIdRouterRulesOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postCodesByCodeIdRouterRules)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postCodesByCodeIdRouterRulesQueryKey)(options)
    });
};
exports.postCodesByCodeIdRouterRulesOptions = postCodesByCodeIdRouterRulesOptions;
/**
 * Create Router Rule Assignment
 * Assigns a router rule to a QR code. You can reference an existing template by ID/name or create an inline custom rule. Rules with the same priority are evaluated in creation order. Scan limits and loop functionality are supported.
 */
const postCodesByCodeIdRouterRulesMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postCodesByCodeIdRouterRules)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postCodesByCodeIdRouterRulesMutation = postCodesByCodeIdRouterRulesMutation;
/**
 * Delete Router Rule Assignment
 * Deletes a router rule assignment. Rules that have been used (totalScans > 0) cannot be deleted to preserve analytics data. Consider disabling the rule instead.
 */
const deleteCodesByCodeIdRouterRulesByRouterRuleIdMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.deleteCodesByCodeIdRouterRulesByRouterRuleId)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.deleteCodesByCodeIdRouterRulesByRouterRuleIdMutation = deleteCodesByCodeIdRouterRulesByRouterRuleIdMutation;
const getCodesByCodeIdRouterRulesByRouterRuleIdQueryKey = (options) => createQueryKey('getCodesByCodeIdRouterRulesByRouterRuleId', options);
exports.getCodesByCodeIdRouterRulesByRouterRuleIdQueryKey = getCodesByCodeIdRouterRulesByRouterRuleIdQueryKey;
/**
 * Get Router Rule Assignment
 * Retrieves a specific router rule assignment for a QR code. Returns the rule with enriched template data, usage statistics, and audit information.
 */
const getCodesByCodeIdRouterRulesByRouterRuleIdOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getCodesByCodeIdRouterRulesByRouterRuleId)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getCodesByCodeIdRouterRulesByRouterRuleIdQueryKey)(options)
    });
};
exports.getCodesByCodeIdRouterRulesByRouterRuleIdOptions = getCodesByCodeIdRouterRulesByRouterRuleIdOptions;
/**
 * Update Router Rule Assignment
 * Updates a router rule assignment. You can change the rule source (template vs inline), priority, data configuration, and other settings. Validation is context-aware and will validate dynamicData against the existing or provided dataType. Priority conflicts are checked.
 */
const putCodesByCodeIdRouterRulesByRouterRuleIdMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.putCodesByCodeIdRouterRulesByRouterRuleId)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.putCodesByCodeIdRouterRulesByRouterRuleIdMutation = putCodesByCodeIdRouterRulesByRouterRuleIdMutation;
const getCodesDeletedQueryKey = (options) => createQueryKey('getCodesDeleted', options);
exports.getCodesDeletedQueryKey = getCodesDeletedQueryKey;
/**
 * List Soft Deleted QR Codes
 * Retrieves a paginated list of soft deleted QR Codes with optional filtering
 */
const getCodesDeletedOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getCodesDeleted)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getCodesDeletedQueryKey)(options)
    });
};
exports.getCodesDeletedOptions = getCodesDeletedOptions;
const getCodesDeletedInfiniteQueryKey = (options) => createQueryKey('getCodesDeleted', options, true);
exports.getCodesDeletedInfiniteQueryKey = getCodesDeletedInfiniteQueryKey;
/**
 * List Soft Deleted QR Codes
 * Retrieves a paginated list of soft deleted QR Codes with optional filtering
 */
const getCodesDeletedInfiniteOptions = (options) => {
    return (0, react_query_1.infiniteQueryOptions)(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await (0, sdk_gen_1.getCodesDeleted)({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getCodesDeletedInfiniteQueryKey)(options)
    });
};
exports.getCodesDeletedInfiniteOptions = getCodesDeletedInfiniteOptions;
const getCodesLinksQueryKey = (options) => createQueryKey('getCodesLinks', options);
exports.getCodesLinksQueryKey = getCodesLinksQueryKey;
/**
 * List QR Code Links
 * Retrieves a paginated list of all QR Code links with optional filtering
 */
const getCodesLinksOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getCodesLinks)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getCodesLinksQueryKey)(options)
    });
};
exports.getCodesLinksOptions = getCodesLinksOptions;
const getCodesLinksInfiniteQueryKey = (options) => createQueryKey('getCodesLinks', options, true);
exports.getCodesLinksInfiniteQueryKey = getCodesLinksInfiniteQueryKey;
/**
 * List QR Code Links
 * Retrieves a paginated list of all QR Code links with optional filtering
 */
const getCodesLinksInfiniteOptions = (options) => {
    return (0, react_query_1.infiniteQueryOptions)(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await (0, sdk_gen_1.getCodesLinks)({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getCodesLinksInfiniteQueryKey)(options)
    });
};
exports.getCodesLinksInfiniteOptions = getCodesLinksInfiniteOptions;
/**
 * Soft Delete QR Code
 * Marks a QR Code as deleted without permanently removing it from the system. Usage limits are not affected and the code can potentially be restored.
 */
const deleteCodesByCodeIdMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.deleteCodesByCodeId)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.deleteCodesByCodeIdMutation = deleteCodesByCodeIdMutation;
const getCodesByCodeIdQueryKey = (options) => createQueryKey('getCodesByCodeId', options);
exports.getCodesByCodeIdQueryKey = getCodesByCodeIdQueryKey;
/**
 * Get QR Code
 * Retrieves a QR Code by its unique identifier
 */
const getCodesByCodeIdOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getCodesByCodeId)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getCodesByCodeIdQueryKey)(options)
    });
};
exports.getCodesByCodeIdOptions = getCodesByCodeIdOptions;
/**
 * Update QR Code
 * Updates an existing QR Code with new data and options. Supports changing dataType for dynamic codes (e.g., from URL to WiFi configuration). When changing dataType, ensure metadata structure matches the new dataType requirements. This operation creates a new version of the QR code.
 */
const putCodesByCodeIdMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.putCodesByCodeId)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.putCodesByCodeIdMutation = putCodesByCodeIdMutation;
/**
 * Bulk Soft Delete QR Codes
 * Soft deletes multiple QR codes by their IDs. The codes are marked as deleted but not permanently removed from the system.
 */
const deleteCodesMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.deleteCodes)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.deleteCodesMutation = deleteCodesMutation;
const getCodesQueryKey = (options) => createQueryKey('getCodes', options);
exports.getCodesQueryKey = getCodesQueryKey;
/**
 * List QR Codes
 * Retrieves a paginated list of QR Codes with optional filtering
 */
const getCodesOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getCodes)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getCodesQueryKey)(options)
    });
};
exports.getCodesOptions = getCodesOptions;
const getCodesInfiniteQueryKey = (options) => createQueryKey('getCodes', options, true);
exports.getCodesInfiniteQueryKey = getCodesInfiniteQueryKey;
/**
 * List QR Codes
 * Retrieves a paginated list of QR Codes with optional filtering
 */
const getCodesInfiniteOptions = (options) => {
    return (0, react_query_1.infiniteQueryOptions)(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await (0, sdk_gen_1.getCodes)({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getCodesInfiniteQueryKey)(options)
    });
};
exports.getCodesInfiniteOptions = getCodesInfiniteOptions;
const postCodesQueryKey = (options) => createQueryKey('postCodes', options);
exports.postCodesQueryKey = postCodesQueryKey;
/**
 * Create QR Code
 * Creates a new QR Code with the specified data and options. Supports different dataTypes for dynamic codes including WiFi configuration, contact cards (vCard), plain text, email composition, calendar events, file downloads, and custom JSON data. Each dataType has specific metadata requirements that determine how the QR code is processed when scanned.
 */
const postCodesOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postCodes)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postCodesQueryKey)(options)
    });
};
exports.postCodesOptions = postCodesOptions;
/**
 * Create QR Code
 * Creates a new QR Code with the specified data and options. Supports different dataTypes for dynamic codes including WiFi configuration, contact cards (vCard), plain text, email composition, calendar events, file downloads, and custom JSON data. Each dataType has specific metadata requirements that determine how the QR code is processed when scanned.
 */
const postCodesMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postCodes)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postCodesMutation = postCodesMutation;
/**
 * Partially update QR Code Options
 * Partially updates an existing QR Code's options using a deep merge. This will create a new version of the QR Code. Supports updating dataType for dynamic codes, which changes how the QR code content is processed when scanned (e.g., returning WiFi configuration instead of URL redirect).
 */
const putCodesByCodeIdOptionsMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.putCodesByCodeIdOptions)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.putCodesByCodeIdOptionsMutation = putCodesByCodeIdOptionsMutation;
/**
 * Bulk Permanent Delete QR Codes
 * Permanently deletes multiple QR codes by their IDs. This operation is irreversible and will remove all associated data including versions, files, and scans.
 */
const deleteCodesPermanentMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.deleteCodesPermanent)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.deleteCodesPermanentMutation = deleteCodesPermanentMutation;
/**
 * Delete QR Code
 * Deletes a QR Code by its unique identifier
 */
const deleteCodesByCodeIdPermanentMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.deleteCodesByCodeIdPermanent)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.deleteCodesByCodeIdPermanentMutation = deleteCodesByCodeIdPermanentMutation;
const postCodesByCodeIdRestoreQueryKey = (options) => createQueryKey('postCodesByCodeIdRestore', options);
exports.postCodesByCodeIdRestoreQueryKey = postCodesByCodeIdRestoreQueryKey;
/**
 * Restore QR Code
 * Restores a soft-deleted QR Code by setting its deleted status to false. The code becomes active again and accessible through regular endpoints.
 */
const postCodesByCodeIdRestoreOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postCodesByCodeIdRestore)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postCodesByCodeIdRestoreQueryKey)(options)
    });
};
exports.postCodesByCodeIdRestoreOptions = postCodesByCodeIdRestoreOptions;
/**
 * Restore QR Code
 * Restores a soft-deleted QR Code by setting its deleted status to false. The code becomes active again and accessible through regular endpoints.
 */
const postCodesByCodeIdRestoreMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postCodesByCodeIdRestore)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postCodesByCodeIdRestoreMutation = postCodesByCodeIdRestoreMutation;
const postCodesBulkGetQueryKey = (options) => createQueryKey('postCodesBulkGet', options);
exports.postCodesBulkGetQueryKey = postCodesBulkGetQueryKey;
/**
 * Bulk Get QR Codes by ID List
 * Retrieves multiple QR codes by their IDs in a single request with access control and detailed error reporting.
 */
const postCodesBulkGetOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postCodesBulkGet)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postCodesBulkGetQueryKey)(options)
    });
};
exports.postCodesBulkGetOptions = postCodesBulkGetOptions;
/**
 * Bulk Get QR Codes by ID List
 * Retrieves multiple QR codes by their IDs in a single request with access control and detailed error reporting.
 */
const postCodesBulkGetMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postCodesBulkGet)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postCodesBulkGetMutation = postCodesBulkGetMutation;
const postCodesGenerateByTypeQueryKey = (options) => createQueryKey('postCodesGenerateByType', options);
exports.postCodesGenerateByTypeQueryKey = postCodesGenerateByTypeQueryKey;
/**
 * Generate QR Code File Content
 * Generates a file content for a QR Code
 */
const postCodesGenerateByTypeOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postCodesGenerateByType)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postCodesGenerateByTypeQueryKey)(options)
    });
};
exports.postCodesGenerateByTypeOptions = postCodesGenerateByTypeOptions;
/**
 * Generate QR Code File Content
 * Generates a file content for a QR Code
 */
const postCodesGenerateByTypeMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postCodesGenerateByType)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postCodesGenerateByTypeMutation = postCodesGenerateByTypeMutation;
const postCodesValidateQueryKey = (options) => createQueryKey('postCodesValidate', options);
exports.postCodesValidateQueryKey = postCodesValidateQueryKey;
/**
 * Validate QR Code Options
 * Validates QR Code styling options without generating or saving the QR Code
 */
const postCodesValidateOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postCodesValidate)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postCodesValidateQueryKey)(options)
    });
};
exports.postCodesValidateOptions = postCodesValidateOptions;
/**
 * Validate QR Code Options
 * Validates QR Code styling options without generating or saving the QR Code
 */
const postCodesValidateMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postCodesValidate)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postCodesValidateMutation = postCodesValidateMutation;
const postCodesByCodeIdValidateQueryKey = (options) => createQueryKey('postCodesByCodeIdValidate', options);
exports.postCodesByCodeIdValidateQueryKey = postCodesByCodeIdValidateQueryKey;
/**
 * Validate Existing QR Code
 * Validates an existing QR Code and updates its validation status in the database
 */
const postCodesByCodeIdValidateOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postCodesByCodeIdValidate)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postCodesByCodeIdValidateQueryKey)(options)
    });
};
exports.postCodesByCodeIdValidateOptions = postCodesByCodeIdValidateOptions;
/**
 * Validate Existing QR Code
 * Validates an existing QR Code and updates its validation status in the database
 */
const postCodesByCodeIdValidateMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postCodesByCodeIdValidate)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postCodesByCodeIdValidateMutation = postCodesByCodeIdValidateMutation;
const postCodesLinksRefreshQueryKey = (options) => createQueryKey('postCodesLinksRefresh', options);
exports.postCodesLinksRefreshQueryKey = postCodesLinksRefreshQueryKey;
/**
 * Bulk Refresh QR Code Links
 * Refreshes QR code links/files for all code versions matching the specified design element filters
 */
const postCodesLinksRefreshOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postCodesLinksRefresh)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postCodesLinksRefreshQueryKey)(options)
    });
};
exports.postCodesLinksRefreshOptions = postCodesLinksRefreshOptions;
/**
 * Bulk Refresh QR Code Links
 * Refreshes QR code links/files for all code versions matching the specified design element filters
 */
const postCodesLinksRefreshMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postCodesLinksRefresh)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postCodesLinksRefreshMutation = postCodesLinksRefreshMutation;
const getCodesByCodeIdVersionByVersionQueryKey = (options) => createQueryKey('getCodesByCodeIdVersionByVersion', options);
exports.getCodesByCodeIdVersionByVersionQueryKey = getCodesByCodeIdVersionByVersionQueryKey;
/**
 * Get QR Code version
 * Retrieves a specific version of a QR Code by ID and version number
 */
const getCodesByCodeIdVersionByVersionOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getCodesByCodeIdVersionByVersion)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getCodesByCodeIdVersionByVersionQueryKey)(options)
    });
};
exports.getCodesByCodeIdVersionByVersionOptions = getCodesByCodeIdVersionByVersionOptions;
/**
 * Delete All QR Code Versions
 * Deletes all versions of a QR Code except the current one
 */
const deleteCodesByCodeIdVersionsMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.deleteCodesByCodeIdVersions)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.deleteCodesByCodeIdVersionsMutation = deleteCodesByCodeIdVersionsMutation;
const getCodesByCodeIdVersionsQueryKey = (options) => createQueryKey('getCodesByCodeIdVersions', options);
exports.getCodesByCodeIdVersionsQueryKey = getCodesByCodeIdVersionsQueryKey;
/**
 * List QR Code versions
 * Retrieves all versions of a QR Code by its unique identifier
 */
const getCodesByCodeIdVersionsOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getCodesByCodeIdVersions)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getCodesByCodeIdVersionsQueryKey)(options)
    });
};
exports.getCodesByCodeIdVersionsOptions = getCodesByCodeIdVersionsOptions;
const postCodesByCodeIdVersionByVersionRestoreQueryKey = (options) => createQueryKey('postCodesByCodeIdVersionByVersionRestore', options);
exports.postCodesByCodeIdVersionByVersionRestoreQueryKey = postCodesByCodeIdVersionByVersionRestoreQueryKey;
/**
 * Restore QR Code Version
 * Restores a specific version of a QR Code as the current version
 */
const postCodesByCodeIdVersionByVersionRestoreOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postCodesByCodeIdVersionByVersionRestore)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postCodesByCodeIdVersionByVersionRestoreQueryKey)(options)
    });
};
exports.postCodesByCodeIdVersionByVersionRestoreOptions = postCodesByCodeIdVersionByVersionRestoreOptions;
/**
 * Restore QR Code Version
 * Restores a specific version of a QR Code as the current version
 */
const postCodesByCodeIdVersionByVersionRestoreMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postCodesByCodeIdVersionByVersionRestore)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postCodesByCodeIdVersionByVersionRestoreMutation = postCodesByCodeIdVersionByVersionRestoreMutation;
const getCodesByCodeIdVersionByVersionByTypeQueryKey = (options) => createQueryKey('getCodesByCodeIdVersionByVersionByType', options);
exports.getCodesByCodeIdVersionByVersionByTypeQueryKey = getCodesByCodeIdVersionByVersionByTypeQueryKey;
/**
 * Get QR Code Version File Content
 * Retrieves the file content of a specific QR Code version
 */
const getCodesByCodeIdVersionByVersionByTypeOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getCodesByCodeIdVersionByVersionByType)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getCodesByCodeIdVersionByVersionByTypeQueryKey)(options)
    });
};
exports.getCodesByCodeIdVersionByVersionByTypeOptions = getCodesByCodeIdVersionByVersionByTypeOptions;
const getCodesByCodeIdVersionByVersionByTypeLinkQueryKey = (options) => createQueryKey('getCodesByCodeIdVersionByVersionByTypeLink', options);
exports.getCodesByCodeIdVersionByVersionByTypeLinkQueryKey = getCodesByCodeIdVersionByVersionByTypeLinkQueryKey;
/**
 * Get QR Code Version Link
 * Retrieves a link to the file representation of a specific QR Code version
 */
const getCodesByCodeIdVersionByVersionByTypeLinkOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getCodesByCodeIdVersionByVersionByTypeLink)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getCodesByCodeIdVersionByVersionByTypeLinkQueryKey)(options)
    });
};
exports.getCodesByCodeIdVersionByVersionByTypeLinkOptions = getCodesByCodeIdVersionByVersionByTypeLinkOptions;
/**
 * Delete QR Code version links
 * Deletes all QR Code version links for a specific version of a QR Code
 */
const deleteCodesByCodeIdVersionsByVersionLinksMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.deleteCodesByCodeIdVersionsByVersionLinks)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.deleteCodesByCodeIdVersionsByVersionLinksMutation = deleteCodesByCodeIdVersionsByVersionLinksMutation;
/**
 * Delete QR Code version link by Type
 * Deletes a specific QR Code version link for a specific version of a QR Code
 */
const deleteCodesByCodeIdVersionsByVersionLinksByTypeMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.deleteCodesByCodeIdVersionsByVersionLinksByType)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.deleteCodesByCodeIdVersionsByVersionLinksByTypeMutation = deleteCodesByCodeIdVersionsByVersionLinksByTypeMutation;
/**
 * Delete All QR Code Versions Links
 * Deletes all file links for all versions of a QR Code
 */
const deleteCodesByCodeIdVersionsLinksMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.deleteCodesByCodeIdVersionsLinks)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.deleteCodesByCodeIdVersionsLinksMutation = deleteCodesByCodeIdVersionsLinksMutation;
/**
 * Delete All QR Code Versions Links by Type
 * Deletes a specific file type link for all versions of a QR Code
 */
const deleteCodesByCodeIdVersionsLinksByTypeMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.deleteCodesByCodeIdVersionsLinksByType)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.deleteCodesByCodeIdVersionsLinksByTypeMutation = deleteCodesByCodeIdVersionsLinksByTypeMutation;
const getCodesByCodeIdByTypeQueryKey = (options) => createQueryKey('getCodesByCodeIdByType', options);
exports.getCodesByCodeIdByTypeQueryKey = getCodesByCodeIdByTypeQueryKey;
/**
 * Get QR Code File Content (SVG, PNG, PDF)
 * Retrieves the SVG, PNG, or PDF representation of a QR Code
 */
const getCodesByCodeIdByTypeOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getCodesByCodeIdByType)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getCodesByCodeIdByTypeQueryKey)(options)
    });
};
exports.getCodesByCodeIdByTypeOptions = getCodesByCodeIdByTypeOptions;
const getCodesByCodeIdByTypeLinkQueryKey = (options) => createQueryKey('getCodesByCodeIdByTypeLink', options);
exports.getCodesByCodeIdByTypeLinkQueryKey = getCodesByCodeIdByTypeLinkQueryKey;
/**
 * Get QR Code link
 * Retrieves a link to the SVG, PNG, or PDF representation of a QR Code
 */
const getCodesByCodeIdByTypeLinkOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getCodesByCodeIdByTypeLink)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getCodesByCodeIdByTypeLinkQueryKey)(options)
    });
};
exports.getCodesByCodeIdByTypeLinkOptions = getCodesByCodeIdByTypeLinkOptions;
/**
 * Delete QR Code links
 * Deletes all links for the current version of a QR Code
 */
const deleteCodesByCodeIdLinksMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.deleteCodesByCodeIdLinks)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.deleteCodesByCodeIdLinksMutation = deleteCodesByCodeIdLinksMutation;
/**
 * Delete QR Code link by Type
 * Deletes a specific file type link for the current version of a QR Code
 */
const deleteCodesByCodeIdLinksByTypeMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.deleteCodesByCodeIdLinksByType)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.deleteCodesByCodeIdLinksByTypeMutation = deleteCodesByCodeIdLinksByTypeMutation;
const getTemplatesQueryKey = (options) => createQueryKey('getTemplates', options);
exports.getTemplatesQueryKey = getTemplatesQueryKey;
/**
 * List all templates
 * Retrieves all templates available to the user, grouped by organization and workspace.
 */
const getTemplatesOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getTemplates)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getTemplatesQueryKey)(options)
    });
};
exports.getTemplatesOptions = getTemplatesOptions;
const postTemplatesQueryKey = (options) => createQueryKey('postTemplates', options);
exports.postTemplatesQueryKey = postTemplatesQueryKey;
/**
 * Create a new template
 * Creates a new QR code template for an organization or workspace.
 */
const postTemplatesOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postTemplates)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postTemplatesQueryKey)(options)
    });
};
exports.postTemplatesOptions = postTemplatesOptions;
/**
 * Create a new template
 * Creates a new QR code template for an organization or workspace.
 */
const postTemplatesMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postTemplates)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postTemplatesMutation = postTemplatesMutation;
const getTemplatesBaseQueryKey = (options) => createQueryKey('getTemplatesBase', options);
exports.getTemplatesBaseQueryKey = getTemplatesBaseQueryKey;
/**
 * List base templates
 * Retrieves all base templates from the QRCodeJs library with optional name filtering.
 */
const getTemplatesBaseOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getTemplatesBase)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getTemplatesBaseQueryKey)(options)
    });
};
exports.getTemplatesBaseOptions = getTemplatesBaseOptions;
/**
 * Delete template by ID
 * Deletes a template by its unique identifier. Fails if the template is used by codes.
 */
const deleteTemplatesByTemplateIdMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.deleteTemplatesByTemplateId)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.deleteTemplatesByTemplateIdMutation = deleteTemplatesByTemplateIdMutation;
const getTemplatesByTemplateIdQueryKey = (options) => createQueryKey('getTemplatesByTemplateId', options);
exports.getTemplatesByTemplateIdQueryKey = getTemplatesByTemplateIdQueryKey;
/**
 * Get template by ID
 * Retrieves a template by its unique identifier.
 */
const getTemplatesByTemplateIdOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getTemplatesByTemplateId)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getTemplatesByTemplateIdQueryKey)(options)
    });
};
exports.getTemplatesByTemplateIdOptions = getTemplatesByTemplateIdOptions;
/**
 * Update template by ID
 * Updates a template by its unique identifier.
 */
const putTemplatesByTemplateIdMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.putTemplatesByTemplateId)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.putTemplatesByTemplateIdMutation = putTemplatesByTemplateIdMutation;
/**
 * Partially update template options by ID
 * Partially updates a template options by its unique identifier using a deep merge. Use null to delete a field.
 */
const putTemplatesByTemplateIdOptionsMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.putTemplatesByTemplateIdOptions)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.putTemplatesByTemplateIdOptionsMutation = putTemplatesByTemplateIdOptionsMutation;
const getTemplatesWorkspaceByWorkspaceIdQueryKey = (options) => createQueryKey('getTemplatesWorkspaceByWorkspaceId', options);
exports.getTemplatesWorkspaceByWorkspaceIdQueryKey = getTemplatesWorkspaceByWorkspaceIdQueryKey;
/**
 * List templates for a workspace
 * Retrieves all templates for a specific workspace.
 */
const getTemplatesWorkspaceByWorkspaceIdOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getTemplatesWorkspaceByWorkspaceId)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getTemplatesWorkspaceByWorkspaceIdQueryKey)(options)
    });
};
exports.getTemplatesWorkspaceByWorkspaceIdOptions = getTemplatesWorkspaceByWorkspaceIdOptions;
const getStylesQueryKey = (options) => createQueryKey('getStyles', options);
exports.getStylesQueryKey = getStylesQueryKey;
/**
 * List all styles
 * Retrieves all styles available to the user.
 */
const getStylesOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getStyles)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getStylesQueryKey)(options)
    });
};
exports.getStylesOptions = getStylesOptions;
const postStylesQueryKey = (options) => createQueryKey('postStyles', options);
exports.postStylesQueryKey = postStylesQueryKey;
/**
 * Create a new style
 * Creates a new style for an organization or workspace.
 */
const postStylesOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postStyles)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postStylesQueryKey)(options)
    });
};
exports.postStylesOptions = postStylesOptions;
/**
 * Create a new style
 * Creates a new style for an organization or workspace.
 */
const postStylesMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postStyles)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postStylesMutation = postStylesMutation;
const getStylesBaseQueryKey = (options) => createQueryKey('getStylesBase', options);
exports.getStylesBaseQueryKey = getStylesBaseQueryKey;
/**
 * List base styles
 * Retrieves all base styles from the QRCodeJs library with optional name filtering.
 */
const getStylesBaseOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getStylesBase)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getStylesBaseQueryKey)(options)
    });
};
exports.getStylesBaseOptions = getStylesBaseOptions;
/**
 * Delete style by ID
 * Deletes a style by its unique identifier. Fails if the style is used by codes.
 */
const deleteStylesByStyleIdMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.deleteStylesByStyleId)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.deleteStylesByStyleIdMutation = deleteStylesByStyleIdMutation;
const getStylesByStyleIdQueryKey = (options) => createQueryKey('getStylesByStyleId', options);
exports.getStylesByStyleIdQueryKey = getStylesByStyleIdQueryKey;
/**
 * Get style by ID
 * Retrieves a style by its unique identifier.
 */
const getStylesByStyleIdOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getStylesByStyleId)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getStylesByStyleIdQueryKey)(options)
    });
};
exports.getStylesByStyleIdOptions = getStylesByStyleIdOptions;
/**
 * Update style by ID
 * Updates a style by its unique identifier.
 */
const putStylesByStyleIdMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.putStylesByStyleId)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.putStylesByStyleIdMutation = putStylesByStyleIdMutation;
/**
 * Partially update style options by ID
 * Partially updates a style options by its unique identifier using a deep merge. Use null to delete a field.
 */
const putStylesByStyleIdOptionsMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.putStylesByStyleIdOptions)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.putStylesByStyleIdOptionsMutation = putStylesByStyleIdOptionsMutation;
const getStylesWorkspaceByWorkspaceIdQueryKey = (options) => createQueryKey('getStylesWorkspaceByWorkspaceId', options);
exports.getStylesWorkspaceByWorkspaceIdQueryKey = getStylesWorkspaceByWorkspaceIdQueryKey;
/**
 * List styles for a workspace
 * Retrieves all styles for a specific workspace.
 */
const getStylesWorkspaceByWorkspaceIdOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getStylesWorkspaceByWorkspaceId)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getStylesWorkspaceByWorkspaceIdQueryKey)(options)
    });
};
exports.getStylesWorkspaceByWorkspaceIdOptions = getStylesWorkspaceByWorkspaceIdOptions;
const getTextsQueryKey = (options) => createQueryKey('getTexts', options);
exports.getTextsQueryKey = getTextsQueryKey;
/**
 * List all texts
 * Retrieves all texts available to the user.
 */
const getTextsOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getTexts)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getTextsQueryKey)(options)
    });
};
exports.getTextsOptions = getTextsOptions;
const postTextsQueryKey = (options) => createQueryKey('postTexts', options);
exports.postTextsQueryKey = postTextsQueryKey;
/**
 * Create a new text
 * Creates a new text for an organization or workspace.
 */
const postTextsOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postTexts)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postTextsQueryKey)(options)
    });
};
exports.postTextsOptions = postTextsOptions;
/**
 * Create a new text
 * Creates a new text for an organization or workspace.
 */
const postTextsMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postTexts)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postTextsMutation = postTextsMutation;
const getTextsBaseQueryKey = (options) => createQueryKey('getTextsBase', options);
exports.getTextsBaseQueryKey = getTextsBaseQueryKey;
/**
 * List base texts
 * Retrieves all base text templates from the QRCodeJs library with optional name filtering.
 */
const getTextsBaseOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getTextsBase)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getTextsBaseQueryKey)(options)
    });
};
exports.getTextsBaseOptions = getTextsBaseOptions;
/**
 * Delete text by ID
 * Deletes a text by its unique identifier. Fails if the text is used by codes.
 */
const deleteTextsByTextIdMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.deleteTextsByTextId)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.deleteTextsByTextIdMutation = deleteTextsByTextIdMutation;
const getTextsByTextIdQueryKey = (options) => createQueryKey('getTextsByTextId', options);
exports.getTextsByTextIdQueryKey = getTextsByTextIdQueryKey;
/**
 * Get text by ID
 * Retrieves a text by its unique identifier.
 */
const getTextsByTextIdOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getTextsByTextId)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getTextsByTextIdQueryKey)(options)
    });
};
exports.getTextsByTextIdOptions = getTextsByTextIdOptions;
/**
 * Update text by ID
 * Updates a text by its unique identifier.
 */
const putTextsByTextIdMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.putTextsByTextId)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.putTextsByTextIdMutation = putTextsByTextIdMutation;
/**
 * Partially update text options by ID
 * Partially updates a text options by its unique identifier using a deep merge. Use null to delete a field.
 */
const putTextsByTextIdOptionsMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.putTextsByTextIdOptions)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.putTextsByTextIdOptionsMutation = putTextsByTextIdOptionsMutation;
const getTextsWorkspaceByWorkspaceIdQueryKey = (options) => createQueryKey('getTextsWorkspaceByWorkspaceId', options);
exports.getTextsWorkspaceByWorkspaceIdQueryKey = getTextsWorkspaceByWorkspaceIdQueryKey;
/**
 * List texts for a workspace
 * Retrieves all texts for a specific workspace.
 */
const getTextsWorkspaceByWorkspaceIdOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getTextsWorkspaceByWorkspaceId)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getTextsWorkspaceByWorkspaceIdQueryKey)(options)
    });
};
exports.getTextsWorkspaceByWorkspaceIdOptions = getTextsWorkspaceByWorkspaceIdOptions;
const getBordersQueryKey = (options) => createQueryKey('getBorders', options);
exports.getBordersQueryKey = getBordersQueryKey;
/**
 * List all borders
 * Retrieves all borders available to the user.
 */
const getBordersOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getBorders)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getBordersQueryKey)(options)
    });
};
exports.getBordersOptions = getBordersOptions;
const postBordersQueryKey = (options) => createQueryKey('postBorders', options);
exports.postBordersQueryKey = postBordersQueryKey;
/**
 * Create a new border
 * Creates a new border for an organization or workspace.
 */
const postBordersOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postBorders)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postBordersQueryKey)(options)
    });
};
exports.postBordersOptions = postBordersOptions;
/**
 * Create a new border
 * Creates a new border for an organization or workspace.
 */
const postBordersMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postBorders)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postBordersMutation = postBordersMutation;
const getBordersBaseQueryKey = (options) => createQueryKey('getBordersBase', options);
exports.getBordersBaseQueryKey = getBordersBaseQueryKey;
/**
 * List base borders
 * Retrieves all base border templates from the QRCodeJs library with optional name filtering.
 */
const getBordersBaseOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getBordersBase)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getBordersBaseQueryKey)(options)
    });
};
exports.getBordersBaseOptions = getBordersBaseOptions;
/**
 * Delete border by ID
 * Deletes a border by its unique identifier.
 */
const deleteBordersByBorderIdMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.deleteBordersByBorderId)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.deleteBordersByBorderIdMutation = deleteBordersByBorderIdMutation;
const getBordersByBorderIdQueryKey = (options) => createQueryKey('getBordersByBorderId', options);
exports.getBordersByBorderIdQueryKey = getBordersByBorderIdQueryKey;
/**
 * Get border by ID
 * Retrieves a border by its unique identifier.
 */
const getBordersByBorderIdOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getBordersByBorderId)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getBordersByBorderIdQueryKey)(options)
    });
};
exports.getBordersByBorderIdOptions = getBordersByBorderIdOptions;
/**
 * Update border by ID
 * Updates a border by its unique identifier.
 */
const putBordersByBorderIdMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.putBordersByBorderId)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.putBordersByBorderIdMutation = putBordersByBorderIdMutation;
/**
 * Partially update border options by ID
 * Partially updates border options by its unique identifier using a deep merge. Use null to delete a field.
 */
const putBordersByBorderIdOptionsMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.putBordersByBorderIdOptions)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.putBordersByBorderIdOptionsMutation = putBordersByBorderIdOptionsMutation;
const getBordersWorkspaceByWorkspaceIdQueryKey = (options) => createQueryKey('getBordersWorkspaceByWorkspaceId', options);
exports.getBordersWorkspaceByWorkspaceIdQueryKey = getBordersWorkspaceByWorkspaceIdQueryKey;
/**
 * List borders for a workspace
 * Retrieves all borders for a specific workspace.
 */
const getBordersWorkspaceByWorkspaceIdOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getBordersWorkspaceByWorkspaceId)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getBordersWorkspaceByWorkspaceIdQueryKey)(options)
    });
};
exports.getBordersWorkspaceByWorkspaceIdOptions = getBordersWorkspaceByWorkspaceIdOptions;
const getCountryCodesQueryKey = (options) => createQueryKey('getCountryCodes', options);
exports.getCountryCodesQueryKey = getCountryCodesQueryKey;
/**
 * List All Country Codes
 * Retrieves a list of all available country codes with their names and full names
 */
const getCountryCodesOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getCountryCodes)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getCountryCodesQueryKey)(options)
    });
};
exports.getCountryCodesOptions = getCountryCodesOptions;
const getRouterRuleTemplatesQueryKey = (options) => createQueryKey('getRouterRuleTemplates', options);
exports.getRouterRuleTemplatesQueryKey = getRouterRuleTemplatesQueryKey;
/**
 * List Router Rule Templates
 * Retrieves available router rule templates based on user access. Returns global templates (if includeGlobal=true), organization-level templates, and workspace-specific templates the user has access to.
 */
const getRouterRuleTemplatesOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getRouterRuleTemplates)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getRouterRuleTemplatesQueryKey)(options)
    });
};
exports.getRouterRuleTemplatesOptions = getRouterRuleTemplatesOptions;
const getRouterRuleTemplatesInfiniteQueryKey = (options) => createQueryKey('getRouterRuleTemplates', options, true);
exports.getRouterRuleTemplatesInfiniteQueryKey = getRouterRuleTemplatesInfiniteQueryKey;
/**
 * List Router Rule Templates
 * Retrieves available router rule templates based on user access. Returns global templates (if includeGlobal=true), organization-level templates, and workspace-specific templates the user has access to.
 */
const getRouterRuleTemplatesInfiniteOptions = (options) => {
    return (0, react_query_1.infiniteQueryOptions)(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await (0, sdk_gen_1.getRouterRuleTemplates)({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getRouterRuleTemplatesInfiniteQueryKey)(options)
    });
};
exports.getRouterRuleTemplatesInfiniteOptions = getRouterRuleTemplatesInfiniteOptions;
const postRouterRuleTemplatesQueryKey = (options) => createQueryKey('postRouterRuleTemplates', options);
exports.postRouterRuleTemplatesQueryKey = postRouterRuleTemplatesQueryKey;
/**
 * Create Router Rule Template
 * Creates a new router rule template. The template can be organization-level (no workspaceId) or workspace-specific. Template names must be unique within the organization scope.
 */
const postRouterRuleTemplatesOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postRouterRuleTemplates)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postRouterRuleTemplatesQueryKey)(options)
    });
};
exports.postRouterRuleTemplatesOptions = postRouterRuleTemplatesOptions;
/**
 * Create Router Rule Template
 * Creates a new router rule template. The template can be organization-level (no workspaceId) or workspace-specific. Template names must be unique within the organization scope.
 */
const postRouterRuleTemplatesMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postRouterRuleTemplates)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postRouterRuleTemplatesMutation = postRouterRuleTemplatesMutation;
/**
 * Delete Router Rule Template
 * Deletes a router rule template. Templates that are currently being used by router rules cannot be deleted. Only organization templates can be deleted (not global templates).
 */
const deleteRouterRuleTemplatesByRouterRuleTemplateIdMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.deleteRouterRuleTemplatesByRouterRuleTemplateId)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.deleteRouterRuleTemplatesByRouterRuleTemplateIdMutation = deleteRouterRuleTemplatesByRouterRuleTemplateIdMutation;
const getRouterRuleTemplatesByRouterRuleTemplateIdQueryKey = (options) => createQueryKey('getRouterRuleTemplatesByRouterRuleTemplateId', options);
exports.getRouterRuleTemplatesByRouterRuleTemplateIdQueryKey = getRouterRuleTemplatesByRouterRuleTemplateIdQueryKey;
/**
 * Get Router Rule Template
 * Retrieves a specific router rule template by ID. Returns global templates and organization templates the user has access to.
 */
const getRouterRuleTemplatesByRouterRuleTemplateIdOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getRouterRuleTemplatesByRouterRuleTemplateId)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getRouterRuleTemplatesByRouterRuleTemplateIdQueryKey)(options)
    });
};
exports.getRouterRuleTemplatesByRouterRuleTemplateIdOptions = getRouterRuleTemplatesByRouterRuleTemplateIdOptions;
/**
 * Update Router Rule Template
 * Updates a router rule template. Only organization templates can be updated (not global templates). Users can only update templates within their organization.
 */
const putRouterRuleTemplatesByRouterRuleTemplateIdMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.putRouterRuleTemplatesByRouterRuleTemplateId)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.putRouterRuleTemplatesByRouterRuleTemplateIdMutation = putRouterRuleTemplatesByRouterRuleTemplateIdMutation;
const getRouterRulesQueryKey = (options) => createQueryKey('getRouterRules', options);
exports.getRouterRulesQueryKey = getRouterRulesQueryKey;
/**
 * List Organization Router Rules
 * Retrieves all router rules across the organization. Users with organization-level access see all rules, while workspace-limited users see only rules from their permitted workspaces.
 */
const getRouterRulesOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getRouterRules)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getRouterRulesQueryKey)(options)
    });
};
exports.getRouterRulesOptions = getRouterRulesOptions;
const getRouterRulesInfiniteQueryKey = (options) => createQueryKey('getRouterRules', options, true);
exports.getRouterRulesInfiniteQueryKey = getRouterRulesInfiniteQueryKey;
/**
 * List Organization Router Rules
 * Retrieves all router rules across the organization. Users with organization-level access see all rules, while workspace-limited users see only rules from their permitted workspaces.
 */
const getRouterRulesInfiniteOptions = (options) => {
    return (0, react_query_1.infiniteQueryOptions)(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await (0, sdk_gen_1.getRouterRules)({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getRouterRulesInfiniteQueryKey)(options)
    });
};
exports.getRouterRulesInfiniteOptions = getRouterRulesInfiniteOptions;
const getWorkspacesByWorkspaceIdRouterRulesQueryKey = (options) => createQueryKey('getWorkspacesByWorkspaceIdRouterRules', options);
exports.getWorkspacesByWorkspaceIdRouterRulesQueryKey = getWorkspacesByWorkspaceIdRouterRulesQueryKey;
/**
 * List Workspace Router Rule Assignments
 * Retrieves all router rule assignments within a specific workspace with pagination and filtering options. Returns rules sorted by priority (highest first) with enriched template data and QR code context.
 */
const getWorkspacesByWorkspaceIdRouterRulesOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.getWorkspacesByWorkspaceIdRouterRules)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getWorkspacesByWorkspaceIdRouterRulesQueryKey)(options)
    });
};
exports.getWorkspacesByWorkspaceIdRouterRulesOptions = getWorkspacesByWorkspaceIdRouterRulesOptions;
const getWorkspacesByWorkspaceIdRouterRulesInfiniteQueryKey = (options) => createQueryKey('getWorkspacesByWorkspaceIdRouterRules', options, true);
exports.getWorkspacesByWorkspaceIdRouterRulesInfiniteQueryKey = getWorkspacesByWorkspaceIdRouterRulesInfiniteQueryKey;
/**
 * List Workspace Router Rule Assignments
 * Retrieves all router rule assignments within a specific workspace with pagination and filtering options. Returns rules sorted by priority (highest first) with enriched template data and QR code context.
 */
const getWorkspacesByWorkspaceIdRouterRulesInfiniteOptions = (options) => {
    return (0, react_query_1.infiniteQueryOptions)(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await (0, sdk_gen_1.getWorkspacesByWorkspaceIdRouterRules)({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.getWorkspacesByWorkspaceIdRouterRulesInfiniteQueryKey)(options)
    });
};
exports.getWorkspacesByWorkspaceIdRouterRulesInfiniteOptions = getWorkspacesByWorkspaceIdRouterRulesInfiniteOptions;
const postWorkspacesByWorkspaceIdRouterRuleTemplatesQueryKey = (options) => createQueryKey('postWorkspacesByWorkspaceIdRouterRuleTemplates', options);
exports.postWorkspacesByWorkspaceIdRouterRuleTemplatesQueryKey = postWorkspacesByWorkspaceIdRouterRuleTemplatesQueryKey;
/**
 * Create Workspace Router Rule Template
 * Creates a new router rule template scoped to the specified workspace. Template names must be unique within the organization scope. The workspaceId from the URL path will be used to scope the template.
 */
const postWorkspacesByWorkspaceIdRouterRuleTemplatesOptions = (options) => {
    return (0, react_query_1.queryOptions)({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await (0, sdk_gen_1.postWorkspacesByWorkspaceIdRouterRuleTemplates)({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: (0, exports.postWorkspacesByWorkspaceIdRouterRuleTemplatesQueryKey)(options)
    });
};
exports.postWorkspacesByWorkspaceIdRouterRuleTemplatesOptions = postWorkspacesByWorkspaceIdRouterRuleTemplatesOptions;
/**
 * Create Workspace Router Rule Template
 * Creates a new router rule template scoped to the specified workspace. Template names must be unique within the organization scope. The workspaceId from the URL path will be used to scope the template.
 */
const postWorkspacesByWorkspaceIdRouterRuleTemplatesMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await (0, sdk_gen_1.postWorkspacesByWorkspaceIdRouterRuleTemplates)({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
exports.postWorkspacesByWorkspaceIdRouterRuleTemplatesMutation = postWorkspacesByWorkspaceIdRouterRuleTemplatesMutation;
