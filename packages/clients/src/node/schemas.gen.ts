// This file is auto-generated by @hey-api/openapi-ts

export const $RegisterResponse = {
    type: 'object',
    properties: {
        passwordless: {
            type: 'boolean',
            description: 'Indicates if passwordless registration was used',
            example: false
        },
        emailSent: {
            type: 'boolean',
            description: 'Indicates if a verification email was sent',
            example: true
        },
        message: {
            type: 'string',
            description: 'Informational message',
            example: 'Verification email sent.'
        },
        orgId: {
            type: 'string',
            description: 'ID of the created organization',
            example: 'cmacjllv80002x90m5x62wl0v'
        }
    }
} as const;

export const $ValidationErrorMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Validation Error'
        },
        errors: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ErrorIssueDetail'
            },
            description: 'Detailed list of validation issues'
        }
    },
    required: ['message'],
    description: 'Error response for validation failures'
} as const;

export const $ErrorIssueDetail = {
    type: 'object',
    properties: {
        path: {
            type: 'array',
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'number'
                    }
                ]
            },
            description: 'Path to the field causing the issue'
        },
        message: {
            type: 'string',
            description: 'Specific message for this issue'
        },
        code: {
            type: 'string',
            description: 'Optional specific code for this issue (e.g., Zod issue code)'
        }
    },
    required: ['message'],
    description: 'Details of a specific error issue'
} as const;

export const $EmailAlreadyInUseMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Email address is already in use'
        }
    },
    required: ['message'],
    description: 'Error response when an email address is already registered'
} as const;

export const $EmailSendFailureMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Failed to send email'
        }
    },
    required: ['message'],
    description: 'Error response when an email fails to send'
} as const;

export const $OrganizationCreationFailureMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Failed to create organization'
        }
    },
    required: ['message'],
    description: 'Error response when organization creation fails during registration'
} as const;

export const $RegisterRequest = {
    type: 'object',
    properties: {
        email: {
            type: 'string',
            format: 'email',
            maxLength: 255,
            description: 'User email address',
            example: 'user@example.com'
        },
        password: {
            type: 'string',
            minLength: 6,
            maxLength: 72,
            description: 'User password (optional for passwordless)',
            example: 'password123'
        },
        organizationName: {
            type: 'string',
            maxLength: 100,
            description: 'Name of the initial organization',
            example: 'My Company'
        }
    },
    required: ['email']
} as const;

export const $RegisterVerifyResponse = {
    type: 'object',
    properties: {
        access_token: {
            type: 'string',
            description: 'JWT access token upon successful registration verification',
            example: 'eyJ...'
        }
    }
} as const;

export const $EmailAlreadyVerifiedMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Email is already verified'
        }
    },
    required: ['message'],
    description: 'Error response when an email has already been verified'
} as const;

export const $UnauthorizedResponseMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Unauthorized'
        }
    },
    required: ['message'],
    description: 'Unauthorized response message'
} as const;

export const $UserNotFoundMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'User not found',
            description: 'The specified user could not be found'
        }
    },
    required: ['message'],
    description: 'Indicates that the specified user was not found'
} as const;

export const $OrganizationNotFoundMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Organization not found',
            description: 'The specified organization could not be found or is not accessible'
        }
    },
    required: ['message'],
    description: 'Indicates that the organization context was not found or is invalid'
} as const;

export const $RegisterVerifyRequest = {
    type: 'object',
    properties: {
        email: {
            type: 'string',
            format: 'email',
            maxLength: 255,
            description: 'User email address (optional)',
            example: 'user@example.com'
        },
        code: {
            type: 'string',
            minLength: 6,
            maxLength: 6,
            description: '6-digit verification code (for email/MFA)',
            example: '123456'
        },
        token: {
            type: 'string',
            minLength: 12,
            maxLength: 12,
            description: 'Verification token (for email links)',
            example: 'abcdef123456'
        },
        password: {
            type: 'string',
            minLength: 6,
            maxLength: 72,
            description: 'User password (if setting during verification)',
            example: 'password123'
        }
    }
} as const;

export const $RegisterVerifyResendResponse = {
    type: 'object',
    properties: {
        emailSent: {
            type: 'boolean',
            description: 'Indicates if the verification email was resent',
            example: true
        }
    }
} as const;

export const $InvalidCredentialsForOperationMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Invalid credentials for this operation'
        }
    },
    required: ['message'],
    description: 'Error response for invalid credentials for an operation (not login)'
} as const;

export const $SignInResponse = {
    type: 'object',
    properties: {
        access_token: {
            type: 'string',
            description: 'JWT access token (if password provided)',
            example: 'eyJ...'
        },
        passwordless: {
            type: 'boolean',
            description: 'Indicates if passwordless sign-in is required',
            example: true
        },
        emailSent: {
            type: 'boolean',
            description: 'Indicates if a sign-in verification email was sent',
            example: true
        },
        organization: {
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: 'Unique identifier for the organization',
                    example: 'cmaeeh20u0000ys0ptfsekbtc'
                },
                name: {
                    type: 'string',
                    minLength: 1,
                    maxLength: 100,
                    description: 'Name of the organization',
                    example: 'Acme Inc'
                }
            },
            required: ['id'],
            description: 'Details of the organization the user signed into'
        }
    }
} as const;

export const $SignInRequest = {
    type: 'object',
    properties: {
        email: {
            type: 'string',
            format: 'email',
            maxLength: 255,
            description: 'User email address',
            example: 'user@example.com'
        },
        password: {
            type: 'string',
            minLength: 6,
            maxLength: 72,
            description: 'User password (optional for passwordless)',
            example: 'password123'
        }
    },
    required: ['email']
} as const;

export const $SignInVerifyResponse = {
    type: 'object',
    properties: {
        access_token: {
            type: 'string',
            description: 'JWT access token upon successful sign-in verification',
            example: 'eyJ...'
        }
    }
} as const;

export const $SignInVerifyRequest = {
    type: 'object',
    properties: {
        email: {
            type: 'string',
            format: 'email',
            maxLength: 255,
            description: 'User email address (optional)',
            example: 'user@example.com'
        },
        code: {
            type: 'string',
            minLength: 6,
            maxLength: 6,
            description: '6-digit verification code (for email/MFA)',
            example: '123456'
        },
        token: {
            type: 'string',
            minLength: 12,
            maxLength: 12,
            description: 'Verification token (for email links)',
            example: 'abcdef123456'
        },
        password: {
            type: 'string',
            minLength: 6,
            maxLength: 72,
            description: 'User password (if setting during verification)',
            example: 'password123'
        }
    }
} as const;

export const $EmailVerifySendResponse = {
    type: 'object',
    properties: {
        emailSent: {
            type: 'boolean',
            description: 'Indicates if the verification email was sent',
            example: true
        }
    }
} as const;

export const $EmailVerifyResponse = {
    type: 'object',
    properties: {
        verified: {
            type: 'boolean',
            description: 'Indicates if the email was successfully verified',
            example: true
        },
        access_token: {
            type: 'string',
            description: 'JWT access token upon successful verification',
            example: 'eyJ...'
        }
    }
} as const;

export const $EmailVerifyRequest = {
    type: 'object',
    properties: {
        email: {
            type: 'string',
            format: 'email',
            maxLength: 255,
            description: 'User email address (optional)',
            example: 'user@example.com'
        },
        code: {
            type: 'string',
            minLength: 6,
            maxLength: 6,
            description: '6-digit verification code (for email/MFA)',
            example: '123456'
        },
        token: {
            type: 'string',
            minLength: 12,
            maxLength: 12,
            description: 'Verification token (for email links)',
            example: 'abcdef123456'
        },
        password: {
            type: 'string',
            minLength: 6,
            maxLength: 72,
            description: 'User password (if setting during verification)',
            example: 'password123'
        }
    }
} as const;

export const $BaseUserResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier for the user',
            example: 'cmaeeh20u0000ys0ptfsekbtc'
        },
        name: {
            type: 'string',
            maxLength: 100,
            description: "User's full name",
            example: 'John Doe'
        },
        email: {
            type: 'string',
            format: 'email',
            maxLength: 255,
            description: "User's email address",
            example: 'john.doe@example.com'
        },
        isEmailVerified: {
            type: 'boolean',
            description: "Whether the user's email address has been verified",
            example: true
        },
        isDisabled: {
            type: 'boolean',
            description: 'Whether the user account is disabled',
            example: false
        }
    },
    required: ['id', 'name', 'email', 'isEmailVerified', 'isDisabled'],
    description: 'Basic user response information'
} as const;

export const $UserResponseWithAudit = {
    allOf: [
        {
            '$ref': '#/components/schemas/BaseUserResponse'
        }
    ],
    properties: {
        createdByUser: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoMember'
                },
                {
                    type: 'null'
                }
            ],
            description: 'User who created the resource',
            nullable: true
        },
        updatedByUser: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoMember'
                },
                {
                    type: 'null'
                }
            ],
            description: 'User who last updated the resource',
            nullable: true
        },
        createdByApiKey: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoApiKey'
                },
                {
                    type: 'null'
                }
            ],
            description: 'API key used to create the resource',
            nullable: true
        },
        updatedByApiKey: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoApiKey'
                },
                {
                    type: 'null'
                }
            ],
            description: 'API key used to last update the resource',
            nullable: true
        },
        createdAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'When the resource was created',
            example: '2023-01-01T00:00:00Z',
            nullable: true
        },
        updatedAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'When the resource was last updated',
            example: '2023-01-01T00:00:00Z',
            nullable: true
        }
    },
    description: 'User information with audit details'
} as const;

export const $AuditInfoMember = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier of the user',
            example: 'cmaeeh20u0000ys0ptfsekbtc'
        },
        name: {
            type: 'string',
            description: 'Name of the user',
            example: 'John Doe'
        },
        email: {
            type: 'string',
            description: 'Email address of the user',
            example: 'john.doe@example.com'
        }
    },
    required: ['id', 'name', 'email'],
    description: 'User information in audit trail'
} as const;

export const $AuditInfoApiKey = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier of the API key',
            example: 'cmaeeh20u0000ys0ptfsekbtc'
        },
        name: {
            type: 'string',
            description: 'Name of the API key',
            example: 'Production API Key'
        },
        roleName: {
            type: 'string',
            description: 'Role associated with the API key',
            example: 'admin'
        }
    },
    required: ['id', 'name', 'roleName'],
    description: 'API key information in audit trail'
} as const;

export const $MeResponse = {
    allOf: [
        {
            '$ref': '#/components/schemas/UserResponseWithAudit'
        }
    ],
    properties: {
        organizations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OrganizationResponse'
            },
            description: 'List of organizations the user belongs to'
        }
    }
} as const;

export const $OrganizationResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier for the organization',
            example: 'cmaeeh20u0000ys0ptfsekbtc'
        },
        name: {
            type: 'string',
            description: 'Name of the organization',
            example: 'Acme Inc'
        },
        planName: {
            type: ['string', 'null'],
            description: 'Current plan of the organization',
            example: 'pro'
        },
        description: {
            type: ['string', 'null'],
            description: 'Description of the organization',
            example: 'Global leader in widgets manufacturing'
        },
        isDisabled: {
            type: 'boolean',
            description: 'Whether the organization is disabled',
            example: false
        },
        disabledBy: {
            type: ['string', 'null'],
            description: 'ID of the user or API key that disabled the organization',
            example: 'cmaeeh20u0000ys0ptfsekbtc'
        },
        disabledAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Timestamp when the organization was disabled',
            example: '2023-01-01T00:00:00Z'
        },
        isDeleted: {
            type: 'boolean',
            description: 'Whether the organization is deleted',
            example: false
        },
        deletedBy: {
            type: ['string', 'null'],
            description: 'ID of the user or API key that deleted the organization',
            example: 'cmaeeh20u0000ys0ptfsekbtc'
        },
        deletedAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Timestamp when the organization was deleted',
            example: '2023-01-01T00:00:00Z'
        },
        isCurrent: {
            type: 'boolean',
            description: 'Whether this is the current active organization for the user',
            example: true
        },
        roles: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        description: 'Name of the role',
                        example: 'admin'
                    },
                    scopes: {
                        type: 'array',
                        items: {
                            type: 'string',
                            description: 'Scope associated with the role',
                            example: 'organization:read'
                        }
                    }
                },
                required: ['name']
            },
            description: 'Roles assigned to the user in this organization'
        },
        workspaces: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        description: 'Unique identifier for the workspace',
                        example: 'cmaeeh20u0000ys0ptfsekbtc'
                    },
                    name: {
                        type: 'string',
                        description: 'Name of the workspace',
                        example: 'Marketing Team'
                    },
                    isRestricted: {
                        type: 'boolean',
                        description: 'Whether access to this workspace is isRestricted',
                        example: true
                    },
                    roles: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    description: 'Name of the role',
                                    example: 'editor'
                                },
                                scopes: {
                                    type: 'array',
                                    items: {
                                        type: 'string',
                                        description: 'Scope associated with the role',
                                        example: 'workspace:write'
                                    }
                                }
                            },
                            required: ['name']
                        },
                        description: 'Roles assigned to the user in this workspace'
                    }
                },
                required: ['id', 'name', 'isRestricted']
            },
            description: 'Workspaces within this organization'
        },
        createdByUser: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoMember'
                },
                {
                    type: 'null'
                }
            ],
            description: 'User who created the resource',
            nullable: true
        },
        updatedByUser: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoMember'
                },
                {
                    type: 'null'
                }
            ],
            description: 'User who last updated the resource',
            nullable: true
        },
        createdByApiKey: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoApiKey'
                },
                {
                    type: 'null'
                }
            ],
            description: 'API key used to create the resource',
            nullable: true
        },
        updatedByApiKey: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoApiKey'
                },
                {
                    type: 'null'
                }
            ],
            description: 'API key used to last update the resource',
            nullable: true
        },
        createdAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'When the resource was created',
            example: '2023-01-01T00:00:00Z',
            nullable: true
        },
        updatedAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'When the resource was last updated',
            example: '2023-01-01T00:00:00Z',
            nullable: true
        }
    },
    required: ['id', 'name'],
    description: 'Organization information with related details'
} as const;

export const $SignOutResponse = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            description: 'Confirmation message',
            example: 'You are successfully signed out'
        }
    },
    required: ['message']
} as const;

export const $NotSignedInMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'User is not signed in'
        }
    },
    required: ['message'],
    description: 'Error response when the user is not signed in or session has expired'
} as const;

export const $PasswordResetResponse = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            description: 'Success message',
            example: 'Password reset email sent'
        }
    }
} as const;

export const $PasswordResetRequest = {
    type: 'object',
    properties: {
        email: {
            type: 'string',
            format: 'email',
            maxLength: 255,
            description: 'User email address',
            example: 'user@example.com'
        },
        password: {
            type: 'string',
            minLength: 6,
            maxLength: 72,
            description: 'User password (required for authentication)',
            example: 'password123'
        }
    },
    required: ['email']
} as const;

export const $PasswordResetVerifyResponse = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            description: 'Success message',
            example: 'Password has been reset successfully'
        }
    }
} as const;

export const $PasswordChangeFailedMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'Failed to change password'
        }
    },
    required: ['message'],
    description: 'Error response when changing the password fails for an unspecified reason'
} as const;

export const $PasswordResetVerifyRequest = {
    type: 'object',
    properties: {
        email: {
            type: 'string',
            format: 'email',
            maxLength: 255,
            description: 'User email address',
            example: 'user@example.com'
        },
        token: {
            type: 'string',
            minLength: 12,
            maxLength: 12,
            description: 'Password reset token received via email',
            example: 'abcdef123456'
        },
        newPassword: {
            type: 'string',
            minLength: 6,
            maxLength: 72,
            description: 'New password to set',
            example: 'newpassword123'
        }
    },
    required: ['email', 'token', 'newPassword']
} as const;

export const $PasswordChangeResponse = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            description: 'Success message',
            example: 'Password changed successfully'
        }
    }
} as const;

export const $PasswordChangeRequest = {
    type: 'object',
    properties: {
        currentPassword: {
            type: 'string',
            minLength: 6,
            maxLength: 72,
            description: 'Current user password',
            example: 'currentpassword123'
        },
        newPassword: {
            type: 'string',
            minLength: 6,
            maxLength: 72,
            description: 'New password to set',
            example: 'newpassword123'
        }
    },
    required: ['currentPassword', 'newPassword']
} as const;

export const $ApiKeyResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier for the API key',
            example: 'cmaeeh20u0000ys0ptfsekbtc'
        },
        orgId: {
            type: 'string',
            description: 'ID of the organization this API key belongs to',
            example: 'cmaeeh20u0000ys0ptfsekbtc'
        },
        roleName: {
            type: 'string',
            description: 'Name of the role assigned to this API key',
            example: 'role-admin'
        },
        name: {
            type: 'string',
            minLength: 1,
            maxLength: 100,
            description: 'Descriptive name for the API key',
            example: 'Production Integration Key'
        },
        status: {
            type: 'string',
            enum: ['active', 'deleted', 'disabled'],
            default: 'active',
            description: 'Current status of the API key',
            example: 'active'
        },
        expiresAt: {
            type: ['string', 'null'],
            description: 'Timestamp when the API key expires',
            example: '2024-12-31T23:59:59Z'
        },
        organization: {
            type: 'object',
            properties: {
                name: {
                    type: 'string',
                    description: 'Name of the organization this API key belongs to',
                    example: 'Acme Inc'
                }
            },
            description: 'Organization information'
        },
        createdByUser: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoMember'
                },
                {
                    type: 'null'
                }
            ],
            description: 'User who created the resource',
            nullable: true
        },
        updatedByUser: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoMember'
                },
                {
                    type: 'null'
                }
            ],
            description: 'User who last updated the resource',
            nullable: true
        },
        createdByApiKey: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoApiKey'
                },
                {
                    type: 'null'
                }
            ],
            description: 'API key used to create the resource',
            nullable: true
        },
        updatedByApiKey: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoApiKey'
                },
                {
                    type: 'null'
                }
            ],
            description: 'API key used to last update the resource',
            nullable: true
        },
        createdAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'When the resource was created',
            example: '2023-01-01T00:00:00Z',
            nullable: true
        },
        updatedAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'When the resource was last updated',
            example: '2023-01-01T00:00:00Z',
            nullable: true
        }
    },
    required: ['id', 'orgId', 'roleName', 'name', 'status', 'organization'],
    description: 'API key information with organization details'
} as const;

export const $ApiKeyCreateResponse = {
    allOf: [
        {
            '$ref': '#/components/schemas/ApiKeyResponse'
        }
    ],
    properties: {
        key: {
            type: 'string',
            description: 'The actual API key value (only returned once upon creation)',
            example: 'qrp_1a2b3c4d5e6f...'
        }
    },
    required: ['key'],
    description: 'Response after creating an API key, including the key value'
} as const;

export const $ApiKeyNameTakenMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'API key name is already taken'
        }
    },
    required: ['message'],
    description: 'Error response when an API key name is already taken within the organization'
} as const;

export const $InvalidApiKeyRoleMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Invalid API key role provided'
        }
    },
    required: ['message'],
    description: 'Error response when the role specified for an API key is invalid or not permitted'
} as const;

export const $InvalidApiKeyLifetimeFormatMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Invalid API key lifetime format. Please use format like "30d", "12h", "1y"'
        }
    },
    required: ['message'],
    description: 'Error response when the API key lifetime format is invalid (e.g., use "30d", "1y")'
} as const;

export const $LimitReachedMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'The limit for this resource has been reached'
        }
    },
    required: ['message'],
    description: 'Error response when an operation cannot be completed due to a usage limit'
} as const;

export const $ForbiddenResponseMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Forbidden'
        }
    },
    required: ['message'],
    description: 'Forbidden response message'
} as const;

export const $CreateApiKeyRequest = {
    type: 'object',
    properties: {
        roleName: {
            type: 'string',
            description: 'Name of the role assigned to this API key',
            example: 'role-admin'
        },
        lifetime: {
            type: 'string',
            description: 'Duration for which the key is valid (e.g., "30d", "1y")',
            example: '90d'
        },
        name: {
            type: 'string',
            minLength: 1,
            maxLength: 100,
            description: 'Descriptive name for the API key',
            example: 'Production Integration Key'
        }
    },
    required: ['roleName', 'name'],
    description: 'Data required to create a new API key'
} as const;

export const $ApiKeyList = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/ApiKeyResponse'
    },
    description: 'List of API keys'
} as const;

export const $EmptyArrayResponse = {
    type: 'null',
    example: [],
    description: 'Empty array response'
} as const;

export const $ApiKeyNotFoundMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'API Key not found',
            description: 'The specified API Key could not be found'
        }
    },
    required: ['message'],
    description: 'Indicates that the specified API Key was not found'
} as const;

export const $UpdateApiKeyRequest = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            minLength: 1,
            maxLength: 100,
            description: 'New name for the API key',
            example: 'Updated Production Key'
        },
        expiresAt: {
            type: ['string', 'null'],
            description: 'New expiration date for the API key',
            example: '2025-12-31T23:59:59Z'
        }
    },
    required: ['name'],
    description: 'Data for updating an API key'
} as const;

export const $StatusChangeApiKeyRequest = {
    type: 'object',
    properties: {
        status: {
            type: 'string',
            enum: ['active', 'disabled'],
            description: 'New status for the API key',
            example: 'disabled'
        }
    },
    required: ['status'],
    description: 'Data for changing the status of an API key'
} as const;

export const $SuccessResponse = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            description: 'Success message',
            example: 'Operation completed successfully'
        }
    },
    required: ['message'],
    description: 'Generic success response'
} as const;

export const $UpdateFieldRequiredMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'At least one field must be provided for update'
        }
    },
    required: ['message'],
    description: 'Error response when at least one field is required for an update operation'
} as const;

export const $UpdateOrganizationRequest = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            minLength: 1,
            maxLength: 100,
            description: 'Name of the organization',
            example: 'Acme Inc'
        },
        description: {
            type: ['string', 'null'],
            maxLength: 500,
            description: 'Description of the organization',
            example: 'Global leader in widgets manufacturing'
        }
    },
    description: 'Data for updating an organization'
} as const;

export const $OrganizationCreateResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier for the organization',
            example: 'cmaeeh20u0000ys0ptfsekbtc'
        },
        name: {
            type: 'string',
            description: 'Name of the organization',
            example: 'Acme Inc'
        },
        description: {
            type: ['string', 'null'],
            description: 'Description of the organization',
            example: 'Global leader in widgets manufacturing'
        }
    },
    required: ['id', 'name'],
    description: 'Response after creating an organization'
} as const;

export const $CreateOrganizationRequest = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            minLength: 1,
            maxLength: 100,
            description: 'Name of the organization',
            example: 'Acme Inc'
        },
        description: {
            type: 'string',
            maxLength: 500,
            description: 'Description of the organization',
            example: 'Global leader in widgets manufacturing'
        }
    },
    required: ['name'],
    description: 'Data required to create a new organization'
} as const;

export const $OrganizationNotFoundOrDisabledMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Organization not found or is disabled',
            description: 'The specified organization could not be found, or it is currently disabled'
        }
    },
    required: ['message'],
    description: 'Indicates that the organization was not found or is disabled'
} as const;

export const $InvitationResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier for the invitation',
            example: 'cmaeeh20u0000ys0ptfsekbtc'
        },
        email: {
            type: 'string',
            format: 'email',
            description: 'Email address of the invited user',
            example: 'john.doe@example.com'
        },
        orgId: {
            type: 'string',
            description: 'ID of the organization sending the invitation',
            example: 'cmaeeh20u0000ys0ptfsekbtc'
        },
        workspaceId: {
            type: ['string', 'null'],
            description: 'ID of the specific workspace (if applicable)',
            example: 'cmaeeh20u0000ys0ptfsekbtc',
            nullable: true
        },
        roleName: {
            type: 'string',
            description: 'Role to be assigned upon acceptance',
            example: 'editor'
        },
        status: {
            type: 'string',
            enum: ['pending', 'accepted', 'expired', 'declined'],
            description: 'Current status of the invitation',
            example: 'pending'
        },
        message: {
            type: ['string', 'null'],
            description: 'Personalized message included in the invitation',
            example: 'Hey John, please join our organization!',
            nullable: true
        },
        expiresAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                }
            ],
            description: 'When the invitation expires',
            example: '2023-12-31T23:59:59Z'
        },
        organization: {
            type: 'object',
            properties: {
                name: {
                    type: 'string',
                    description: 'Name of the organization sending the invitation',
                    example: 'Acme Corporation'
                }
            },
            required: ['name'],
            description: 'Organization information'
        },
        workspace: {
            type: ['object', 'null'],
            properties: {
                name: {
                    type: 'string',
                    description: 'Name of the workspace',
                    example: 'Project Alpha'
                }
            },
            required: ['name'],
            description: 'Workspace information (if invitation is for a specific workspace)',
            nullable: true
        },
        createdByUser: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoMember'
                },
                {
                    type: 'null'
                }
            ],
            description: 'User who created the resource',
            nullable: true
        },
        updatedByUser: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoMember'
                },
                {
                    type: 'null'
                }
            ],
            description: 'User who last updated the resource',
            nullable: true
        },
        createdByApiKey: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoApiKey'
                },
                {
                    type: 'null'
                }
            ],
            description: 'API key used to create the resource',
            nullable: true
        },
        updatedByApiKey: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoApiKey'
                },
                {
                    type: 'null'
                }
            ],
            description: 'API key used to last update the resource',
            nullable: true
        },
        createdAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'When the resource was created',
            example: '2023-01-01T00:00:00Z',
            nullable: true
        },
        updatedAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'When the resource was last updated',
            example: '2023-01-01T00:00:00Z',
            nullable: true
        }
    },
    required: ['id', 'email', 'orgId', 'roleName', 'status', 'expiresAt', 'organization'],
    description: 'Invitation details with audit information'
} as const;

export const $CreateInvitationResponse = {
    '$ref': '#/components/schemas/InvitationResponse',
    description: 'Response after creating an invitation'
} as const;

export const $UserAlreadyHasRoleInOrganizationMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'User already has this role'
        }
    },
    required: ['message'],
    description: 'Error response when a user already has the specified role in the organization'
} as const;

export const $CreateInvitationRequest = {
    type: 'object',
    properties: {
        email: {
            type: 'string',
            format: 'email',
            maxLength: 255,
            description: 'Email address of the person to invite',
            example: 'john.doe@example.com'
        },
        roleName: {
            type: 'string',
            description: 'Role to assign to the invited user',
            example: 'editor'
        },
        workspaceId: {
            type: 'string',
            description: 'Optional workspace ID to invite user to a specific workspace',
            example: 'cmaeeh20u0000ys0ptfsekbtc',
            nullable: true
        },
        message: {
            type: ['string', 'null'],
            maxLength: 300,
            description: 'Optional personalized message to include in the invitation',
            example: 'Hey John, please join our organization!',
            nullable: true
        }
    },
    required: ['email', 'roleName'],
    description: 'Data required to create a new invitation'
} as const;

export const $OrganizationInvitationsResponse = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/InvitationResponse'
    },
    description: 'List of invitations sent by the organization'
} as const;

export const $UserInvitationsResponse = {
    type: 'array',
    items: {
        type: 'object',
        properties: {
            id: {
                type: 'string',
                description: 'Unique identifier for the invitation',
                example: 'cmaeeh20u0000ys0ptfsekbtc'
            },
            orgId: {
                type: 'string',
                description: 'ID of the organization sending the invitation',
                example: 'cmaeeh20u0000ys0ptfsekbtc'
            },
            workspaceId: {
                type: ['string', 'null'],
                description: 'ID of the specific workspace (if applicable)',
                example: 'cmaeeh20u0000ys0ptfsekbtc',
                nullable: true
            },
            roleName: {
                type: 'string',
                description: 'Role to be assigned upon acceptance',
                example: 'editor'
            },
            status: {
                type: 'string',
                enum: ['pending', 'accepted', 'expired', 'declined'],
                description: 'Current status of the invitation',
                example: 'pending'
            },
            message: {
                type: ['string', 'null'],
                description: 'Personalized message included in the invitation',
                example: 'Hey John, please join our organization!',
                nullable: true
            },
            expiresAt: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'string'
                    }
                ],
                description: 'When the invitation expires',
                example: '2023-12-31T23:59:59Z'
            },
            organization: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        description: 'Name of the organization sending the invitation',
                        example: 'Acme Corporation'
                    }
                },
                required: ['name'],
                description: 'Organization information'
            },
            workspace: {
                type: ['object', 'null'],
                properties: {
                    name: {
                        type: 'string',
                        description: 'Name of the workspace',
                        example: 'Project Alpha'
                    }
                },
                required: ['name'],
                description: 'Workspace information (if invitation is for a specific workspace)',
                nullable: true
            },
            createdByUser: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AuditInfoMember'
                    },
                    {
                        type: 'null'
                    }
                ],
                description: 'User who created the resource',
                nullable: true
            },
            updatedByUser: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AuditInfoMember'
                    },
                    {
                        type: 'null'
                    }
                ],
                description: 'User who last updated the resource',
                nullable: true
            },
            createdByApiKey: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AuditInfoApiKey'
                    },
                    {
                        type: 'null'
                    }
                ],
                description: 'API key used to create the resource',
                nullable: true
            },
            updatedByApiKey: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AuditInfoApiKey'
                    },
                    {
                        type: 'null'
                    }
                ],
                description: 'API key used to last update the resource',
                nullable: true
            },
            createdAt: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'string'
                    },
                    {
                        type: 'null'
                    }
                ],
                description: 'When the resource was created',
                example: '2023-01-01T00:00:00Z',
                nullable: true
            },
            updatedAt: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'string'
                    },
                    {
                        type: 'null'
                    }
                ],
                description: 'When the resource was last updated',
                example: '2023-01-01T00:00:00Z',
                nullable: true
            }
        },
        required: ['id', 'orgId', 'roleName', 'status', 'expiresAt', 'organization'],
        description: 'Invitation details with audit information'
    },
    description: 'List of invitations sent by the current user'
} as const;

export const $CannotDeleteAcceptedInvitationMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'Cannot delete accepted invitation'
        }
    },
    required: ['message'],
    description: 'Error response when attempting to delete an accepted invitation'
} as const;

export const $InvitationNotFoundMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Invitation not found or organization is disabled or deleted',
            description: 'The specified invitation could not be found or is invalid or the organization is disabled or deleted'
        }
    },
    required: ['message'],
    description: 'Indicates that the invitation was not found or is invalid'
} as const;

export const $AcceptInvitationResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'User ID of the newly registered or existing user',
            example: 'cmaeeh20u0000ys0ptfsekbtc'
        },
        email: {
            type: 'string',
            format: 'email',
            description: 'Email address of the user',
            example: 'john.doe@example.com'
        },
        isEmailVerified: {
            type: 'boolean',
            description: 'Whether the email has been verified',
            example: true
        },
        access_token: {
            type: 'string',
            description: 'JWT access token for authentication',
            example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
        }
    },
    required: ['id', 'email', 'isEmailVerified', 'access_token'],
    description: 'Response after accepting an invitation'
} as const;

export const $InvitationExpiredMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'Invitation expired'
        }
    },
    required: ['message'],
    description: 'Error response when an invitation has expired'
} as const;

export const $InvitationAlreadyAcceptedMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'Invitation already accepted'
        }
    },
    required: ['message'],
    description: 'Error response when an invitation has already been accepted'
} as const;

export const $InvitationAlreadyDeclinedMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'Invitation already declined'
        }
    },
    required: ['message'],
    description: 'Error response when an invitation has already been declined'
} as const;

export const $UserRoleWithOrganization = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'Name of the role',
            example: 'role-admin'
        },
        scopes: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Permissions associated with the role',
            example: ['org:read', 'workspace:all']
        },
        organization: {
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: 'Unique identifier for the organization',
                    example: 'cmaeeh20u0000ys0ptfsekbtc'
                },
                name: {
                    type: 'string',
                    minLength: 1,
                    maxLength: 100,
                    description: 'Name of the organization',
                    example: 'Acme Inc'
                },
                description: {
                    type: ['string', 'null'],
                    maxLength: 500,
                    description: 'Description of the organization',
                    example: 'Global leader in widgets manufacturing'
                }
            },
            required: ['id'],
            description: 'Organization the role is associated with'
        }
    },
    required: ['name', 'organization'],
    description: 'Role information with organization details'
} as const;

export const $MemberNotFoundMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Member not found',
            description: 'The specified member could not be found'
        }
    },
    required: ['message'],
    description: 'Indicates that the specified member was not found'
} as const;

export const $MemberOrRoleNotFoundMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Member or Role not found',
            description: 'The specified member (user) or role could not be found'
        }
    },
    required: ['message'],
    description: 'Indicates that the member or role was not found'
} as const;

export const $AddOrganizationMember = {
    type: 'object',
    properties: {
        email: {
            type: 'string',
            format: 'email',
            maxLength: 255,
            description: 'Email address of the user to add',
            example: 'john.doe@example.com'
        },
        roleName: {
            type: 'string',
            description: 'Name of the role to assign to the member',
            example: 'editor'
        },
        sendInvitation: {
            type: 'boolean',
            description: 'Whether to send an invitation email',
            example: true
        }
    },
    required: ['email', 'roleName'],
    description: 'Data required to add a member to an organization'
} as const;

export const $OrganizationMembers = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/OrganizationMember'
    },
    description: 'List of members in the organization with their roles'
} as const;

export const $OrganizationMember = {
    allOf: [
        {
            '$ref': '#/components/schemas/UserResponseWithAudit'
        }
    ],
    properties: {
        organizationRoles: {
            type: 'array',
            items: {
                allOf: [
                    {
                        '$ref': '#/components/schemas/Role'
                    }
                ],
                properties: {
                    orgId: {
                        type: 'string',
                        description: 'ID of the organization this role is associated with',
                        example: 'cmaeeh20u0000ys0ptfsekbtc'
                    }
                },
                required: ['orgId'],
                description: 'Role in the organization'
            },
            description: 'Roles the member has in the organization'
        },
        workspaceRoles: {
            type: 'array',
            items: {
                allOf: [
                    {
                        '$ref': '#/components/schemas/Role'
                    }
                ],
                properties: {
                    workspaceId: {
                        type: 'string',
                        description: 'ID of the workspace this role is associated with',
                        example: 'cmaeeh20u0000ys0ptfsekbtc'
                    }
                },
                required: ['workspaceId'],
                description: 'Role in a workspace'
            },
            description: 'Roles the member has in workspaces'
        }
    },
    required: ['organizationRoles', 'workspaceRoles'],
    description: 'Member information with roles'
} as const;

export const $Role = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'Name of the role',
            example: 'role-admin'
        },
        scopes: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Permissions associated with the role',
            example: ['org:read', 'workspace:all']
        }
    },
    required: ['name'],
    description: 'Role information'
} as const;

export const $GroupedMemberRoles = {
    type: 'object',
    properties: {
        organizationRoles: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        description: 'Name of the role',
                        example: 'role-admin'
                    },
                    scopes: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        description: 'Permissions associated with the role',
                        example: ['org:read', 'workspace:all']
                    },
                    orgId: {
                        type: 'string',
                        description: 'ID of the organization this role is associated with',
                        example: 'cmaeeh20u0000ys0ptfsekbtc'
                    }
                },
                required: ['name', 'orgId'],
                description: 'Role in the organization'
            },
            description: 'Roles the member has in organizations'
        },
        workspaceRoles: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        description: 'Name of the role',
                        example: 'role-admin'
                    },
                    scopes: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        description: 'Permissions associated with the role',
                        example: ['org:read', 'workspace:all']
                    },
                    workspaceId: {
                        type: 'string',
                        description: 'ID of the workspace this role is associated with',
                        example: 'cmaeeh20u0000ys0ptfsekbtc'
                    }
                },
                required: ['name', 'workspaceId'],
                description: 'Role in a workspace'
            },
            description: 'Roles the member has in workspaces'
        }
    },
    required: ['organizationRoles', 'workspaceRoles'],
    description: 'Grouped roles for a member'
} as const;

export const $EmptyRolesListResponse = {
    type: 'object',
    properties: {
        organizationRoles: {
            type: 'array',
            items: {},
            description: 'Array of organization roles, empty in this case'
        },
        workspaceRoles: {
            type: 'array',
            items: {},
            description: 'Array of workspace roles, empty in this case'
        }
    },
    description: 'Response body when a member is found but has no roles in the given context, resulting in a 404 for the roles list'
} as const;

export const $AddMemberRole = {
    type: 'object',
    properties: {
        roleName: {
            type: 'string',
            description: 'Name of the role to assign',
            example: 'editor'
        }
    },
    required: ['roleName'],
    description: 'Data required to add a role to a member'
} as const;

export const $CannotRemoveOwnOwnerRoleMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'You cannot remove your own owner role'
        }
    },
    required: ['message'],
    description: 'Error response when a user attempts to remove their own owner role'
} as const;

export const $WorkspaceResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier for the workspace',
            example: 'cmaeeh20u0000ys0ptfsekbtc'
        },
        name: {
            type: 'string',
            description: 'Name of the workspace',
            example: 'Marketing Team'
        },
        description: {
            type: ['string', 'null'],
            description: 'Description of the workspace',
            example: 'Workspace for marketing team projects'
        },
        isRestricted: {
            type: 'boolean',
            description: 'Whether access to this workspace is isRestricted',
            example: true
        },
        orgId: {
            type: 'string',
            description: 'ID of the organization this workspace belongs to',
            example: 'cmaeeh20u0000ys0ptfsekbtc'
        },
        createdByUser: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoMember'
                },
                {
                    type: 'null'
                }
            ],
            description: 'User who created the resource',
            nullable: true
        },
        updatedByUser: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoMember'
                },
                {
                    type: 'null'
                }
            ],
            description: 'User who last updated the resource',
            nullable: true
        },
        createdByApiKey: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoApiKey'
                },
                {
                    type: 'null'
                }
            ],
            description: 'API key used to create the resource',
            nullable: true
        },
        updatedByApiKey: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoApiKey'
                },
                {
                    type: 'null'
                }
            ],
            description: 'API key used to last update the resource',
            nullable: true
        },
        createdAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'When the resource was created',
            example: '2023-01-01T00:00:00Z',
            nullable: true
        },
        updatedAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'When the resource was last updated',
            example: '2023-01-01T00:00:00Z',
            nullable: true
        }
    },
    required: ['id', 'name', 'isRestricted', 'orgId'],
    description: 'Workspace information with audit details'
} as const;

export const $WorkspaceNameTakenMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'Workspace name is already taken'
        }
    },
    required: ['message'],
    description: 'Error response when a workspace name is already taken within the organization'
} as const;

export const $CreateWorkspaceRequest = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            minLength: 1,
            maxLength: 100,
            description: 'Name of the workspace',
            example: 'Marketing Team'
        },
        description: {
            type: 'string',
            maxLength: 500,
            description: 'Description of the workspace',
            example: 'Workspace for marketing team projects'
        },
        isRestricted: {
            type: 'boolean',
            default: true,
            description: 'Whether access to this workspace is isRestricted',
            example: true
        }
    },
    required: ['name'],
    description: 'Data required to create a new workspace'
} as const;

export const $WorkspaceNotFoundMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Workspace not found',
            description: 'The specified workspace could not be found'
        }
    },
    required: ['message'],
    description: 'Indicates that the specified workspace was not found'
} as const;

export const $UpdateWorkspaceRequest = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            minLength: 1,
            maxLength: 100,
            description: 'New name for the workspace',
            example: 'Marketing Team'
        },
        description: {
            type: 'string',
            maxLength: 500,
            description: 'New description for the workspace',
            example: 'Workspace for marketing team projects'
        },
        isRestricted: {
            type: 'boolean',
            description: 'Whether access to this workspace is isRestricted',
            example: true
        }
    },
    description: 'Data for updating a workspace'
} as const;

export const $WorkspaceDeleteResponse = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            description: 'Success message',
            example: 'Workspace deleted successfully'
        }
    },
    required: ['message'],
    description: 'Response after deleting a workspace'
} as const;

export const $WorkspaceNotEmptyMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'Workspace is not empty'
        }
    },
    required: ['message'],
    description: 'Error response when a workspace is not empty'
} as const;

export const $WorkspaceMemberRoles = {
    type: 'array',
    items: {
        type: 'object',
        properties: {
            name: {
                type: 'string',
                description: 'Name of the role',
                example: 'editor'
            }
        },
        required: ['name'],
        description: 'Role assigned to a workspace member'
    },
    description: 'List of roles assigned to a workspace member'
} as const;

export const $AddWorkspaceMemberRoleResponse = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'Name of the assigned role',
            example: 'editor'
        }
    },
    required: ['name'],
    description: 'Result of assigning a role to a workspace member'
} as const;

export const $UserAlreadyHasRoleInWorkspaceMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'User already has this role in the workspace'
        }
    },
    required: ['message'],
    description: 'Error response when a user already has the specified role in the workspace'
} as const;

export const $RoleNotFoundMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Role not found',
            description: 'The specified role could not be found'
        }
    },
    required: ['message'],
    description: 'Indicates that the specified role was not found'
} as const;

export const $WorkspaceMemberRole = {
    type: 'object',
    properties: {
        roleName: {
            type: 'string',
            description: 'Name of the role to assign',
            example: 'editor'
        }
    },
    required: ['roleName'],
    description: 'Role to assign to a workspace member'
} as const;

export const $WorkspaceMembers = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/WorkspaceMember'
    },
    description: 'List of members in a workspace'
} as const;

export const $WorkspaceMember = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier of the member',
            example: 'cmaeeh20u0000ys0ptfsekbtc'
        },
        name: {
            type: 'string',
            description: 'Name of the member',
            example: 'John Doe'
        },
        email: {
            type: 'string',
            format: 'email',
            description: 'Email address of the member',
            example: 'john.doe@example.com'
        },
        roles: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        description: 'Name of the role',
                        example: 'editor'
                    },
                    isInherited: {
                        type: 'boolean',
                        description: 'Whether the role is inherited from organization level',
                        example: false
                    }
                },
                required: ['name', 'isInherited']
            },
            description: 'Roles assigned to the member in this workspace'
        },
        createdByUser: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoMember'
                },
                {
                    type: 'null'
                }
            ],
            description: 'User who created the resource',
            nullable: true
        },
        updatedByUser: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoMember'
                },
                {
                    type: 'null'
                }
            ],
            description: 'User who last updated the resource',
            nullable: true
        },
        createdByApiKey: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoApiKey'
                },
                {
                    type: 'null'
                }
            ],
            description: 'API key used to create the resource',
            nullable: true
        },
        updatedByApiKey: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoApiKey'
                },
                {
                    type: 'null'
                }
            ],
            description: 'API key used to last update the resource',
            nullable: true
        },
        createdAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'When the resource was created',
            example: '2023-01-01T00:00:00Z',
            nullable: true
        },
        updatedAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'When the resource was last updated',
            example: '2023-01-01T00:00:00Z',
            nullable: true
        }
    },
    required: ['id', 'name', 'email', 'roles'],
    description: 'Workspace member information'
} as const;

export const $RolesWithScopesResponse = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/RoleWithScopesResponse'
    },
    description: 'List of roles with their associated scopes'
} as const;

export const $RoleWithScopesResponse = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'Name of the role',
            example: 'role-admin'
        },
        scopes: {
            type: 'array',
            items: {
                type: 'string',
                description: 'Permission scope',
                example: 'workspace:read'
            }
        }
    },
    required: ['name', 'scopes'],
    description: 'Role with detailed scope information'
} as const;

export const $PlansResponse = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/Plan'
    },
    description: 'List of available plans'
} as const;

export const $Plan = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            enum: ['plan-free', 'plan-startup', 'plan-business', 'plan-enterprise'],
            description: 'Unique identifier of the plan',
            example: 'plan-business'
        },
        displayName: {
            type: 'string',
            description: 'Human-readable name of the plan',
            example: 'Business'
        },
        description: {
            type: 'string',
            description: 'Brief description of the plan',
            example: 'Advanced features for established businesses'
        },
        limits: {
            type: 'object',
            additionalProperties: {
                type: 'number'
            },
            description: 'Plan limits by limit type',
            example: {
                'limit-workspaces': 10,
                'limit-members': 10,
                'limit-monthly-codes': 10000
            }
        },
        isCurrent: {
            type: 'boolean',
            description: 'Whether this is the current plan for the authenticated organization',
            example: true
        },
        nextResetAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                }
            ],
            description: 'When the next limit reset will occur for this plan',
            example: '2023-12-01T00:00:00Z'
        }
    },
    required: ['name', 'displayName', 'description', 'limits'],
    description: 'Plan information'
} as const;

export const $PlanWithLimits = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            enum: ['plan-free', 'plan-startup', 'plan-business', 'plan-enterprise'],
            description: 'Unique identifier of the plan',
            example: 'plan-business'
        },
        limits: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/LimitDetail'
            },
            description: 'Detailed limits with current usage',
            example: {
                'limit-workspaces': {
                    limit: 10,
                    usage: 4
                },
                'limit-members': {
                    limit: 10,
                    usage: 7
                }
            }
        },
        isCurrent: {
            type: 'boolean',
            description: 'Whether this is the current plan',
            example: true
        },
        nextResetAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                }
            ],
            description: 'When the next limit reset will occur',
            example: '2023-12-01T00:00:00Z'
        }
    },
    required: ['name', 'limits'],
    description: 'Plan with detailed usage information'
} as const;

export const $LimitDetail = {
    type: 'object',
    properties: {
        limit: {
            type: 'number',
            description: 'Maximum allowed value for this limit',
            example: 100
        },
        usage: {
            type: 'number',
            description: 'Current usage count against this limit',
            example: 45
        }
    },
    required: ['limit', 'usage'],
    description: 'Limit details with current usage'
} as const;

export const $OrganizationPlanResponse = {
    '$ref': '#/components/schemas/PlanWithLimits',
    description: 'Current organization plan with usage details'
} as const;

export const $PlanNotFoundMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Plan not found',
            description: 'The specified plan or the plan for the organization could not be found'
        }
    },
    required: ['message'],
    description: 'Indicates that the plan was not found'
} as const;

export const $SettingsWithGroupResponse = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/SettingWithGroup'
    },
    description: 'List of settings with group information'
} as const;

export const $SettingResponse = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'Name of the setting',
            example: 'Auto Code Validation'
        },
        slug: {
            type: 'string',
            description: 'URL-friendly identifier for the setting',
            example: 'auto-code-validation'
        },
        description: {
            type: ['string', 'null'],
            description: 'Description of what the setting does',
            example: 'Enable auto code validation for all QR codes',
            nullable: true
        },
        value: {
            description: 'Value of the setting, can be any type depending on the setting',
            example: true
        }
    },
    required: ['name', 'slug'],
    description: 'Setting response data'
} as const;

export const $SettingWithGroup = {
    allOf: [
        {
            '$ref': '#/components/schemas/SettingResponse'
        }
    ],
    properties: {
        group: {
            type: 'string',
            enum: ['service', 'custom'],
            description: 'Type of setting (service or custom)',
            example: 'service'
        }
    },
    required: ['group'],
    description: 'Setting with group information'
} as const;

export const $SettingsResponse = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/SettingResponse'
    },
    description: 'List of settings'
} as const;

export const $SettingNotFoundMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Setting not found',
            description: 'The specified setting could not be found'
        }
    },
    required: ['message'],
    description: 'Indicates that the specified setting was not found'
} as const;

export const $SettingValueRequiredMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'Setting value is required'
        }
    },
    required: ['message'],
    description: 'Error response when a setting value is required but not provided'
} as const;

export const $SettingReservedNameMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'Cannot create setting with a reserved name'
        }
    },
    required: ['message'],
    description: 'Error response when attempting to create a setting with a reserved name'
} as const;

export const $SettingNotWorkspaceOverridableMessageSchema = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'This setting is not a workspace-overridable service setting'
        }
    },
    required: ['message'],
    description: 'Error response when attempting to operate on a service setting as if it were workspace-overridable, but it is not'
} as const;

export const $CreateSetting = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            pattern: '^[A-Za-z0-9\\- ]+$',
            minLength: 1,
            maxLength: 64,
            description: 'Name of the setting',
            example: 'Auto Code Validation'
        },
        description: {
            type: ['string', 'null'],
            maxLength: 256,
            description: 'Description of what the setting does',
            example: 'Enable auto code validation for all QR codes',
            nullable: true
        },
        value: {
            description: 'Value of the setting, can be any type depending on the setting',
            example: true
        }
    },
    required: ['name'],
    description: 'Data required to create a new setting'
} as const;

export const $UpdateSetting = {
    type: 'object',
    properties: {
        description: {
            type: ['string', 'null'],
            maxLength: 256,
            description: 'Description of what the setting does',
            example: 'Enable auto code validation for all QR codes',
            nullable: true
        },
        value: {
            description: 'Value of the setting, can be any type depending on the setting',
            example: true
        }
    },
    description: 'Data required to update an existing setting'
} as const;

export const $SettingSuccessResponse = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            description: 'Success message',
            example: 'Setting deleted successfully'
        }
    },
    required: ['message'],
    description: 'Generic success response'
} as const;

export const $CannotDeleteServiceSettingMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'Service settings cannot be deleted'
        }
    },
    required: ['message'],
    description: 'Error response when attempting to delete a non-deletable service setting'
} as const;

export const $InvalidServiceSettingSlugMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'The provided slug does not correspond to a valid service setting'
        }
    },
    required: ['message'],
    description: 'Error response when an invalid service setting slug is provided'
} as const;

export const $InvalidServiceSettingValueTypeMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'The provided value has an incorrect type for this service setting'
        }
    },
    required: ['message'],
    description: 'Error response when a service setting value has an incorrect data type'
} as const;

export const $InvalidServiceSettingValueMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'The provided value is invalid for this service setting (e.g., not in allowed list)'
        }
    },
    required: ['message'],
    description: 'Error response when a service setting value is invalid (e.g., not in allowed list)'
} as const;

export const $CannotOverrideSettingAtWorkspaceLevelMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'This service setting cannot be overridden at the workspace level'
        }
    },
    required: ['message'],
    description: 'Error response when attempting to override a non-overridable setting at the workspace level'
} as const;

export const $WorkspaceIdRequiredMessageSchema = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'Workspace ID is required for this operation'
        }
    },
    required: ['message'],
    description: 'Error response when a workspace ID is required for an operation but not provided'
} as const;

export const $EmptyResponseWithPagination = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {}
        },
        pagination: {
            type: 'object',
            properties: {
                total: {
                    type: 'number',
                    description: 'Total number of items matching the filter criteria',
                    example: 0
                },
                page: {
                    type: 'number',
                    description: 'Current page number',
                    example: 0
                },
                limit: {
                    type: 'number',
                    description: 'Number of items per page',
                    example: 0
                },
                totalPages: {
                    type: 'number',
                    description: 'Total number of pages',
                    example: 0
                }
            },
            required: ['total', 'page', 'limit', 'totalPages'],
            description: 'Pagination metadata'
        }
    },
    required: ['pagination']
} as const;

export const $CodeNotFoundMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'QR Code not found',
            description: 'The specified QR code could not be found'
        }
    },
    required: ['message'],
    description: 'Indicates that the specified QR code was not found'
} as const;

export const $CodeRouterRuleResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique rule assignment identifier'
        },
        codeId: {
            type: 'string',
            description: 'Parent QR code ID'
        },
        templateId: {
            type: ['string', 'null'],
            description: 'Template ID or null for inline'
        },
        ruleType: {
            type: 'string',
            description: 'Denormalized rule type for filtering'
        },
        rule: {
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: 'Template ID (only for template rules)'
                },
                name: {
                    type: ['string', 'null'],
                    description: 'Rule name'
                },
                description: {
                    type: ['string', 'null'],
                    description: 'Rule description'
                },
                type: {
                    type: 'string',
                    description: 'Rule type'
                },
                conditions: {
                    type: ['object', 'null'],
                    additionalProperties: {},
                    description: 'Rule conditions (null for scanLimit)'
                },
                isGlobal: {
                    type: 'boolean',
                    description: 'Is global template'
                },
                orgId: {
                    type: ['string', 'null'],
                    description: 'Organization ID'
                },
                workspaceId: {
                    type: ['string', 'null'],
                    description: 'Workspace ID'
                },
                totalScans: {
                    type: 'integer',
                    description: 'Total template scans'
                },
                createdAt: {
                    type: 'string',
                    format: 'date-time',
                    description: 'Template creation date'
                },
                updatedAt: {
                    type: 'string',
                    format: 'date-time',
                    description: 'Template update date'
                }
            },
            required: ['name', 'description', 'type', 'conditions'],
            description: 'Resolved rule object'
        },
        priority: {
            type: 'integer'
        },
        dataType: {
            type: 'string',
            enum: ['url', 'wifi', 'vcard', 'text', 'email', 'event', 'json', 'file'],
            description: 'The type of data the QR code contains. Only applies to dynamic codes. Determines how the QR code data is processed and what content type is returned when scanned. Available options: url (default, standard web redirect), wifi (WiFi configuration), vcard (contact card), text (plain text), email (mailto format), event (calendar event), json (custom JSON), file (file download).',
            example: 'url'
        },
        dynamicData: {
            type: 'object',
            additionalProperties: {}
        },
        maxScans: {
            type: ['integer', 'null']
        },
        loop: {
            type: 'boolean'
        },
        expiresAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        disabled: {
            type: 'boolean'
        },
        currentScans: {
            type: 'integer'
        },
        totalScans: {
            type: 'integer'
        },
        createdByUser: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoMember'
                },
                {
                    type: 'null'
                }
            ],
            description: 'User who created the resource',
            nullable: true
        },
        updatedByUser: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoMember'
                },
                {
                    type: 'null'
                }
            ],
            description: 'User who last updated the resource',
            nullable: true
        },
        createdByApiKey: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoApiKey'
                },
                {
                    type: 'null'
                }
            ],
            description: 'API key used to create the resource',
            nullable: true
        },
        updatedByApiKey: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoApiKey'
                },
                {
                    type: 'null'
                }
            ],
            description: 'API key used to last update the resource',
            nullable: true
        },
        createdAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'When the resource was created',
            example: '2023-01-01T00:00:00Z',
            nullable: true
        },
        updatedAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'When the resource was last updated',
            example: '2023-01-01T00:00:00Z',
            nullable: true
        }
    },
    required: ['id', 'codeId', 'templateId', 'ruleType', 'rule', 'priority', 'dataType', 'dynamicData', 'maxScans', 'loop', 'expiresAt', 'disabled', 'currentScans', 'totalScans'],
    description: 'Code router rule assignment response object'
} as const;

export const $RouterRulePriorityAlreadyExistsMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'A router rule with this priority already exists for this QR code'
        }
    },
    required: ['message'],
    description: 'Error response when a router rule with the specified priority already exists'
} as const;

export const $RouterRuleInvalidConditionsMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'Invalid conditions for the specified rule type'
        }
    },
    required: ['message'],
    description: 'Error response when router rule conditions are invalid for the specified rule type'
} as const;

export const $RouterRuleMaxScansRequiredMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'scanLimit rules require maxScans to be specified'
        }
    },
    required: ['message'],
    description: 'Error response when scanLimit rule is missing required maxScans field'
} as const;

export const $RouterRuleInvalidCountryCodeMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'Invalid country code provided for router rule'
        }
    },
    required: ['message'],
    description: 'Error response when an invalid country code is provided for router rule'
} as const;

export const $RouterRuleNotFoundMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Router rule assignment not found',
            description: 'The specified router rule assignment could not be found'
        }
    },
    required: ['message'],
    description: 'Indicates that the specified router rule assignment was not found'
} as const;

export const $BaseCodeResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier for the QR code',
            example: 'cmaeeh20u0000ys0ptfsekbtc'
        },
        name: {
            type: 'string',
            description: 'Name of the QR code',
            example: 'Product Campaign QR'
        },
        type: {
            type: 'string',
            enum: ['static', 'dynamic'],
            description: 'Type of the QR code',
            example: 'static'
        },
        dataType: {
            type: ['string', 'null'],
            enum: ['url', 'wifi', 'vcard', 'text', 'email', 'event', 'json', 'file', null],
            description: 'The type of data the QR code contains. Only applies to dynamic codes.',
            example: 'url',
            nullable: true
        },
        shortAlias: {
            type: ['string', 'null'],
            description: 'Short alias for the QR code',
            example: 'test-short-alias',
            nullable: true
        },
        dynamicData: {
            type: ['object', 'null'],
            additionalProperties: {},
            description: 'Functional content for dynamic QR codes. Structure depends on dataType.',
            example: {
                url: 'https://example.com'
            },
            nullable: true
        },
        data: {
            type: 'string',
            description: 'Data encoded in the QR code',
            example: 'https://example.com/product'
        },
        description: {
            type: ['string', 'null'],
            description: 'Description of the QR code',
            example: 'QR code for our summer product campaign',
            nullable: true
        },
        totalScans: {
            type: ['number', 'null'],
            description: 'Number of times the QR code has been scanned',
            example: 10,
            nullable: true
        },
        metadata: {
            type: ['object', 'null'],
            additionalProperties: {},
            description: 'Custom user metadata for the QR code as JSON object. This is separate from the dynamicData field and stores additional information that is not part of the functional content.',
            example: {
                campaign: 'summer-sale',
                tags: ['marketing', 'promotion'],
                internalId: 'QR-001',
                budget: 5000
            },
            nullable: true
        },
        options: {
            '$ref': '#/components/schemas/QRCodeOptions'
        },
        styleId: {
            type: ['string', 'null'],
            description: 'ID of the style applied to the QR code',
            example: 'cmaeeh20u0000ys0ptfsekbtc',
            nullable: true
        },
        templateId: {
            type: ['string', 'null'],
            description: 'ID of the template applied to the QR code',
            example: 'cmaeeh20u0000ys0ptfsekbtc',
            nullable: true
        },
        borderId: {
            type: ['string', 'null'],
            description: 'ID of the border applied to the QR code',
            example: 'cmaeeh20u0000ys0ptfsekbtc',
            nullable: true
        },
        textId: {
            type: ['string', 'null'],
            description: 'ID of the text applied to the QR code',
            example: 'cmaeeh20u0000ys0ptfsekbtc',
            nullable: true
        },
        style: {
            type: 'object',
            properties: {
                id: {
                    type: ['string', 'null']
                },
                name: {
                    type: ['string', 'null']
                },
                options: {
                    '$ref': '#/components/schemas/StyleOptions'
                }
            },
            required: ['options'],
            description: 'Style object with its configuration'
        },
        template: {
            type: 'object',
            properties: {
                id: {
                    type: ['string', 'null']
                },
                name: {
                    type: ['string', 'null']
                },
                options: {
                    '$ref': '#/components/schemas/QRCodeOptionsWithOptionalData'
                }
            },
            description: 'Template object with its configuration'
        },
        border: {
            type: 'object',
            properties: {
                id: {
                    type: ['string', 'null']
                },
                name: {
                    type: ['string', 'null']
                },
                options: {
                    '$ref': '#/components/schemas/BorderOptions'
                }
            },
            required: ['options'],
            description: 'Border object with its configuration'
        },
        text: {
            type: 'object',
            properties: {
                id: {
                    type: ['string', 'null']
                },
                name: {
                    type: ['string', 'null']
                },
                options: {
                    '$ref': '#/components/schemas/TextOptions'
                }
            },
            required: ['options'],
            description: 'Text object with its configuration'
        },
        workspaceId: {
            type: ['string', 'null'],
            description: 'ID of the workspace the QR code belongs to',
            example: 'cmaeeh20u0000ys0ptfsekbtc',
            nullable: true
        },
        isValid: {
            type: ['boolean', 'null'],
            description: 'Whether the QR code is valid',
            example: true,
            nullable: true
        },
        validatedAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'When the QR code was last validated',
            example: '2023-10-25T14:30:00Z',
            nullable: true
        },
        version: {
            type: 'number',
            description: 'Version number of the QR code',
            example: 2
        },
        isDeleted: {
            type: 'boolean',
            description: 'Whether the QR code is deleted',
            example: false
        }
    },
    required: ['id', 'name', 'data', 'description', 'totalScans', 'metadata', 'options', 'styleId', 'templateId', 'borderId', 'textId', 'workspaceId', 'isValid', 'validatedAt', 'version'],
    description: 'Base QR code response schema'
} as const;

export const $QRCodeOptions = {
    type: 'object',
    properties: {
        data: {
            type: 'string',
            minLength: 3,
            description: 'Data to encode in the QR code (required)',
            example: 'https://example.com'
        },
        shape: {
            type: ['string', 'null'],
            enum: ['square', 'circle', null],
            description: 'Overall shape of the QR code',
            example: 'square'
        },
        margin: {
            type: ['number', 'null'],
            description: 'Margin around the QR code in pixels',
            example: 10
        },
        isResponsive: {
            type: ['boolean', 'null'],
            description: 'Whether QR code is responsive',
            example: true
        },
        scale: {
            type: ['number', 'null'],
            minimum: 0,
            maximum: 1.5,
            description: 'Scale factor for QR code (0-1.5)',
            example: 1
        },
        offset: {
            type: ['number', 'null'],
            description: 'General offset in pixels',
            example: 0
        },
        verticalOffset: {
            type: ['number', 'null'],
            description: 'Vertical offset in pixels',
            example: 0
        },
        horizontalOffset: {
            type: ['number', 'null'],
            description: 'Horizontal offset in pixels',
            example: 0
        },
        qrOptions: {
            type: ['object', 'null'],
            properties: {
                typeNumber: {
                    type: ['number', 'null'],
                    minimum: 0,
                    maximum: 40,
                    description: 'QR code type number (0-40)',
                    example: 0
                },
                mode: {
                    type: 'string',
                    enum: ['numeric', 'alphanumeric', 'byte', 'kanji', 'unicode'],
                    description: 'QR code encoding mode',
                    example: 'byte'
                },
                errorCorrectionLevel: {
                    type: ['string', 'null'],
                    enum: ['L', 'M', 'Q', 'H', null],
                    description: 'Error correction level',
                    example: 'M'
                }
            },
            description: 'QR code specific options'
        },
        dotsOptions: {
            type: ['object', 'null'],
            properties: {
                type: {
                    type: ['string', 'null'],
                    enum: ['dot', 'square', 'rounded', 'extra-rounded', 'classy', 'classy-rounded', 'vertical-line', 'horizontal-line', 'random-dot', 'small-square', 'tiny-square', 'star', 'plus', 'diamond', null],
                    description: 'Type of dots',
                    example: 'rounded'
                },
                color: {
                    type: ['string', 'null'],
                    description: 'Color of dots in CSS format',
                    example: '#000000'
                },
                size: {
                    type: ['number', 'null'],
                    description: 'Size of dots relative to module size (0-1)',
                    example: 0.5
                },
                gradient: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/Gradient'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Gradient for dots'
                }
            },
            description: 'Options for QR code dots'
        },
        cornersSquareOptions: {
            type: ['object', 'null'],
            properties: {
                type: {
                    type: ['string', 'null'],
                    enum: ['dot', 'square', 'rounded', 'classy', 'outpoint', 'inpoint', null],
                    description: 'Type of corner squares',
                    example: 'square'
                },
                color: {
                    type: ['string', 'null'],
                    description: 'Color of corner squares in CSS format',
                    example: '#000000'
                },
                gradient: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/Gradient'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Gradient for corner squares'
                }
            },
            description: 'Options for QR code corner squares'
        },
        cornersDotOptions: {
            type: ['object', 'null'],
            properties: {
                type: {
                    type: ['string', 'null'],
                    enum: ['dot', 'square', 'heart', 'rounded', 'classy', 'outpoint', 'inpoint', null],
                    description: 'Type of corner dots',
                    example: 'dot'
                },
                color: {
                    type: ['string', 'null'],
                    description: 'Color of corner dots in CSS format',
                    example: '#000000'
                },
                gradient: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/Gradient'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Gradient for corner dots'
                }
            },
            description: 'Options for QR code corner dots'
        },
        backgroundOptions: {
            anyOf: [
                {
                    type: 'object',
                    properties: {
                        color: {
                            type: ['string', 'null'],
                            description: 'Background color in CSS format',
                            example: '#ffffff'
                        },
                        round: {
                            anyOf: [
                                {
                                    type: 'number',
                                    minimum: 0,
                                    maximum: 1
                                },
                                {
                                    type: 'string'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Background corner rounding (0-1 or CSS value)',
                            example: 0.1
                        },
                        gradient: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/Gradient'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Gradient for background'
                        }
                    },
                    required: ['color']
                },
                {
                    type: 'boolean',
                    const: false
                }
            ],
            description: 'Options for QR code background or false to disable'
        },
        image: {
            anyOf: [
                {
                    type: 'string'
                },
                {},
                {},
                {
                    type: 'null'
                }
            ],
            description: 'Image to embed in the QR code (URL, Buffer, or Blob)',
            example: 'https://example.com/logo.png'
        },
        imageOptions: {
            type: ['object', 'null'],
            properties: {
                mode: {
                    type: ['string', 'null'],
                    enum: ['center', 'overlay', 'background', null],
                    description: 'Mode for embedded image',
                    example: 'center'
                },
                imageSize: {
                    type: ['number', 'null'],
                    minimum: 0,
                    maximum: 1,
                    description: 'Size of image relative to QR code (0-1)',
                    example: 0.2
                },
                margin: {
                    type: ['number', 'null'],
                    description: 'Margin around the image in pixels',
                    example: 5
                },
                crossOrigin: {
                    type: ['string', 'null'],
                    description: 'Cross-origin attribute for image',
                    example: 'anonymous'
                },
                fill: {
                    type: ['object', 'null'],
                    properties: {
                        color: {
                            type: ['string', 'null'],
                            description: 'Fill color in CSS format',
                            example: '#ffffff'
                        },
                        gradient: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/Gradient'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Gradient for fill'
                        }
                    },
                    description: 'Fill options for image area'
                }
            },
            description: 'Options for embedded image'
        },
        borderOptions: {
            type: ['object', 'null'],
            properties: {
                hasBorder: {
                    type: ['boolean', 'null'],
                    description: 'Whether to show border',
                    example: true
                },
                thickness: {
                    type: ['number', 'null'],
                    description: 'Border thickness in pixels',
                    example: 2
                },
                color: {
                    type: ['string', 'null'],
                    description: 'Border color in CSS format',
                    example: '#000000'
                },
                radius: {
                    type: ['string', 'null'],
                    description: 'Border radius in CSS format',
                    example: '10px'
                },
                noBorderThickness: {
                    type: ['number', 'null'],
                    description: 'Thickness when no border is shown',
                    example: 0
                },
                background: {
                    type: ['string', 'null'],
                    description: 'Border background color in CSS format',
                    example: '#ffffff'
                },
                inner: {
                    type: ['object', 'null'],
                    properties: {
                        radius: {
                            type: ['string', 'null'],
                            description: 'Inner radius in CSS format',
                            example: '5px'
                        },
                        scale: {
                            type: ['number', 'null'],
                            minimum: 0,
                            maximum: 1.5,
                            description: 'Inner scale factor (0-1.5)',
                            example: 1
                        },
                        horizontalOffset: {
                            type: ['number', 'null'],
                            description: 'Inner horizontal offset in pixels',
                            example: 0
                        },
                        verticalOffset: {
                            type: ['number', 'null'],
                            description: 'Inner vertical offset in pixels',
                            example: 0
                        }
                    },
                    description: 'Inner border configuration'
                },
                borderOuter: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/BorderInnerOuter'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Outer border configuration'
                },
                borderInner: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/BorderInnerOuter'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Inner border configuration'
                },
                decorations: {
                    type: ['object', 'null'],
                    properties: {
                        top: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/DecorationOptions'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Top decoration configuration'
                        },
                        right: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/DecorationOptions'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Right decoration configuration'
                        },
                        bottom: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/DecorationOptions'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Bottom decoration configuration'
                        },
                        left: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/DecorationOptions'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Left decoration configuration'
                        }
                    },
                    description: 'Border decorations configuration'
                }
            },
            description: 'Border configuration options'
        }
    },
    required: ['data'],
    description: 'Complete configuration for QR code generation'
} as const;

export const $Gradient = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['linear', 'radial'],
            description: 'Type of gradient',
            example: 'linear'
        },
        rotation: {
            type: 'number',
            description: 'Rotation angle of gradient in degrees',
            example: 45
        },
        colorStops: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    offset: {
                        type: 'number',
                        minimum: 0,
                        maximum: 1,
                        description: 'Position of the color stop (0-1)',
                        example: 0.5
                    },
                    color: {
                        type: 'string',
                        description: 'Color in CSS format',
                        example: '#ff0000'
                    }
                },
                additionalProperties: false,
                description: 'Color stop in a gradient'
            },
            minItems: 2,
            description: 'Array of color stops in the gradient (min 2)'
        }
    },
    additionalProperties: false,
    description: 'Gradient definition'
} as const;

export const $BorderInnerOuter = {
    type: 'object',
    properties: {
        color: {
            type: 'string',
            description: 'Border color in CSS format',
            example: '#000000'
        },
        thickness: {
            type: 'number',
            description: 'Border thickness in pixels',
            example: 2
        }
    },
    additionalProperties: false,
    description: 'Inner or outer border configuration'
} as const;

export const $DecorationOptions = {
    type: 'object',
    properties: {
        disabled: {
            type: 'boolean',
            description: 'Whether decoration is disabled',
            example: false
        },
        enableText: {
            type: 'boolean',
            description: 'Whether text is enabled',
            example: true
        },
        offset: {
            type: 'number',
            description: 'Offset position in pixels',
            example: 5
        },
        curveAdjustment: {
            type: 'number',
            description: 'Curve adjustment value',
            example: 0.5
        },
        curveDisabled: {
            type: 'boolean',
            description: 'Whether curve is disabled',
            example: false
        },
        curveRadius: {
            type: 'string',
            description: 'Curve radius value (CSS format)',
            example: '5px'
        },
        type: {
            type: 'string',
            enum: ['text', 'image'],
            description: 'Type of decoration',
            example: 'text'
        },
        value: {
            type: 'string',
            description: 'Content value for decoration',
            example: 'Scan me!'
        },
        style: {
            '$ref': '#/components/schemas/TextDecorationStyle',
            description: 'Style for text decoration'
        }
    },
    additionalProperties: false,
    description: 'Options for QR code decoration'
} as const;

export const $TextDecorationStyle = {
    type: 'object',
    properties: {
        fontFace: {
            type: 'string',
            description: 'Font face for the text',
            example: 'Arial, sans-serif'
        },
        fontSize: {
            type: 'number',
            description: 'Font size in pixels',
            example: 14
        },
        fontColor: {
            type: 'string',
            description: 'Font color in CSS format',
            example: '#000000'
        },
        letterSpacing: {
            type: 'number',
            description: 'Letter spacing in pixels',
            example: 1
        },
        fontWeight: {
            type: 'string',
            enum: ['normal', 'bold'],
            description: 'Font weight',
            example: 'bold'
        }
    },
    additionalProperties: false,
    description: 'Text decoration style'
} as const;

export const $StyleOptions = {
    type: 'object',
    properties: {
        primaryColor: {
            type: ['string', 'null'],
            description: 'Primary color for QR code elements in CSS format',
            example: '#000000'
        },
        secondaryColor: {
            type: ['string', 'null'],
            description: 'Secondary color for QR code elements in CSS format',
            example: '#ffffff'
        },
        thirdColor: {
            type: ['string', 'null'],
            description: 'Tertiary color for QR code elements in CSS format',
            example: '#cccccc'
        },
        backgroundColor: {
            type: ['string', 'null'],
            description: 'Background color of the QR code in CSS format',
            example: '#ffffff'
        },
        dotsGradient: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Gradient'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Gradient configuration for QR code dots'
        },
        cornersDotGradient: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Gradient'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Gradient configuration for corner dots'
        },
        cornersGradient: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Gradient'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Gradient configuration for corners'
        },
        backgroundGradient: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Gradient'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Gradient configuration for QR code background'
        },
        dotShape: {
            type: ['string', 'null'],
            enum: ['dot', 'square', 'rounded', 'extra-rounded', 'classy', 'classy-rounded', 'vertical-line', 'horizontal-line', 'random-dot', 'small-square', 'tiny-square', 'star', 'plus', 'diamond', null],
            description: 'Shape style for the QR code dots',
            example: 'rounded'
        },
        cornerSquareShape: {
            type: ['string', 'null'],
            enum: ['dot', 'square', 'rounded', 'classy', 'outpoint', 'inpoint', null],
            description: 'Shape style for the QR code corner squares',
            example: 'square'
        },
        cornerDotShape: {
            type: ['string', 'null'],
            enum: ['dot', 'square', 'heart', 'rounded', 'classy', 'outpoint', 'inpoint', null],
            description: 'Shape style for the QR code corner dots',
            example: 'dot'
        },
        logo: {
            anyOf: [
                {
                    type: 'string'
                },
                {},
                {},
                {
                    type: 'null'
                }
            ],
            description: 'Logo to be placed on the QR code (URL, Base64, Buffer, or Blob)',
            example: 'https://example.com/logo.png'
        },
        logoSize: {
            type: ['number', 'null'],
            minimum: 0,
            maximum: 1,
            description: 'Size of the logo relative to QR code (0-1)',
            example: 0.2
        },
        logoMode: {
            type: ['string', 'null'],
            enum: ['center', 'overlay', 'background', null],
            description: 'Placement mode for the logo',
            example: 'center'
        },
        logoMargin: {
            type: ['number', 'null'],
            description: 'Margin around the logo in pixels',
            example: 5
        },
        logoBackgroundColor: {
            type: ['string', 'null'],
            description: 'Background color for logo in CSS format',
            example: '#ffffff'
        },
        logoPadding: {
            type: ['number', 'null'],
            description: 'Padding around the logo in pixels',
            example: 2
        },
        logoRadius: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Border radius for logo in pixels or CSS format',
            example: '5px'
        },
        borderColor: {
            type: ['string', 'null'],
            description: 'Color of the QR code border in CSS format',
            example: '#000000'
        },
        borderThickness: {
            type: ['number', 'null'],
            description: 'Thickness of the border in pixels',
            example: 4
        },
        borderRadius: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Border radius in pixels or CSS format',
            example: '10px'
        },
        borderInnerColor: {
            type: ['string', 'null'],
            description: 'Color of the inner border in CSS format',
            example: '#000000'
        },
        borderInnerThickness: {
            type: ['number', 'null'],
            description: 'Thickness of the inner border in pixels',
            example: 2
        },
        borderInnerRadius: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Inner border radius in pixels or CSS format',
            example: '8px'
        },
        borderOuterColor: {
            type: ['string', 'null'],
            description: 'Color of the outer border in CSS format',
            example: '#000000'
        },
        borderOuterThickness: {
            type: ['number', 'null'],
            description: 'Thickness of the outer border in pixels',
            example: 4
        },
        borderTextTop: {
            type: ['string', 'null'],
            description: 'Text to display on top border',
            example: 'Scan me'
        },
        borderTextRight: {
            type: ['string', 'null'],
            description: 'Text to display on right border',
            example: 'Visit our website'
        },
        borderTextBottom: {
            type: ['string', 'null'],
            description: 'Text to display on bottom border',
            example: 'www.example.com'
        },
        borderTextLeft: {
            type: ['string', 'null'],
            description: 'Text to display on left border',
            example: 'Premium QR'
        },
        borderFontFace: {
            type: ['string', 'null'],
            description: 'Font family for border text',
            example: 'Arial, sans-serif'
        },
        borderFontSize: {
            type: ['number', 'null'],
            description: 'Font size for border text in pixels',
            example: 14
        },
        borderFontColor: {
            type: ['string', 'null'],
            description: 'Font color for border text in CSS format',
            example: '#000000'
        },
        borderLetterSpacing: {
            type: ['number', 'null'],
            description: 'Letter spacing for border text in pixels',
            example: 1
        },
        borderTextTransform: {
            type: ['string', 'null'],
            enum: ['uppercase', 'lowercase', 'capitalize', null],
            description: 'Text transformation for border text',
            example: 'uppercase'
        },
        borderFontWeight: {
            type: 'string',
            description: 'Font weight for border text',
            example: 'bold'
        }
    },
    additionalProperties: false,
    description: 'Configuration options for QR code styling'
} as const;

export const $QRCodeOptionsWithOptionalData = {
    type: 'object',
    properties: {
        shape: {
            type: ['string', 'null'],
            enum: ['square', 'circle', null],
            description: 'Overall shape of the QR code',
            example: 'square'
        },
        margin: {
            type: ['number', 'null'],
            description: 'Margin around the QR code in pixels',
            example: 10
        },
        isResponsive: {
            type: ['boolean', 'null'],
            description: 'Whether QR code is responsive',
            example: true
        },
        scale: {
            type: ['number', 'null'],
            minimum: 0,
            maximum: 1.5,
            description: 'Scale factor for QR code (0-1.5)',
            example: 1
        },
        offset: {
            type: ['number', 'null'],
            description: 'General offset in pixels',
            example: 0
        },
        verticalOffset: {
            type: ['number', 'null'],
            description: 'Vertical offset in pixels',
            example: 0
        },
        horizontalOffset: {
            type: ['number', 'null'],
            description: 'Horizontal offset in pixels',
            example: 0
        },
        qrOptions: {
            type: ['object', 'null'],
            properties: {
                typeNumber: {
                    type: ['number', 'null'],
                    minimum: 0,
                    maximum: 40,
                    description: 'QR code type number (0-40)',
                    example: 0
                },
                mode: {
                    type: 'string',
                    enum: ['numeric', 'alphanumeric', 'byte', 'kanji', 'unicode'],
                    description: 'QR code encoding mode',
                    example: 'byte'
                },
                errorCorrectionLevel: {
                    type: ['string', 'null'],
                    enum: ['L', 'M', 'Q', 'H', null],
                    description: 'Error correction level',
                    example: 'M'
                }
            },
            description: 'QR code specific options'
        },
        dotsOptions: {
            type: ['object', 'null'],
            properties: {
                type: {
                    type: ['string', 'null'],
                    enum: ['dot', 'square', 'rounded', 'extra-rounded', 'classy', 'classy-rounded', 'vertical-line', 'horizontal-line', 'random-dot', 'small-square', 'tiny-square', 'star', 'plus', 'diamond', null],
                    description: 'Type of dots',
                    example: 'rounded'
                },
                color: {
                    type: ['string', 'null'],
                    description: 'Color of dots in CSS format',
                    example: '#000000'
                },
                size: {
                    type: ['number', 'null'],
                    description: 'Size of dots relative to module size (0-1)',
                    example: 0.5
                },
                gradient: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/Gradient'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Gradient for dots'
                }
            },
            description: 'Options for QR code dots'
        },
        cornersSquareOptions: {
            type: ['object', 'null'],
            properties: {
                type: {
                    type: ['string', 'null'],
                    enum: ['dot', 'square', 'rounded', 'classy', 'outpoint', 'inpoint', null],
                    description: 'Type of corner squares',
                    example: 'square'
                },
                color: {
                    type: ['string', 'null'],
                    description: 'Color of corner squares in CSS format',
                    example: '#000000'
                },
                gradient: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/Gradient'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Gradient for corner squares'
                }
            },
            description: 'Options for QR code corner squares'
        },
        cornersDotOptions: {
            type: ['object', 'null'],
            properties: {
                type: {
                    type: ['string', 'null'],
                    enum: ['dot', 'square', 'heart', 'rounded', 'classy', 'outpoint', 'inpoint', null],
                    description: 'Type of corner dots',
                    example: 'dot'
                },
                color: {
                    type: ['string', 'null'],
                    description: 'Color of corner dots in CSS format',
                    example: '#000000'
                },
                gradient: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/Gradient'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Gradient for corner dots'
                }
            },
            description: 'Options for QR code corner dots'
        },
        backgroundOptions: {
            anyOf: [
                {
                    type: 'object',
                    properties: {
                        color: {
                            type: ['string', 'null'],
                            description: 'Background color in CSS format',
                            example: '#ffffff'
                        },
                        round: {
                            anyOf: [
                                {
                                    type: 'number',
                                    minimum: 0,
                                    maximum: 1
                                },
                                {
                                    type: 'string'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Background corner rounding (0-1 or CSS value)',
                            example: 0.1
                        },
                        gradient: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/Gradient'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Gradient for background'
                        }
                    },
                    required: ['color']
                },
                {
                    type: 'boolean',
                    const: false
                }
            ],
            description: 'Options for QR code background or false to disable'
        },
        image: {
            anyOf: [
                {
                    type: 'string'
                },
                {},
                {},
                {
                    type: 'null'
                }
            ],
            description: 'Image to embed in the QR code (URL, Buffer, or Blob)',
            example: 'https://example.com/logo.png'
        },
        imageOptions: {
            type: ['object', 'null'],
            properties: {
                mode: {
                    type: ['string', 'null'],
                    enum: ['center', 'overlay', 'background', null],
                    description: 'Mode for embedded image',
                    example: 'center'
                },
                imageSize: {
                    type: ['number', 'null'],
                    minimum: 0,
                    maximum: 1,
                    description: 'Size of image relative to QR code (0-1)',
                    example: 0.2
                },
                margin: {
                    type: ['number', 'null'],
                    description: 'Margin around the image in pixels',
                    example: 5
                },
                crossOrigin: {
                    type: ['string', 'null'],
                    description: 'Cross-origin attribute for image',
                    example: 'anonymous'
                },
                fill: {
                    type: ['object', 'null'],
                    properties: {
                        color: {
                            type: ['string', 'null'],
                            description: 'Fill color in CSS format',
                            example: '#ffffff'
                        },
                        gradient: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/Gradient'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Gradient for fill'
                        }
                    },
                    description: 'Fill options for image area'
                }
            },
            description: 'Options for embedded image'
        },
        borderOptions: {
            type: ['object', 'null'],
            properties: {
                hasBorder: {
                    type: ['boolean', 'null'],
                    description: 'Whether to show border',
                    example: true
                },
                thickness: {
                    type: ['number', 'null'],
                    description: 'Border thickness in pixels',
                    example: 2
                },
                color: {
                    type: ['string', 'null'],
                    description: 'Border color in CSS format',
                    example: '#000000'
                },
                radius: {
                    type: ['string', 'null'],
                    description: 'Border radius in CSS format',
                    example: '10px'
                },
                noBorderThickness: {
                    type: ['number', 'null'],
                    description: 'Thickness when no border is shown',
                    example: 0
                },
                background: {
                    type: ['string', 'null'],
                    description: 'Border background color in CSS format',
                    example: '#ffffff'
                },
                inner: {
                    type: ['object', 'null'],
                    properties: {
                        radius: {
                            type: ['string', 'null'],
                            description: 'Inner radius in CSS format',
                            example: '5px'
                        },
                        scale: {
                            type: ['number', 'null'],
                            minimum: 0,
                            maximum: 1.5,
                            description: 'Inner scale factor (0-1.5)',
                            example: 1
                        },
                        horizontalOffset: {
                            type: ['number', 'null'],
                            description: 'Inner horizontal offset in pixels',
                            example: 0
                        },
                        verticalOffset: {
                            type: ['number', 'null'],
                            description: 'Inner vertical offset in pixels',
                            example: 0
                        }
                    },
                    description: 'Inner border configuration'
                },
                borderOuter: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/BorderInnerOuter'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Outer border configuration'
                },
                borderInner: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/BorderInnerOuter'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Inner border configuration'
                },
                decorations: {
                    type: ['object', 'null'],
                    properties: {
                        top: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/DecorationOptions'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Top decoration configuration'
                        },
                        right: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/DecorationOptions'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Right decoration configuration'
                        },
                        bottom: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/DecorationOptions'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Bottom decoration configuration'
                        },
                        left: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/DecorationOptions'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Left decoration configuration'
                        }
                    },
                    description: 'Border decorations configuration'
                }
            },
            description: 'Border configuration options'
        },
        data: {
            type: 'string',
            minLength: 3,
            description: 'Data to encode in the QR code (optional in this context)',
            example: 'https://example.com'
        }
    },
    description: 'QR code configuration with optional data field'
} as const;

export const $BorderOptions = {
    type: 'object',
    properties: {
        shape: {
            type: ['string', 'null'],
            enum: ['square', 'circle', null],
            description: 'Overall shape of the QR code',
            example: 'square'
        },
        margin: {
            type: ['number', 'null'],
            description: 'Margin around the QR code in pixels',
            example: 10
        },
        isResponsive: {
            type: ['boolean', 'null'],
            description: 'Whether QR code is responsive',
            example: true
        },
        scale: {
            type: ['number', 'null'],
            minimum: 0,
            maximum: 1.5,
            description: 'Scale factor for QR code (0-1.5)',
            example: 1
        },
        offset: {
            type: ['number', 'null'],
            description: 'General offset in pixels',
            example: 0
        },
        verticalOffset: {
            type: ['number', 'null'],
            description: 'Vertical offset in pixels',
            example: 0
        },
        horizontalOffset: {
            type: ['number', 'null'],
            description: 'Horizontal offset in pixels',
            example: 0
        },
        qrOptions: {
            type: ['object', 'null'],
            properties: {
                typeNumber: {
                    type: ['number', 'null'],
                    minimum: 0,
                    maximum: 40,
                    description: 'QR code type number (0-40)',
                    example: 0
                },
                mode: {
                    type: 'string',
                    enum: ['numeric', 'alphanumeric', 'byte', 'kanji', 'unicode'],
                    description: 'QR code encoding mode',
                    example: 'byte'
                },
                errorCorrectionLevel: {
                    type: ['string', 'null'],
                    enum: ['L', 'M', 'Q', 'H', null],
                    description: 'Error correction level',
                    example: 'M'
                }
            },
            description: 'QR code specific options'
        },
        dotsOptions: {
            type: ['object', 'null'],
            properties: {
                type: {
                    type: ['string', 'null'],
                    enum: ['dot', 'square', 'rounded', 'extra-rounded', 'classy', 'classy-rounded', 'vertical-line', 'horizontal-line', 'random-dot', 'small-square', 'tiny-square', 'star', 'plus', 'diamond', null],
                    description: 'Type of dots',
                    example: 'rounded'
                },
                color: {
                    type: ['string', 'null'],
                    description: 'Color of dots in CSS format',
                    example: '#000000'
                },
                size: {
                    type: ['number', 'null'],
                    description: 'Size of dots relative to module size (0-1)',
                    example: 0.5
                },
                gradient: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/Gradient'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Gradient for dots'
                }
            },
            description: 'Options for QR code dots'
        },
        cornersSquareOptions: {
            type: ['object', 'null'],
            properties: {
                type: {
                    type: ['string', 'null'],
                    enum: ['dot', 'square', 'rounded', 'classy', 'outpoint', 'inpoint', null],
                    description: 'Type of corner squares',
                    example: 'square'
                },
                color: {
                    type: ['string', 'null'],
                    description: 'Color of corner squares in CSS format',
                    example: '#000000'
                },
                gradient: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/Gradient'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Gradient for corner squares'
                }
            },
            description: 'Options for QR code corner squares'
        },
        cornersDotOptions: {
            type: ['object', 'null'],
            properties: {
                type: {
                    type: ['string', 'null'],
                    enum: ['dot', 'square', 'heart', 'rounded', 'classy', 'outpoint', 'inpoint', null],
                    description: 'Type of corner dots',
                    example: 'dot'
                },
                color: {
                    type: ['string', 'null'],
                    description: 'Color of corner dots in CSS format',
                    example: '#000000'
                },
                gradient: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/Gradient'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Gradient for corner dots'
                }
            },
            description: 'Options for QR code corner dots'
        },
        backgroundOptions: {
            anyOf: [
                {
                    type: 'object',
                    properties: {
                        color: {
                            type: ['string', 'null'],
                            description: 'Background color in CSS format',
                            example: '#ffffff'
                        },
                        round: {
                            anyOf: [
                                {
                                    type: 'number',
                                    minimum: 0,
                                    maximum: 1
                                },
                                {
                                    type: 'string'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Background corner rounding (0-1 or CSS value)',
                            example: 0.1
                        },
                        gradient: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/Gradient'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Gradient for background'
                        }
                    },
                    required: ['color']
                },
                {
                    type: 'boolean',
                    const: false
                }
            ],
            description: 'Options for QR code background or false to disable'
        },
        image: {
            anyOf: [
                {
                    type: 'string'
                },
                {},
                {},
                {
                    type: 'null'
                }
            ],
            description: 'Image to embed in the QR code (URL, Buffer, or Blob)',
            example: 'https://example.com/logo.png'
        },
        imageOptions: {
            type: ['object', 'null'],
            properties: {
                mode: {
                    type: ['string', 'null'],
                    enum: ['center', 'overlay', 'background', null],
                    description: 'Mode for embedded image',
                    example: 'center'
                },
                imageSize: {
                    type: ['number', 'null'],
                    minimum: 0,
                    maximum: 1,
                    description: 'Size of image relative to QR code (0-1)',
                    example: 0.2
                },
                margin: {
                    type: ['number', 'null'],
                    description: 'Margin around the image in pixels',
                    example: 5
                },
                crossOrigin: {
                    type: ['string', 'null'],
                    description: 'Cross-origin attribute for image',
                    example: 'anonymous'
                },
                fill: {
                    type: ['object', 'null'],
                    properties: {
                        color: {
                            type: ['string', 'null'],
                            description: 'Fill color in CSS format',
                            example: '#ffffff'
                        },
                        gradient: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/Gradient'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Gradient for fill'
                        }
                    },
                    description: 'Fill options for image area'
                }
            },
            description: 'Options for embedded image'
        },
        borderOptions: {
            type: 'object',
            properties: {
                hasBorder: {
                    type: ['boolean', 'null'],
                    description: 'Whether to show border',
                    example: true
                },
                thickness: {
                    type: ['number', 'null'],
                    description: 'Border thickness in pixels',
                    example: 2
                },
                color: {
                    type: ['string', 'null'],
                    description: 'Border color in CSS format',
                    example: '#000000'
                },
                radius: {
                    type: ['string', 'null'],
                    description: 'Border radius in CSS format',
                    example: '10px'
                },
                noBorderThickness: {
                    type: ['number', 'null'],
                    description: 'Thickness when no border is shown',
                    example: 0
                },
                background: {
                    type: ['string', 'null'],
                    description: 'Border background color in CSS format',
                    example: '#ffffff'
                },
                inner: {
                    type: ['object', 'null'],
                    properties: {
                        radius: {
                            type: ['string', 'null'],
                            description: 'Inner radius in CSS format',
                            example: '5px'
                        },
                        scale: {
                            type: ['number', 'null'],
                            minimum: 0,
                            maximum: 1.5,
                            description: 'Inner scale factor (0-1.5)',
                            example: 1
                        },
                        horizontalOffset: {
                            type: ['number', 'null'],
                            description: 'Inner horizontal offset in pixels',
                            example: 0
                        },
                        verticalOffset: {
                            type: ['number', 'null'],
                            description: 'Inner vertical offset in pixels',
                            example: 0
                        }
                    },
                    description: 'Inner border configuration'
                },
                borderOuter: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/BorderInnerOuter'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Outer border configuration'
                },
                borderInner: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/BorderInnerOuter'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Inner border configuration'
                },
                decorations: {
                    type: ['object', 'null'],
                    properties: {
                        top: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/DecorationOptions'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Top decoration configuration'
                        },
                        right: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/DecorationOptions'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Right decoration configuration'
                        },
                        bottom: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/DecorationOptions'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Bottom decoration configuration'
                        },
                        left: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/DecorationOptions'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Left decoration configuration'
                        }
                    },
                    description: 'Border decorations configuration'
                }
            }
        }
    },
    required: ['borderOptions'],
    description: 'Border options configuration',
    example: {
        borderOptions: {
            hasBorder: true,
            thickness: 2,
            radius: '10px'
        }
    }
} as const;

export const $TextOptions = {
    type: 'object',
    properties: {
        value: {
            type: ['string', 'null'],
            description: 'Text value for all positions',
            example: 'Scan me'
        },
        topValue: {
            type: ['string', 'null'],
            description: 'Text value for the top position',
            example: 'Scan me!'
        },
        bottomValue: {
            type: ['string', 'null'],
            description: 'Text value for the bottom position',
            example: 'www.example.com'
        },
        rightValue: {
            type: ['string', 'null'],
            description: 'Text value for the right position',
            example: 'Product info'
        },
        leftValue: {
            type: ['string', 'null'],
            description: 'Text value for the left position',
            example: 'Contact us'
        }
    },
    additionalProperties: false,
    description: 'Text options configuration',
    example: {
        topValue: 'Scan me!',
        bottomValue: 'www.example.com'
    }
} as const;

export const $BaseCodeResponseWithAudit = {
    allOf: [
        {
            '$ref': '#/components/schemas/BaseCodeResponse'
        }
    ],
    properties: {
        createdByUser: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoMember'
                },
                {
                    type: 'null'
                }
            ],
            description: 'User who created the resource',
            nullable: true
        },
        updatedByUser: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoMember'
                },
                {
                    type: 'null'
                }
            ],
            description: 'User who last updated the resource',
            nullable: true
        },
        createdByApiKey: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoApiKey'
                },
                {
                    type: 'null'
                }
            ],
            description: 'API key used to create the resource',
            nullable: true
        },
        updatedByApiKey: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoApiKey'
                },
                {
                    type: 'null'
                }
            ],
            description: 'API key used to last update the resource',
            nullable: true
        },
        createdAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'When the resource was created',
            example: '2023-01-01T00:00:00Z',
            nullable: true
        },
        updatedAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'When the resource was last updated',
            example: '2023-01-01T00:00:00Z',
            nullable: true
        }
    },
    description: 'QR code response with audit information'
} as const;

export const $BaseCodeResponseWithAuditAndLinks = {
    allOf: [
        {
            '$ref': '#/components/schemas/BaseCodeResponseWithAudit'
        }
    ],
    properties: {
        links: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeFileLink'
            },
            description: 'Array of links to the QR code in different formats'
        }
    },
    description: 'QR code response with audit information and file links'
} as const;

export const $CodeFileLink = {
    type: 'object',
    properties: {
        format: {
            type: 'string',
            description: 'Format of the QR code file',
            example: 'svg'
        },
        url: {
            type: 'string',
            description: 'URL to access the QR code file',
            example: 'https://example.com/files/qr-code-123.svg'
        }
    },
    required: ['format', 'url'],
    description: 'QR code file link'
} as const;

export const $CodeResponse = {
    '$ref': '#/components/schemas/BaseCodeResponseWithAuditAndLinks',
    description: 'QR code response with audit information and file links'
} as const;

export const $CodeLinksResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier for the code link',
            example: 'cmaeeh20u0000ys0ptfsekbtc'
        },
        type: {
            type: 'string',
            description: 'Type of the link file',
            example: 'svg'
        },
        name: {
            type: 'string',
            description: 'Name of the link',
            example: 'Product QR - SVG'
        },
        url: {
            type: 'string',
            description: 'URL to access the file',
            example: 'https://example.com/files/qr-code-123.svg'
        },
        createdAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'When the resource was created',
            example: '2023-01-01T00:00:00Z',
            nullable: true
        },
        updatedAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'When the resource was last updated',
            example: '2023-01-01T00:00:00Z',
            nullable: true
        },
        createdByUserId: {
            type: ['string', 'null'],
            description: 'ID of the user who created the link',
            example: 'user_123abc',
            nullable: true
        },
        createdByApiKeyId: {
            type: ['string', 'null'],
            description: 'ID of the API key used to create the link',
            example: 'key_123abc',
            nullable: true
        },
        code: {
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: 'ID of the related code',
                    example: 'cmaeeh20u0000ys0ptfsekbtc'
                },
                name: {
                    type: ['string', 'null'],
                    description: 'Name of the related code',
                    example: 'Product Campaign QR',
                    nullable: true
                },
                data: {
                    type: 'string',
                    description: 'Data encoded in the QR code',
                    example: 'https://example.com/product'
                },
                description: {
                    type: ['string', 'null'],
                    description: 'Description of the related code',
                    example: 'QR code for our summer product campaign',
                    nullable: true
                }
            },
            required: ['id', 'name', 'data', 'description'],
            description: 'Associated QR code information'
        },
        version: {
            type: 'number',
            description: 'Version number of the code',
            example: 2
        },
        isCurrentVersion: {
            type: 'boolean',
            description: 'Whether this link is for the current version',
            example: true
        },
        createdByUser: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoMember'
                },
                {
                    type: 'null'
                }
            ],
            description: 'User who created the resource',
            nullable: true
        },
        updatedByUser: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoMember'
                },
                {
                    type: 'null'
                }
            ],
            description: 'User who last updated the resource',
            nullable: true
        },
        createdByApiKey: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoApiKey'
                },
                {
                    type: 'null'
                }
            ],
            description: 'API key used to create the resource',
            nullable: true
        },
        updatedByApiKey: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoApiKey'
                },
                {
                    type: 'null'
                }
            ],
            description: 'API key used to last update the resource',
            nullable: true
        }
    },
    required: ['id', 'type', 'name', 'url', 'createdByUserId', 'createdByApiKeyId', 'code']
} as const;

export const $CodeDataRequiredMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'QR code data is required'
        }
    },
    required: ['message'],
    description: 'Error response when the data for QR Code is missing'
} as const;

export const $CodeIsInvalidMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'QR Code is invalid'
        }
    },
    required: ['message'],
    description: 'Error response when the QR Code configuration is invalid'
} as const;

export const $InvalidCodeTypeMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'Invalid code type provided'
        }
    },
    required: ['message'],
    description: 'Error response when an invalid code type is provided'
} as const;

export const $DynamicDataForNewStaticCodeMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'Dynamic data is not allowed for static QR codes, you must explicitly set dynamicData to null or remove the dynamicData field from the request body'
        }
    },
    required: ['message'],
    description: 'Error response when a dynamic data is provided for a new static QR code'
} as const;

export const $DynamicDataRequiredMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'Dynamic QR codes require a dynamicData field to be set'
        }
    },
    required: ['message'],
    description: 'Error response when a dynamic data is required for a dynamic QR code'
} as const;

export const $ShortAliasAlreadyTakenMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'QR Code with same shortAlias already exists'
        }
    },
    required: ['message'],
    description: 'Error response when a QR Code with the specified short alias already exists'
} as const;

export const $ShortAliasForStaticCodeMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'Short alias is not allowed for static QR codes, you must explicitly set shortAlias to null or remove the shortAlias field from the request body'
        }
    },
    required: ['message'],
    description: 'Error response when a short alias is provided for a static QR code'
} as const;

export const $InfiniteRedirectLoopDetectedMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'Dynamic data URL cannot point to the redirect domain. Please use an external domain for the dynamicData URL'
        }
    },
    required: ['message'],
    description: 'Error response when a dynamic data points to the redirect domain'
} as const;

export const $DataTypeForStaticCodeMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'Data type is not allowed for static QR codes, you must explicitly set dataType to null or remove the dataType field from the request body'
        }
    },
    required: ['message'],
    description: 'Error response when a dataType is provided for a static QR code'
} as const;

export const $DataTypeForDynamicToStaticCodeMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'To convert from dynamic to static QR code, you must explicitly set dataType to null or remove the dataType field from the request body'
        }
    },
    required: ['message'],
    description: 'Error response when a dataType is provided for a dynamic to static QR code'
} as const;

export const $DataForDynamicCodeMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'Data is not allowed for dynamic QR codes, you must explicitly set data to null or remove the data field from the request body'
        }
    },
    required: ['message'],
    description: 'Error response when a data is provided for a dynamic QR code'
} as const;

export const $StyleNotFoundMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Style not found',
            description: 'The specified style could not be found'
        }
    },
    required: ['message'],
    description: 'Indicates that the specified style was not found'
} as const;

export const $TemplateNotFoundMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Template not found',
            description: 'The specified template could not be found'
        }
    },
    required: ['message'],
    description: 'Indicates that the specified template was not found'
} as const;

export const $BorderNotFoundMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Border not found',
            description: 'The specified border entity could not be found'
        }
    },
    required: ['message'],
    description: 'Indicates that the specified border entity was not found'
} as const;

export const $TextNotFoundMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Text not found',
            description: 'The specified text entity could not be found'
        }
    },
    required: ['message'],
    description: 'Indicates that the specified text entity was not found'
} as const;

export const $CreateCodeRequest = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['static', 'dynamic'],
            description: 'Type of QR code',
            example: 'dynamic'
        },
        dataType: {
            type: 'string',
            enum: ['url', 'wifi', 'vcard', 'text', 'email', 'event', 'json', 'file'],
            description: 'The type of data the QR code contains. Only applies to dynamic codes. Defaults to "url" for dynamic codes. Each dataType has specific content structure requirements. url: {url}, wifi: {ssid, password?, security?, hidden?}, vcard: {fullName?, email?, phone?, organization?}, text: {text}, email: {to, subject?, body?}, event: {eventTitle, startDate, endDate?, location?}, file: {fileName, fileUrl, mimeType?}, json: any valid JSON.',
            example: 'url'
        },
        dynamicData: {
            type: 'object',
            additionalProperties: {},
            description: 'Functional content for dynamic QR codes. Structure depends on dataType. url: {url}, wifi: {ssid, password?, security?, hidden?}, vcard: {fullName?, email?, phone?, organization?}, text: {text}, email: {to, subject?, body?}, event: {eventTitle, startDate, endDate?, location?}, file: {fileName, fileUrl, mimeType?}, json: any valid JSON.',
            example: {
                url: 'https://example.com'
            }
        },
        shortAlias: {
            type: 'string',
            minLength: 8,
            description: 'Short alias for the QR code link (URL-safe characters only)',
            example: 'my-qr-code'
        },
        data: {
            type: 'string',
            minLength: 3,
            description: 'QR code data content',
            example: 'https://example.com'
        },
        name: {
            type: 'string',
            minLength: 1,
            description: 'Name of the QR code',
            example: 'My QR Code'
        },
        description: {
            type: 'string',
            description: 'Optional description for the QR code',
            example: 'QR code for our product campaign'
        },
        metadata: {
            type: ['object', 'null'],
            additionalProperties: {},
            description: 'Custom user metadata for the QR code as JSON object. This is separate from the dynamicData field and can store any additional information about the QR code that is not part of the functional content (e.g., campaign info, tags, internal references).',
            nullable: true,
            example: {
                campaign: 'summer-sale',
                tags: ['marketing', 'promotion'],
                internalId: 'QR-001',
                budget: 5000
            }
        },
        linkFormat: {
            type: 'string',
            enum: ['svg', 'png', 'pdf'],
            description: 'Format for the generated QR code link',
            example: 'svg'
        },
        validate: {
            type: 'boolean',
            description: 'Whether to validate the QR code during creation',
            example: true
        },
        options: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/QRCodeOptionsWithOptionalData'
                },
                {
                    type: 'null'
                }
            ],
            description: 'QR code generation options'
        },
        styleId: {
            type: ['string', 'null'],
            description: 'Style ID to apply to the QR code',
            example: 'cmaeeh20u0000ys0ptfsekbtc',
            nullable: true
        },
        style: {
            anyOf: [
                {
                    type: ['object', 'null'],
                    properties: {
                        id: {
                            type: ['string', 'null']
                        },
                        options: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/StyleOptions'
                                },
                                {
                                    type: 'null'
                                }
                            ]
                        }
                    }
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Style object with options or style name string',
            nullable: true
        },
        templateId: {
            type: ['string', 'null'],
            description: 'Template ID to apply to the QR code',
            example: 'cmaeeh20u0000ys0ptfsekbtc',
            nullable: true
        },
        template: {
            anyOf: [
                {
                    type: ['object', 'null'],
                    properties: {
                        id: {
                            type: ['string', 'null']
                        },
                        options: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/QRCodeOptionsWithOptionalData'
                                },
                                {
                                    type: 'null'
                                }
                            ]
                        }
                    }
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Template object with options or template name string',
            nullable: true
        },
        borderId: {
            type: ['string', 'null'],
            description: 'Border ID to apply to the QR code',
            example: 'cmaeeh20u0000ys0ptfsekbtc',
            nullable: true
        },
        border: {
            anyOf: [
                {
                    type: ['object', 'null'],
                    properties: {
                        id: {
                            type: ['string', 'null']
                        },
                        options: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/BorderOptions'
                                },
                                {
                                    type: 'null'
                                }
                            ]
                        }
                    }
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Border object with options or border name string',
            nullable: true
        },
        textId: {
            type: ['string', 'null'],
            description: 'Text ID to apply to the QR code',
            example: 'cmaeeh20u0000ys0ptfsekbtc',
            nullable: true
        },
        text: {
            anyOf: [
                {
                    type: ['object', 'null'],
                    properties: {
                        id: {
                            type: ['string', 'null']
                        },
                        options: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/TextOptions'
                                },
                                {
                                    type: 'null'
                                }
                            ]
                        }
                    }
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Text object with options or text name string',
            nullable: true
        }
    },
    required: ['name']
} as const;

export const $CodeIsSoftDeletedMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'Cannot update a soft-deleted code. Please restore the code first'
        }
    },
    required: ['message'],
    description: 'Error response when attempting to update a soft-deleted code'
} as const;

export const $DynamicDataForStaticCodeMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'To convert from dynamic to static QR code, you must explicitly set dynamicData to null or remove the dynamicData field from the request body'
        }
    },
    required: ['message'],
    description: 'Error response when a dynamic data is provided for a static QR code'
} as const;

export const $ShortAliasForDynamicToStaticCodeMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'To convert from dynamic to static QR code, you must explicitly set shortAlias to null or remove the shortAlias field from the request body'
        }
    },
    required: ['message'],
    description: 'Error response when a short alias is provided for a dynamic to static QR code'
} as const;

export const $UpdateCodeRequest = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['static', 'dynamic'],
            description: 'Type of QR code',
            example: 'dynamic'
        },
        dataType: {
            type: ['string', 'null'],
            enum: ['url', 'wifi', 'vcard', 'text', 'email', 'event', 'json', 'file', null],
            description: 'The type of data the QR code contains. Only applies to dynamic codes. Determines how the QR code data is processed and what content type is returned when scanned. Each dataType has specific content structure requirements.',
            example: 'url'
        },
        dynamicData: {
            type: ['object', 'null'],
            additionalProperties: {},
            description: 'Functional content for dynamic QR codes. Structure depends on dataType. url: {url}, wifi: {ssid, password?, security?, hidden?}, vcard: {fullName?, email?, phone?, organization?}, text: {text}, email: {to, subject?, body?}, event: {eventTitle, startDate, endDate?, location?}, file: {fileName, fileUrl, mimeType?}, json: any valid JSON.',
            example: {
                url: 'https://example.com'
            }
        },
        shortAlias: {
            type: ['string', 'null'],
            minLength: 8,
            description: 'Short alias for the QR code link (URL-safe characters only)',
            example: 'my-qr-code'
        },
        data: {
            type: ['string', 'null'],
            minLength: 3,
            description: 'QR code data content',
            example: 'https://example.com'
        },
        options: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/QRCodeOptionsWithOptionalData'
                },
                {
                    type: 'null'
                }
            ],
            description: 'QR code generation options'
        },
        name: {
            type: 'string',
            description: 'Name of the QR code',
            example: 'My Updated QR Code'
        },
        description: {
            type: 'string',
            description: 'Description for the QR code',
            example: 'Updated description for the QR code'
        },
        metadata: {
            type: ['object', 'null'],
            additionalProperties: {},
            description: 'Custom user metadata for the QR code as JSON object. This is separate from the dynamicData field and can store any additional information about the QR code that is not part of the functional content (e.g., campaign info, tags, internal references).',
            example: {
                campaign: 'winter-sale',
                tags: ['marketing', 'social'],
                internalId: 'QR-002',
                department: 'Sales'
            },
            nullable: true
        },
        styleId: {
            type: ['string', 'null'],
            description: 'Style ID to apply to the QR code',
            example: 'cmaeeh20u0000ys0ptfsekbtc',
            nullable: true
        },
        style: {
            anyOf: [
                {
                    type: 'object',
                    properties: {
                        id: {
                            type: ['string', 'null']
                        },
                        name: {
                            type: ['string', 'null']
                        },
                        options: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/StyleOptions'
                                },
                                {
                                    type: 'null'
                                }
                            ]
                        }
                    }
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Style object with options or style name string',
            nullable: true
        },
        templateId: {
            type: ['string', 'null'],
            description: 'Template ID to apply to the QR code',
            example: 'cmaeeh20u0000ys0ptfsekbtc',
            nullable: true
        },
        template: {
            anyOf: [
                {
                    type: 'object',
                    properties: {
                        id: {
                            type: ['string', 'null']
                        },
                        name: {
                            type: ['string', 'null']
                        },
                        options: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/QRCodeOptionsWithOptionalData'
                                },
                                {
                                    type: 'null'
                                }
                            ]
                        }
                    }
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Template object with options or template name string',
            nullable: true
        },
        borderId: {
            type: ['string', 'null'],
            description: 'Border ID to apply to the QR code',
            example: 'cmaeeh20u0000ys0ptfsekbtc',
            nullable: true
        },
        border: {
            anyOf: [
                {
                    type: 'object',
                    properties: {
                        id: {
                            type: ['string', 'null']
                        },
                        name: {
                            type: ['string', 'null']
                        },
                        options: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/BorderOptions'
                                },
                                {
                                    type: 'null'
                                }
                            ]
                        }
                    }
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Border object with options or border name string',
            nullable: true
        },
        textId: {
            type: ['string', 'null'],
            description: 'Text ID to apply to the QR code',
            example: 'cmaeeh20u0000ys0ptfsekbtc',
            nullable: true
        },
        text: {
            anyOf: [
                {
                    type: 'object',
                    properties: {
                        id: {
                            type: ['string', 'null']
                        },
                        name: {
                            type: ['string', 'null']
                        },
                        options: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/TextOptions'
                                },
                                {
                                    type: 'null'
                                }
                            ]
                        }
                    }
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Text object with options or text name string',
            nullable: true
        },
        linkFormat: {
            type: 'string',
            enum: ['svg', 'png', 'pdf'],
            description: 'Format for the generated QR code link. Return existing link if generated before or create new link with provided format.',
            example: 'svg'
        },
        validate: {
            type: 'boolean',
            description: 'Whether to validate the QR code during update',
            example: true
        }
    }
} as const;

export const $UpdateOptionsFieldRequiredMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'At least one field within options must be provided for update'
        }
    },
    required: ['message'],
    description: 'Error response when at least one field within options is required for an update operation'
} as const;

export const $UpdateCodeOptionsRequest = {
    type: 'object',
    properties: {
        dataType: {
            type: 'string',
            enum: ['url', 'wifi', 'vcard', 'text', 'email', 'event', 'json', 'file'],
            description: 'The type of data the QR code contains. Only applies to dynamic codes. Determines how the QR code data is processed and what content type is returned when scanned.',
            example: 'url'
        },
        options: {
            type: 'object',
            properties: {
                data: {
                    type: 'string',
                    minLength: 3,
                    description: 'Data to encode in the QR code (required)',
                    example: 'https://example.com'
                },
                shape: {
                    type: ['string', 'null'],
                    enum: ['square', 'circle', null],
                    description: 'Shape of the QR code',
                    example: 'square'
                },
                margin: {
                    type: ['number', 'null']
                },
                isResponsive: {
                    type: ['boolean', 'null']
                },
                scale: {
                    type: ['number', 'null'],
                    minimum: 0,
                    maximum: 1.5
                },
                offset: {
                    type: ['number', 'null']
                },
                verticalOffset: {
                    type: ['number', 'null']
                },
                horizontalOffset: {
                    type: ['number', 'null']
                },
                qrOptions: {
                    type: ['object', 'null'],
                    properties: {
                        typeNumber: {
                            type: ['number', 'null'],
                            minimum: 0,
                            maximum: 40
                        },
                        mode: {
                            type: 'string',
                            enum: ['numeric', 'alphanumeric', 'byte', 'kanji', 'unicode'],
                            description: 'QR code encoding mode',
                            example: 'byte'
                        },
                        errorCorrectionLevel: {
                            type: ['string', 'null'],
                            enum: ['L', 'M', 'Q', 'H', null],
                            description: 'Error correction level (L: 7%, M: 15%, Q: 25%, H: 30%)',
                            example: 'M'
                        }
                    }
                },
                dotsOptions: {
                    type: ['object', 'null'],
                    properties: {
                        type: {
                            type: ['string', 'null'],
                            enum: ['dot', 'square', 'rounded', 'extra-rounded', 'classy', 'classy-rounded', 'vertical-line', 'horizontal-line', 'random-dot', 'small-square', 'tiny-square', 'star', 'plus', 'diamond', null],
                            description: 'Type of dots in QR code',
                            example: 'rounded'
                        },
                        color: {
                            type: ['string', 'null']
                        },
                        size: {
                            type: ['number', 'null']
                        },
                        gradient: {
                            type: ['object', 'null'],
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['linear', 'radial']
                                },
                                rotation: {
                                    type: 'number'
                                },
                                colorStops: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            offset: {
                                                type: 'number',
                                                minimum: 0,
                                                maximum: 1
                                            },
                                            color: {
                                                type: 'string'
                                            }
                                        },
                                        additionalProperties: false,
                                        description: 'Color stop in a gradient'
                                    },
                                    minItems: 2
                                }
                            },
                            additionalProperties: false,
                            description: 'Gradient definition'
                        }
                    }
                },
                cornersSquareOptions: {
                    type: ['object', 'null'],
                    properties: {
                        type: {
                            type: ['string', 'null'],
                            enum: ['dot', 'square', 'rounded', 'classy', 'outpoint', 'inpoint', null],
                            description: 'Type of corner squares in QR code',
                            example: 'square'
                        },
                        color: {
                            type: ['string', 'null']
                        },
                        gradient: {
                            type: ['object', 'null'],
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['linear', 'radial']
                                },
                                rotation: {
                                    type: 'number'
                                },
                                colorStops: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            offset: {
                                                type: 'number',
                                                minimum: 0,
                                                maximum: 1
                                            },
                                            color: {
                                                type: 'string'
                                            }
                                        },
                                        additionalProperties: false,
                                        description: 'Color stop in a gradient'
                                    },
                                    minItems: 2
                                }
                            },
                            additionalProperties: false,
                            description: 'Gradient definition'
                        }
                    }
                },
                cornersDotOptions: {
                    type: ['object', 'null'],
                    properties: {
                        type: {
                            type: ['string', 'null'],
                            enum: ['dot', 'square', 'heart', 'rounded', 'classy', 'outpoint', 'inpoint', null],
                            description: 'Type of corner dots in QR code',
                            example: 'dot'
                        },
                        color: {
                            type: ['string', 'null']
                        },
                        gradient: {
                            type: ['object', 'null'],
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['linear', 'radial']
                                },
                                rotation: {
                                    type: 'number'
                                },
                                colorStops: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            offset: {
                                                type: 'number',
                                                minimum: 0,
                                                maximum: 1
                                            },
                                            color: {
                                                type: 'string'
                                            }
                                        },
                                        additionalProperties: false,
                                        description: 'Color stop in a gradient'
                                    },
                                    minItems: 2
                                }
                            },
                            additionalProperties: false,
                            description: 'Gradient definition'
                        }
                    }
                },
                backgroundOptions: {
                    anyOf: [
                        {
                            type: 'object',
                            properties: {
                                color: {
                                    type: ['string', 'null'],
                                    description: 'Background color in CSS format',
                                    example: '#ffffff'
                                },
                                round: {
                                    anyOf: [
                                        {
                                            type: 'number',
                                            minimum: 0,
                                            maximum: 1
                                        },
                                        {
                                            type: 'string'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Background corner rounding (0-1 or CSS value)',
                                    example: 0.1
                                },
                                gradient: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/Gradient'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Gradient for background'
                                }
                            },
                            required: ['color']
                        },
                        {
                            type: 'boolean',
                            const: false
                        }
                    ]
                },
                image: {
                    anyOf: [
                        {
                            type: 'string'
                        },
                        {},
                        {},
                        {
                            type: 'null'
                        }
                    ]
                },
                imageOptions: {
                    type: ['object', 'null'],
                    properties: {
                        mode: {
                            type: ['string', 'null'],
                            enum: ['center', 'overlay', 'background', null],
                            description: 'Mode for embedding images in QR code',
                            example: 'center'
                        },
                        imageSize: {
                            type: ['number', 'null'],
                            minimum: 0,
                            maximum: 1
                        },
                        margin: {
                            type: ['number', 'null']
                        },
                        crossOrigin: {
                            type: ['string', 'null']
                        },
                        fill: {
                            type: ['object', 'null'],
                            properties: {
                                color: {
                                    type: ['string', 'null']
                                },
                                gradient: {
                                    type: ['object', 'null'],
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['linear', 'radial']
                                        },
                                        rotation: {
                                            type: 'number'
                                        },
                                        colorStops: {
                                            type: 'array',
                                            items: {
                                                type: 'object',
                                                properties: {
                                                    offset: {
                                                        type: 'number',
                                                        minimum: 0,
                                                        maximum: 1
                                                    },
                                                    color: {
                                                        type: 'string'
                                                    }
                                                },
                                                additionalProperties: false,
                                                description: 'Color stop in a gradient'
                                            },
                                            minItems: 2
                                        }
                                    },
                                    additionalProperties: false,
                                    description: 'Gradient definition'
                                }
                            }
                        }
                    }
                },
                borderOptions: {
                    type: ['object', 'null'],
                    properties: {
                        hasBorder: {
                            type: ['boolean', 'null']
                        },
                        thickness: {
                            type: ['number', 'null']
                        },
                        color: {
                            type: ['string', 'null']
                        },
                        radius: {
                            type: ['string', 'null']
                        },
                        noBorderThickness: {
                            type: ['number', 'null']
                        },
                        background: {
                            type: ['string', 'null']
                        },
                        inner: {
                            type: ['object', 'null'],
                            properties: {
                                radius: {
                                    type: ['string', 'null']
                                },
                                scale: {
                                    type: ['number', 'null'],
                                    minimum: 0,
                                    maximum: 1.5
                                },
                                horizontalOffset: {
                                    type: ['number', 'null']
                                },
                                verticalOffset: {
                                    type: ['number', 'null']
                                }
                            }
                        },
                        borderOuter: {
                            type: ['object', 'null'],
                            properties: {
                                color: {
                                    type: 'string'
                                },
                                thickness: {
                                    type: 'number'
                                }
                            },
                            additionalProperties: false,
                            description: 'Inner or outer border configuration'
                        },
                        borderInner: {
                            type: ['object', 'null'],
                            properties: {
                                color: {
                                    type: 'string'
                                },
                                thickness: {
                                    type: 'number'
                                }
                            },
                            additionalProperties: false,
                            description: 'Inner or outer border configuration'
                        },
                        decorations: {
                            type: ['object', 'null'],
                            properties: {
                                top: {
                                    type: ['object', 'null'],
                                    properties: {
                                        disabled: {
                                            type: 'boolean'
                                        },
                                        enableText: {
                                            type: 'boolean'
                                        },
                                        offset: {
                                            type: 'number'
                                        },
                                        curveAdjustment: {
                                            type: 'number'
                                        },
                                        curveDisabled: {
                                            type: 'boolean'
                                        },
                                        curveRadius: {
                                            type: 'string'
                                        },
                                        type: {
                                            type: 'string',
                                            enum: ['text', 'image']
                                        },
                                        value: {
                                            type: 'string'
                                        },
                                        style: {
                                            type: 'object',
                                            properties: {
                                                fontFace: {
                                                    type: 'string'
                                                },
                                                fontSize: {
                                                    type: 'number'
                                                },
                                                fontColor: {
                                                    type: 'string'
                                                },
                                                letterSpacing: {
                                                    type: 'number'
                                                },
                                                fontWeight: {
                                                    type: 'string',
                                                    enum: ['normal', 'bold']
                                                }
                                            },
                                            additionalProperties: false,
                                            description: 'Text decoration style'
                                        }
                                    },
                                    additionalProperties: false,
                                    description: 'Options for QR code decoration'
                                },
                                right: {
                                    type: ['object', 'null'],
                                    properties: {
                                        disabled: {
                                            type: 'boolean'
                                        },
                                        enableText: {
                                            type: 'boolean'
                                        },
                                        offset: {
                                            type: 'number'
                                        },
                                        curveAdjustment: {
                                            type: 'number'
                                        },
                                        curveDisabled: {
                                            type: 'boolean'
                                        },
                                        curveRadius: {
                                            type: 'string'
                                        },
                                        type: {
                                            type: 'string',
                                            enum: ['text', 'image']
                                        },
                                        value: {
                                            type: 'string'
                                        },
                                        style: {
                                            type: 'object',
                                            properties: {
                                                fontFace: {
                                                    type: 'string'
                                                },
                                                fontSize: {
                                                    type: 'number'
                                                },
                                                fontColor: {
                                                    type: 'string'
                                                },
                                                letterSpacing: {
                                                    type: 'number'
                                                },
                                                fontWeight: {
                                                    type: 'string',
                                                    enum: ['normal', 'bold']
                                                }
                                            },
                                            additionalProperties: false,
                                            description: 'Text decoration style'
                                        }
                                    },
                                    additionalProperties: false,
                                    description: 'Options for QR code decoration'
                                },
                                bottom: {
                                    type: ['object', 'null'],
                                    properties: {
                                        disabled: {
                                            type: 'boolean'
                                        },
                                        enableText: {
                                            type: 'boolean'
                                        },
                                        offset: {
                                            type: 'number'
                                        },
                                        curveAdjustment: {
                                            type: 'number'
                                        },
                                        curveDisabled: {
                                            type: 'boolean'
                                        },
                                        curveRadius: {
                                            type: 'string'
                                        },
                                        type: {
                                            type: 'string',
                                            enum: ['text', 'image']
                                        },
                                        value: {
                                            type: 'string'
                                        },
                                        style: {
                                            type: 'object',
                                            properties: {
                                                fontFace: {
                                                    type: 'string'
                                                },
                                                fontSize: {
                                                    type: 'number'
                                                },
                                                fontColor: {
                                                    type: 'string'
                                                },
                                                letterSpacing: {
                                                    type: 'number'
                                                },
                                                fontWeight: {
                                                    type: 'string',
                                                    enum: ['normal', 'bold']
                                                }
                                            },
                                            additionalProperties: false,
                                            description: 'Text decoration style'
                                        }
                                    },
                                    additionalProperties: false,
                                    description: 'Options for QR code decoration'
                                },
                                left: {
                                    type: ['object', 'null'],
                                    properties: {
                                        disabled: {
                                            type: 'boolean'
                                        },
                                        enableText: {
                                            type: 'boolean'
                                        },
                                        offset: {
                                            type: 'number'
                                        },
                                        curveAdjustment: {
                                            type: 'number'
                                        },
                                        curveDisabled: {
                                            type: 'boolean'
                                        },
                                        curveRadius: {
                                            type: 'string'
                                        },
                                        type: {
                                            type: 'string',
                                            enum: ['text', 'image']
                                        },
                                        value: {
                                            type: 'string'
                                        },
                                        style: {
                                            type: 'object',
                                            properties: {
                                                fontFace: {
                                                    type: 'string'
                                                },
                                                fontSize: {
                                                    type: 'number'
                                                },
                                                fontColor: {
                                                    type: 'string'
                                                },
                                                letterSpacing: {
                                                    type: 'number'
                                                },
                                                fontWeight: {
                                                    type: 'string',
                                                    enum: ['normal', 'bold']
                                                }
                                            },
                                            additionalProperties: false,
                                            description: 'Text decoration style'
                                        }
                                    },
                                    additionalProperties: false,
                                    description: 'Options for QR code decoration'
                                }
                            }
                        }
                    }
                }
            },
            description: 'Partial QR code generation options to update. All fields are optional. At least one option field must be provided.'
        },
        linkFormat: {
            type: 'string',
            enum: ['svg', 'png', 'pdf'],
            description: 'Format for the generated QR code link. Return existing link if generated before or create new link with provided format.',
            example: 'svg'
        },
        validate: {
            type: 'boolean',
            description: 'Whether to validate the QR code after updating options.',
            example: true
        }
    },
    required: ['options']
} as const;

export const $BulkPermanentDeleteCodesResponse = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            description: 'Success message for the bulk permanent deletion operation',
            example: 'QR Codes permanently deleted successfully'
        },
        details: {
            type: 'object',
            properties: {
                deleted: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    description: 'Array of code IDs that were successfully permanently deleted',
                    example: ['qr_code_id178', 'qr_code_id2469']
                },
                notFound: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    description: 'Array of code IDs that were not found',
                    example: ['qr_code_id1468', 'qr_code_id28668']
                },
                forbidden: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    description: 'Array of code IDs that user has no access to',
                    example: ['qr_code_id324', 'qr_code_id325t523']
                },
                failed: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    description: 'Array of code IDs that encountered errors during permanent deletion',
                    example: ['qr_code_id0909']
                }
            },
            required: ['deleted', 'notFound', 'forbidden', 'failed'],
            description: 'Detailed results categorized by outcome (only included when showDetails=true)'
        }
    },
    required: ['message']
} as const;

export const $CodeSoftDeleteResponse = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            description: 'Confirmation message',
            example: 'QR Code soft deleted successfully, you can restore it or delete permanently later'
        }
    },
    required: ['message']
} as const;

export const $CodeAlreadyDeletedMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'QR Code is already deleted'
        }
    },
    required: ['message'],
    description: 'Error response when a code is already deleted'
} as const;

export const $FileDeleteResponse = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            description: 'Confirmation message',
            example: 'File deleted successfully'
        }
    },
    required: ['message']
} as const;

export const $CodeNotSoftDeletedMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'QR Code is not soft deleted'
        }
    },
    required: ['message'],
    description: 'Error response when a code is not soft deleted'
} as const;

export const $CodeNotDeletedMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'QR Code is not deleted'
        }
    },
    required: ['message'],
    description: 'Error response when a code is not deleted'
} as const;

export const $BulkSoftDeleteCodesResponse = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            description: 'Success message for the bulk operation',
            example: 'QR Codes deleted successfully'
        },
        details: {
            type: 'object',
            properties: {
                deleted: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    description: 'Array of code IDs that were successfully soft deleted',
                    example: ['qr_code_id178', 'qr_code_id2469']
                },
                alreadyDeleted: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    description: 'Array of code IDs that were already soft deleted',
                    example: ['qr_code_id16494', 'qr_code_id23334']
                },
                notFound: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    description: 'Array of code IDs that were not found',
                    example: ['qr_code_id1468', 'qr_code_id28668']
                },
                forbidden: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    description: 'Array of code IDs that user has no access to',
                    example: ['qr_code_id324', 'qr_code_id325t523']
                },
                failed: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    description: 'Array of code IDs that encountered errors during deletion',
                    example: ['qr_code_id0909']
                }
            },
            required: ['deleted', 'alreadyDeleted', 'notFound', 'forbidden', 'failed'],
            description: 'Detailed results categorized by outcome (only included when showDetails=true)'
        }
    },
    required: ['message']
} as const;

export const $ValidationErrorResponseMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Validation Error'
        },
        errors: {
            type: 'array',
            items: {},
            example: []
        }
    },
    required: ['message'],
    description: 'Validation error response message'
} as const;

export const $GenerateCodeRequest = {
    type: 'object',
    properties: {
        data: {
            type: 'string',
            minLength: 3,
            description: 'QR code data content',
            example: 'https://example.com'
        },
        options: {
            type: 'object',
            properties: {
                shape: {
                    type: ['string', 'null'],
                    enum: ['square', 'circle', null],
                    description: 'Overall shape of the QR code',
                    example: 'square'
                },
                margin: {
                    type: ['number', 'null'],
                    description: 'Margin around the QR code in pixels',
                    example: 10
                },
                isResponsive: {
                    type: ['boolean', 'null'],
                    description: 'Whether QR code is responsive',
                    example: true
                },
                scale: {
                    type: ['number', 'null'],
                    minimum: 0,
                    maximum: 1.5,
                    description: 'Scale factor for QR code (0-1.5)',
                    example: 1
                },
                offset: {
                    type: ['number', 'null'],
                    description: 'General offset in pixels',
                    example: 0
                },
                verticalOffset: {
                    type: ['number', 'null'],
                    description: 'Vertical offset in pixels',
                    example: 0
                },
                horizontalOffset: {
                    type: ['number', 'null'],
                    description: 'Horizontal offset in pixels',
                    example: 0
                },
                qrOptions: {
                    type: ['object', 'null'],
                    properties: {
                        typeNumber: {
                            type: ['number', 'null'],
                            minimum: 0,
                            maximum: 40,
                            description: 'QR code type number (0-40)',
                            example: 0
                        },
                        mode: {
                            type: 'string',
                            enum: ['numeric', 'alphanumeric', 'byte', 'kanji', 'unicode'],
                            description: 'QR code encoding mode',
                            example: 'byte'
                        },
                        errorCorrectionLevel: {
                            type: ['string', 'null'],
                            enum: ['L', 'M', 'Q', 'H', null],
                            description: 'Error correction level',
                            example: 'M'
                        }
                    },
                    description: 'QR code specific options'
                },
                dotsOptions: {
                    type: ['object', 'null'],
                    properties: {
                        type: {
                            type: ['string', 'null'],
                            enum: ['dot', 'square', 'rounded', 'extra-rounded', 'classy', 'classy-rounded', 'vertical-line', 'horizontal-line', 'random-dot', 'small-square', 'tiny-square', 'star', 'plus', 'diamond', null],
                            description: 'Type of dots',
                            example: 'rounded'
                        },
                        color: {
                            type: ['string', 'null'],
                            description: 'Color of dots in CSS format',
                            example: '#000000'
                        },
                        size: {
                            type: ['number', 'null'],
                            description: 'Size of dots relative to module size (0-1)',
                            example: 0.5
                        },
                        gradient: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/Gradient'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Gradient for dots'
                        }
                    },
                    description: 'Options for QR code dots'
                },
                cornersSquareOptions: {
                    type: ['object', 'null'],
                    properties: {
                        type: {
                            type: ['string', 'null'],
                            enum: ['dot', 'square', 'rounded', 'classy', 'outpoint', 'inpoint', null],
                            description: 'Type of corner squares',
                            example: 'square'
                        },
                        color: {
                            type: ['string', 'null'],
                            description: 'Color of corner squares in CSS format',
                            example: '#000000'
                        },
                        gradient: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/Gradient'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Gradient for corner squares'
                        }
                    },
                    description: 'Options for QR code corner squares'
                },
                cornersDotOptions: {
                    type: ['object', 'null'],
                    properties: {
                        type: {
                            type: ['string', 'null'],
                            enum: ['dot', 'square', 'heart', 'rounded', 'classy', 'outpoint', 'inpoint', null],
                            description: 'Type of corner dots',
                            example: 'dot'
                        },
                        color: {
                            type: ['string', 'null'],
                            description: 'Color of corner dots in CSS format',
                            example: '#000000'
                        },
                        gradient: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/Gradient'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Gradient for corner dots'
                        }
                    },
                    description: 'Options for QR code corner dots'
                },
                backgroundOptions: {
                    anyOf: [
                        {
                            type: 'object',
                            properties: {
                                color: {
                                    type: ['string', 'null'],
                                    description: 'Background color in CSS format',
                                    example: '#ffffff'
                                },
                                round: {
                                    anyOf: [
                                        {
                                            type: 'number',
                                            minimum: 0,
                                            maximum: 1
                                        },
                                        {
                                            type: 'string'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Background corner rounding (0-1 or CSS value)',
                                    example: 0.1
                                },
                                gradient: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/Gradient'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Gradient for background'
                                }
                            },
                            required: ['color']
                        },
                        {
                            type: 'boolean',
                            const: false
                        }
                    ],
                    description: 'Options for QR code background or false to disable'
                },
                image: {
                    anyOf: [
                        {
                            type: 'string'
                        },
                        {},
                        {},
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Image to embed in the QR code (URL, Buffer, or Blob)',
                    example: 'https://example.com/logo.png'
                },
                imageOptions: {
                    type: ['object', 'null'],
                    properties: {
                        mode: {
                            type: ['string', 'null'],
                            enum: ['center', 'overlay', 'background', null],
                            description: 'Mode for embedded image',
                            example: 'center'
                        },
                        imageSize: {
                            type: ['number', 'null'],
                            minimum: 0,
                            maximum: 1,
                            description: 'Size of image relative to QR code (0-1)',
                            example: 0.2
                        },
                        margin: {
                            type: ['number', 'null'],
                            description: 'Margin around the image in pixels',
                            example: 5
                        },
                        crossOrigin: {
                            type: ['string', 'null'],
                            description: 'Cross-origin attribute for image',
                            example: 'anonymous'
                        },
                        fill: {
                            type: ['object', 'null'],
                            properties: {
                                color: {
                                    type: ['string', 'null'],
                                    description: 'Fill color in CSS format',
                                    example: '#ffffff'
                                },
                                gradient: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/Gradient'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Gradient for fill'
                                }
                            },
                            description: 'Fill options for image area'
                        }
                    },
                    description: 'Options for embedded image'
                },
                borderOptions: {
                    type: ['object', 'null'],
                    properties: {
                        hasBorder: {
                            type: ['boolean', 'null'],
                            description: 'Whether to show border',
                            example: true
                        },
                        thickness: {
                            type: ['number', 'null'],
                            description: 'Border thickness in pixels',
                            example: 2
                        },
                        color: {
                            type: ['string', 'null'],
                            description: 'Border color in CSS format',
                            example: '#000000'
                        },
                        radius: {
                            type: ['string', 'null'],
                            description: 'Border radius in CSS format',
                            example: '10px'
                        },
                        noBorderThickness: {
                            type: ['number', 'null'],
                            description: 'Thickness when no border is shown',
                            example: 0
                        },
                        background: {
                            type: ['string', 'null'],
                            description: 'Border background color in CSS format',
                            example: '#ffffff'
                        },
                        inner: {
                            type: ['object', 'null'],
                            properties: {
                                radius: {
                                    type: ['string', 'null'],
                                    description: 'Inner radius in CSS format',
                                    example: '5px'
                                },
                                scale: {
                                    type: ['number', 'null'],
                                    minimum: 0,
                                    maximum: 1.5,
                                    description: 'Inner scale factor (0-1.5)',
                                    example: 1
                                },
                                horizontalOffset: {
                                    type: ['number', 'null'],
                                    description: 'Inner horizontal offset in pixels',
                                    example: 0
                                },
                                verticalOffset: {
                                    type: ['number', 'null'],
                                    description: 'Inner vertical offset in pixels',
                                    example: 0
                                }
                            },
                            description: 'Inner border configuration'
                        },
                        borderOuter: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/BorderInnerOuter'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Outer border configuration'
                        },
                        borderInner: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/BorderInnerOuter'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Inner border configuration'
                        },
                        decorations: {
                            type: ['object', 'null'],
                            properties: {
                                top: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/DecorationOptions'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Top decoration configuration'
                                },
                                right: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/DecorationOptions'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Right decoration configuration'
                                },
                                bottom: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/DecorationOptions'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Bottom decoration configuration'
                                },
                                left: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/DecorationOptions'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Left decoration configuration'
                                }
                            },
                            description: 'Border decorations configuration'
                        }
                    },
                    description: 'Border configuration options'
                },
                data: {
                    type: 'string',
                    minLength: 3,
                    description: 'Data to encode in the QR code (optional in this context)',
                    example: 'https://example.com'
                }
            },
            description: 'QR code generation options'
        },
        styleId: {
            type: ['string', 'null'],
            description: 'Style ID to apply to the QR code',
            example: 'cmaeeh20u0000ys0ptfsekbtc',
            nullable: true
        },
        style: {
            anyOf: [
                {
                    type: ['object', 'null'],
                    properties: {
                        options: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/StyleOptions'
                                },
                                {
                                    type: 'null'
                                }
                            ]
                        }
                    }
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Style object with options or style name string',
            nullable: true
        },
        templateId: {
            type: ['string', 'null'],
            description: 'Template ID to apply to the QR code',
            example: 'cmaeeh20u0000ys0ptfsekbtc',
            nullable: true
        },
        template: {
            anyOf: [
                {
                    type: ['object', 'null'],
                    properties: {
                        options: {
                            type: ['object', 'null'],
                            properties: {
                                shape: {
                                    type: ['string', 'null'],
                                    enum: ['square', 'circle', null],
                                    description: 'Overall shape of the QR code',
                                    example: 'square'
                                },
                                margin: {
                                    type: ['number', 'null'],
                                    description: 'Margin around the QR code in pixels',
                                    example: 10
                                },
                                isResponsive: {
                                    type: ['boolean', 'null'],
                                    description: 'Whether QR code is responsive',
                                    example: true
                                },
                                scale: {
                                    type: ['number', 'null'],
                                    minimum: 0,
                                    maximum: 1.5,
                                    description: 'Scale factor for QR code (0-1.5)',
                                    example: 1
                                },
                                offset: {
                                    type: ['number', 'null'],
                                    description: 'General offset in pixels',
                                    example: 0
                                },
                                verticalOffset: {
                                    type: ['number', 'null'],
                                    description: 'Vertical offset in pixels',
                                    example: 0
                                },
                                horizontalOffset: {
                                    type: ['number', 'null'],
                                    description: 'Horizontal offset in pixels',
                                    example: 0
                                },
                                qrOptions: {
                                    type: ['object', 'null'],
                                    properties: {
                                        typeNumber: {
                                            type: ['number', 'null'],
                                            minimum: 0,
                                            maximum: 40,
                                            description: 'QR code type number (0-40)',
                                            example: 0
                                        },
                                        mode: {
                                            type: 'string',
                                            enum: ['numeric', 'alphanumeric', 'byte', 'kanji', 'unicode'],
                                            description: 'QR code encoding mode',
                                            example: 'byte'
                                        },
                                        errorCorrectionLevel: {
                                            type: ['string', 'null'],
                                            enum: ['L', 'M', 'Q', 'H', null],
                                            description: 'Error correction level',
                                            example: 'M'
                                        }
                                    },
                                    description: 'QR code specific options'
                                },
                                dotsOptions: {
                                    type: ['object', 'null'],
                                    properties: {
                                        type: {
                                            type: ['string', 'null'],
                                            enum: ['dot', 'square', 'rounded', 'extra-rounded', 'classy', 'classy-rounded', 'vertical-line', 'horizontal-line', 'random-dot', 'small-square', 'tiny-square', 'star', 'plus', 'diamond', null],
                                            description: 'Type of dots',
                                            example: 'rounded'
                                        },
                                        color: {
                                            type: ['string', 'null'],
                                            description: 'Color of dots in CSS format',
                                            example: '#000000'
                                        },
                                        size: {
                                            type: ['number', 'null'],
                                            description: 'Size of dots relative to module size (0-1)',
                                            example: 0.5
                                        },
                                        gradient: {
                                            oneOf: [
                                                {
                                                    '$ref': '#/components/schemas/Gradient'
                                                },
                                                {
                                                    type: 'null'
                                                }
                                            ],
                                            description: 'Gradient for dots'
                                        }
                                    },
                                    description: 'Options for QR code dots'
                                },
                                cornersSquareOptions: {
                                    type: ['object', 'null'],
                                    properties: {
                                        type: {
                                            type: ['string', 'null'],
                                            enum: ['dot', 'square', 'rounded', 'classy', 'outpoint', 'inpoint', null],
                                            description: 'Type of corner squares',
                                            example: 'square'
                                        },
                                        color: {
                                            type: ['string', 'null'],
                                            description: 'Color of corner squares in CSS format',
                                            example: '#000000'
                                        },
                                        gradient: {
                                            oneOf: [
                                                {
                                                    '$ref': '#/components/schemas/Gradient'
                                                },
                                                {
                                                    type: 'null'
                                                }
                                            ],
                                            description: 'Gradient for corner squares'
                                        }
                                    },
                                    description: 'Options for QR code corner squares'
                                },
                                cornersDotOptions: {
                                    type: ['object', 'null'],
                                    properties: {
                                        type: {
                                            type: ['string', 'null'],
                                            enum: ['dot', 'square', 'heart', 'rounded', 'classy', 'outpoint', 'inpoint', null],
                                            description: 'Type of corner dots',
                                            example: 'dot'
                                        },
                                        color: {
                                            type: ['string', 'null'],
                                            description: 'Color of corner dots in CSS format',
                                            example: '#000000'
                                        },
                                        gradient: {
                                            oneOf: [
                                                {
                                                    '$ref': '#/components/schemas/Gradient'
                                                },
                                                {
                                                    type: 'null'
                                                }
                                            ],
                                            description: 'Gradient for corner dots'
                                        }
                                    },
                                    description: 'Options for QR code corner dots'
                                },
                                backgroundOptions: {
                                    anyOf: [
                                        {
                                            type: 'object',
                                            properties: {
                                                color: {
                                                    type: ['string', 'null'],
                                                    description: 'Background color in CSS format',
                                                    example: '#ffffff'
                                                },
                                                round: {
                                                    anyOf: [
                                                        {
                                                            type: 'number',
                                                            minimum: 0,
                                                            maximum: 1
                                                        },
                                                        {
                                                            type: 'string'
                                                        },
                                                        {
                                                            type: 'null'
                                                        }
                                                    ],
                                                    description: 'Background corner rounding (0-1 or CSS value)',
                                                    example: 0.1
                                                },
                                                gradient: {
                                                    oneOf: [
                                                        {
                                                            '$ref': '#/components/schemas/Gradient'
                                                        },
                                                        {
                                                            type: 'null'
                                                        }
                                                    ],
                                                    description: 'Gradient for background'
                                                }
                                            },
                                            required: ['color']
                                        },
                                        {
                                            type: 'boolean',
                                            const: false
                                        }
                                    ],
                                    description: 'Options for QR code background or false to disable'
                                },
                                image: {
                                    anyOf: [
                                        {
                                            type: 'string'
                                        },
                                        {},
                                        {},
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Image to embed in the QR code (URL, Buffer, or Blob)',
                                    example: 'https://example.com/logo.png'
                                },
                                imageOptions: {
                                    type: ['object', 'null'],
                                    properties: {
                                        mode: {
                                            type: ['string', 'null'],
                                            enum: ['center', 'overlay', 'background', null],
                                            description: 'Mode for embedded image',
                                            example: 'center'
                                        },
                                        imageSize: {
                                            type: ['number', 'null'],
                                            minimum: 0,
                                            maximum: 1,
                                            description: 'Size of image relative to QR code (0-1)',
                                            example: 0.2
                                        },
                                        margin: {
                                            type: ['number', 'null'],
                                            description: 'Margin around the image in pixels',
                                            example: 5
                                        },
                                        crossOrigin: {
                                            type: ['string', 'null'],
                                            description: 'Cross-origin attribute for image',
                                            example: 'anonymous'
                                        },
                                        fill: {
                                            type: ['object', 'null'],
                                            properties: {
                                                color: {
                                                    type: ['string', 'null'],
                                                    description: 'Fill color in CSS format',
                                                    example: '#ffffff'
                                                },
                                                gradient: {
                                                    oneOf: [
                                                        {
                                                            '$ref': '#/components/schemas/Gradient'
                                                        },
                                                        {
                                                            type: 'null'
                                                        }
                                                    ],
                                                    description: 'Gradient for fill'
                                                }
                                            },
                                            description: 'Fill options for image area'
                                        }
                                    },
                                    description: 'Options for embedded image'
                                },
                                borderOptions: {
                                    type: ['object', 'null'],
                                    properties: {
                                        hasBorder: {
                                            type: ['boolean', 'null'],
                                            description: 'Whether to show border',
                                            example: true
                                        },
                                        thickness: {
                                            type: ['number', 'null'],
                                            description: 'Border thickness in pixels',
                                            example: 2
                                        },
                                        color: {
                                            type: ['string', 'null'],
                                            description: 'Border color in CSS format',
                                            example: '#000000'
                                        },
                                        radius: {
                                            type: ['string', 'null'],
                                            description: 'Border radius in CSS format',
                                            example: '10px'
                                        },
                                        noBorderThickness: {
                                            type: ['number', 'null'],
                                            description: 'Thickness when no border is shown',
                                            example: 0
                                        },
                                        background: {
                                            type: ['string', 'null'],
                                            description: 'Border background color in CSS format',
                                            example: '#ffffff'
                                        },
                                        inner: {
                                            type: ['object', 'null'],
                                            properties: {
                                                radius: {
                                                    type: ['string', 'null'],
                                                    description: 'Inner radius in CSS format',
                                                    example: '5px'
                                                },
                                                scale: {
                                                    type: ['number', 'null'],
                                                    minimum: 0,
                                                    maximum: 1.5,
                                                    description: 'Inner scale factor (0-1.5)',
                                                    example: 1
                                                },
                                                horizontalOffset: {
                                                    type: ['number', 'null'],
                                                    description: 'Inner horizontal offset in pixels',
                                                    example: 0
                                                },
                                                verticalOffset: {
                                                    type: ['number', 'null'],
                                                    description: 'Inner vertical offset in pixels',
                                                    example: 0
                                                }
                                            },
                                            description: 'Inner border configuration'
                                        },
                                        borderOuter: {
                                            oneOf: [
                                                {
                                                    '$ref': '#/components/schemas/BorderInnerOuter'
                                                },
                                                {
                                                    type: 'null'
                                                }
                                            ],
                                            description: 'Outer border configuration'
                                        },
                                        borderInner: {
                                            oneOf: [
                                                {
                                                    '$ref': '#/components/schemas/BorderInnerOuter'
                                                },
                                                {
                                                    type: 'null'
                                                }
                                            ],
                                            description: 'Inner border configuration'
                                        },
                                        decorations: {
                                            type: ['object', 'null'],
                                            properties: {
                                                top: {
                                                    oneOf: [
                                                        {
                                                            '$ref': '#/components/schemas/DecorationOptions'
                                                        },
                                                        {
                                                            type: 'null'
                                                        }
                                                    ],
                                                    description: 'Top decoration configuration'
                                                },
                                                right: {
                                                    oneOf: [
                                                        {
                                                            '$ref': '#/components/schemas/DecorationOptions'
                                                        },
                                                        {
                                                            type: 'null'
                                                        }
                                                    ],
                                                    description: 'Right decoration configuration'
                                                },
                                                bottom: {
                                                    oneOf: [
                                                        {
                                                            '$ref': '#/components/schemas/DecorationOptions'
                                                        },
                                                        {
                                                            type: 'null'
                                                        }
                                                    ],
                                                    description: 'Bottom decoration configuration'
                                                },
                                                left: {
                                                    oneOf: [
                                                        {
                                                            '$ref': '#/components/schemas/DecorationOptions'
                                                        },
                                                        {
                                                            type: 'null'
                                                        }
                                                    ],
                                                    description: 'Left decoration configuration'
                                                }
                                            },
                                            description: 'Border decorations configuration'
                                        }
                                    },
                                    description: 'Border configuration options'
                                }
                            },
                            description: 'Complete configuration for QR code generation'
                        }
                    }
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Template object with options or template ID string',
            nullable: true
        },
        borderId: {
            type: ['string', 'null'],
            description: 'Border ID to apply to the QR code',
            example: 'cmaeeh20u0000ys0ptfsekbtc',
            nullable: true
        },
        border: {
            anyOf: [
                {
                    type: ['object', 'null'],
                    properties: {
                        options: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/BorderOptions'
                                },
                                {
                                    type: 'null'
                                }
                            ]
                        }
                    }
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Border object with options or border ID string',
            nullable: true
        },
        textId: {
            type: ['string', 'null'],
            description: 'Text ID to apply to the QR code',
            example: 'cmaeeh20u0000ys0ptfsekbtc',
            nullable: true
        },
        text: {
            anyOf: [
                {
                    type: ['object', 'null'],
                    properties: {
                        options: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/TextOptions'
                                },
                                {
                                    type: 'null'
                                }
                            ]
                        }
                    }
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Text object with options or text ID string',
            nullable: true
        }
    }
} as const;

export const $CodeValidationResponse = {
    type: 'object',
    properties: {
        isValid: {
            type: 'boolean',
            description: 'Whether the QR code options are valid',
            example: true
        }
    },
    required: ['isValid']
} as const;

export const $ExistingCodeValidationResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier for the QR code',
            example: 'cmaeeh20u0000ys0ptfsekbtc'
        },
        isValid: {
            type: 'boolean',
            description: 'Whether the QR code is valid',
            example: true
        },
        validationDetails: {
            type: 'object',
            properties: {
                isInverted: {
                    type: 'boolean',
                    description: 'Boolean indicating if the QR code uses inverted colors',
                    example: false
                },
                data: {
                    type: ['string', 'null'],
                    description: 'The decoded data from the QR code',
                    example: 'https://example.com',
                    nullable: true
                },
                message: {
                    type: 'string',
                    description: 'Validation message explaining the result',
                    example: 'QR code validation successful'
                },
                attempts: {
                    type: ['number', 'null'],
                    description: 'Number of decoding attempts made',
                    example: 1
                },
                validator: {
                    type: 'string',
                    description: 'Identifier of the validation method used',
                    example: 'default'
                }
            },
            required: ['isInverted', 'message', 'validator'],
            description: 'Detailed validation results'
        }
    },
    required: ['id', 'isValid', 'validationDetails']
} as const;

export const $RefreshCodeLinksResponse = {
    type: 'object',
    properties: {
        success: {
            type: 'boolean',
            description: 'Whether the operation was successful',
            example: true
        },
        summary: {
            type: 'object',
            properties: {
                codeVersionsProcessed: {
                    type: 'number',
                    description: 'Number of code versions processed',
                    example: 32
                },
                filesRegenerated: {
                    type: 'number',
                    description: 'Number of files regenerated',
                    example: 96
                },
                errors: {
                    type: 'number',
                    description: 'Number of errors encountered',
                    example: 0
                }
            },
            required: ['codeVersionsProcessed', 'filesRegenerated', 'errors'],
            description: 'Summary of the regeneration operation'
        }
    },
    required: ['success', 'summary']
} as const;

export const $CodeVersionResponse = {
    '$ref': '#/components/schemas/BaseCodeResponseWithAuditAndLinks',
    description: 'QR code response with audit information and file links'
} as const;

export const $VersionNotFoundMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'QR Code version not found',
            description: 'The specified QR code version could not be found'
        }
    },
    required: ['message'],
    description: 'Indicates that the specified QR code version was not found'
} as const;

export const $CodeVersionsDeleteResponse = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            description: 'Confirmation message',
            example: 'QR Code versions deleted successfully'
        }
    },
    required: ['message']
} as const;

export const $FileUrlResponse = {
    type: 'object',
    properties: {
        url: {
            type: 'string',
            description: 'URL to access the generated file',
            example: 'https://example.com/files/qr-code-123.svg'
        }
    },
    required: ['url']
} as const;

export const $LinkNotFoundMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Link not found',
            description: 'The specified QR code link could not be found'
        }
    },
    required: ['message'],
    description: 'Indicates that the specified QR code link was not found'
} as const;

export const $CodeVersionLinkNotFoundForTypeMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'No link found for the specified file type for this code version'
        }
    },
    required: ['message'],
    description: 'Error response when no link is found for a specified file type for a code version'
} as const;

export const $CodeNoVersionsFoundForLinkDeletionMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'No code versions found to delete links from'
        }
    },
    required: ['message'],
    description: 'Error response when no code versions are found to delete links from'
} as const;

export const $CodeNoLinksOfTypeFoundForAnyVersionMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'No links of the specified file type found for any code version'
        }
    },
    required: ['message'],
    description: 'Error response when no links of a specified type are found for any code version'
} as const;

export const $TemplateResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier for the template',
            example: 'cmaeeh20u0000ys0ptfsekbtc'
        },
        name: {
            type: 'string',
            description: 'Name of the template',
            example: 'Marketing Template'
        },
        description: {
            type: ['string', 'null'],
            description: 'Description of the template',
            example: 'A template for marketing campaigns',
            nullable: true
        },
        options: {
            type: 'object',
            properties: {
                shape: {
                    type: ['string', 'null'],
                    enum: ['square', 'circle', null],
                    description: 'Overall shape of the QR code',
                    example: 'square'
                },
                margin: {
                    type: ['number', 'null'],
                    description: 'Margin around the QR code in pixels',
                    example: 10
                },
                isResponsive: {
                    type: ['boolean', 'null'],
                    description: 'Whether QR code is responsive',
                    example: true
                },
                scale: {
                    type: ['number', 'null'],
                    minimum: 0,
                    maximum: 1.5,
                    description: 'Scale factor for QR code (0-1.5)',
                    example: 1
                },
                offset: {
                    type: ['number', 'null'],
                    description: 'General offset in pixels',
                    example: 0
                },
                verticalOffset: {
                    type: ['number', 'null'],
                    description: 'Vertical offset in pixels',
                    example: 0
                },
                horizontalOffset: {
                    type: ['number', 'null'],
                    description: 'Horizontal offset in pixels',
                    example: 0
                },
                qrOptions: {
                    type: ['object', 'null'],
                    properties: {
                        typeNumber: {
                            type: ['number', 'null'],
                            minimum: 0,
                            maximum: 40,
                            description: 'QR code type number (0-40)',
                            example: 0
                        },
                        mode: {
                            type: 'string',
                            enum: ['numeric', 'alphanumeric', 'byte', 'kanji', 'unicode'],
                            description: 'QR code encoding mode',
                            example: 'byte'
                        },
                        errorCorrectionLevel: {
                            type: ['string', 'null'],
                            enum: ['L', 'M', 'Q', 'H', null],
                            description: 'Error correction level',
                            example: 'M'
                        }
                    },
                    description: 'QR code specific options'
                },
                dotsOptions: {
                    type: ['object', 'null'],
                    properties: {
                        type: {
                            type: ['string', 'null'],
                            enum: ['dot', 'square', 'rounded', 'extra-rounded', 'classy', 'classy-rounded', 'vertical-line', 'horizontal-line', 'random-dot', 'small-square', 'tiny-square', 'star', 'plus', 'diamond', null],
                            description: 'Type of dots',
                            example: 'rounded'
                        },
                        color: {
                            type: ['string', 'null'],
                            description: 'Color of dots in CSS format',
                            example: '#000000'
                        },
                        size: {
                            type: ['number', 'null'],
                            description: 'Size of dots relative to module size (0-1)',
                            example: 0.5
                        },
                        gradient: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/Gradient'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Gradient for dots'
                        }
                    },
                    description: 'Options for QR code dots'
                },
                cornersSquareOptions: {
                    type: ['object', 'null'],
                    properties: {
                        type: {
                            type: ['string', 'null'],
                            enum: ['dot', 'square', 'rounded', 'classy', 'outpoint', 'inpoint', null],
                            description: 'Type of corner squares',
                            example: 'square'
                        },
                        color: {
                            type: ['string', 'null'],
                            description: 'Color of corner squares in CSS format',
                            example: '#000000'
                        },
                        gradient: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/Gradient'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Gradient for corner squares'
                        }
                    },
                    description: 'Options for QR code corner squares'
                },
                cornersDotOptions: {
                    type: ['object', 'null'],
                    properties: {
                        type: {
                            type: ['string', 'null'],
                            enum: ['dot', 'square', 'heart', 'rounded', 'classy', 'outpoint', 'inpoint', null],
                            description: 'Type of corner dots',
                            example: 'dot'
                        },
                        color: {
                            type: ['string', 'null'],
                            description: 'Color of corner dots in CSS format',
                            example: '#000000'
                        },
                        gradient: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/Gradient'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Gradient for corner dots'
                        }
                    },
                    description: 'Options for QR code corner dots'
                },
                backgroundOptions: {
                    anyOf: [
                        {
                            type: 'object',
                            properties: {
                                color: {
                                    type: ['string', 'null'],
                                    description: 'Background color in CSS format',
                                    example: '#ffffff'
                                },
                                round: {
                                    anyOf: [
                                        {
                                            type: 'number',
                                            minimum: 0,
                                            maximum: 1
                                        },
                                        {
                                            type: 'string'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Background corner rounding (0-1 or CSS value)',
                                    example: 0.1
                                },
                                gradient: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/Gradient'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Gradient for background'
                                }
                            },
                            required: ['color']
                        },
                        {
                            type: 'boolean',
                            const: false
                        }
                    ],
                    description: 'Options for QR code background or false to disable'
                },
                image: {
                    anyOf: [
                        {
                            type: 'string'
                        },
                        {},
                        {},
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Image to embed in the QR code (URL, Buffer, or Blob)',
                    example: 'https://example.com/logo.png'
                },
                imageOptions: {
                    type: ['object', 'null'],
                    properties: {
                        mode: {
                            type: ['string', 'null'],
                            enum: ['center', 'overlay', 'background', null],
                            description: 'Mode for embedded image',
                            example: 'center'
                        },
                        imageSize: {
                            type: ['number', 'null'],
                            minimum: 0,
                            maximum: 1,
                            description: 'Size of image relative to QR code (0-1)',
                            example: 0.2
                        },
                        margin: {
                            type: ['number', 'null'],
                            description: 'Margin around the image in pixels',
                            example: 5
                        },
                        crossOrigin: {
                            type: ['string', 'null'],
                            description: 'Cross-origin attribute for image',
                            example: 'anonymous'
                        },
                        fill: {
                            type: ['object', 'null'],
                            properties: {
                                color: {
                                    type: ['string', 'null'],
                                    description: 'Fill color in CSS format',
                                    example: '#ffffff'
                                },
                                gradient: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/Gradient'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Gradient for fill'
                                }
                            },
                            description: 'Fill options for image area'
                        }
                    },
                    description: 'Options for embedded image'
                },
                borderOptions: {
                    type: ['object', 'null'],
                    properties: {
                        hasBorder: {
                            type: ['boolean', 'null'],
                            description: 'Whether to show border',
                            example: true
                        },
                        thickness: {
                            type: ['number', 'null'],
                            description: 'Border thickness in pixels',
                            example: 2
                        },
                        color: {
                            type: ['string', 'null'],
                            description: 'Border color in CSS format',
                            example: '#000000'
                        },
                        radius: {
                            type: ['string', 'null'],
                            description: 'Border radius in CSS format',
                            example: '10px'
                        },
                        noBorderThickness: {
                            type: ['number', 'null'],
                            description: 'Thickness when no border is shown',
                            example: 0
                        },
                        background: {
                            type: ['string', 'null'],
                            description: 'Border background color in CSS format',
                            example: '#ffffff'
                        },
                        inner: {
                            type: ['object', 'null'],
                            properties: {
                                radius: {
                                    type: ['string', 'null'],
                                    description: 'Inner radius in CSS format',
                                    example: '5px'
                                },
                                scale: {
                                    type: ['number', 'null'],
                                    minimum: 0,
                                    maximum: 1.5,
                                    description: 'Inner scale factor (0-1.5)',
                                    example: 1
                                },
                                horizontalOffset: {
                                    type: ['number', 'null'],
                                    description: 'Inner horizontal offset in pixels',
                                    example: 0
                                },
                                verticalOffset: {
                                    type: ['number', 'null'],
                                    description: 'Inner vertical offset in pixels',
                                    example: 0
                                }
                            },
                            description: 'Inner border configuration'
                        },
                        borderOuter: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/BorderInnerOuter'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Outer border configuration'
                        },
                        borderInner: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/BorderInnerOuter'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Inner border configuration'
                        },
                        decorations: {
                            type: ['object', 'null'],
                            properties: {
                                top: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/DecorationOptions'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Top decoration configuration'
                                },
                                right: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/DecorationOptions'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Right decoration configuration'
                                },
                                bottom: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/DecorationOptions'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Bottom decoration configuration'
                                },
                                left: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/DecorationOptions'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Left decoration configuration'
                                }
                            },
                            description: 'Border decorations configuration'
                        }
                    },
                    description: 'Border configuration options'
                }
            },
            description: 'QR code options for the template (without data field)'
        },
        metadata: {
            type: ['object', 'null'],
            additionalProperties: {},
            description: 'Custom metadata for the template as JSON object',
            example: {
                category: 'marketing',
                layout: 'modern',
                targetAudience: ['B2B', 'events'],
                settings: {
                    responsive: true,
                    highContrast: false
                }
            },
            nullable: true
        },
        workspaceId: {
            type: ['string', 'null'],
            description: 'Workspace ID if the template is workspace-specific',
            example: 'cmaeeh20u0000ys0ptfsekbtc',
            nullable: true
        },
        createdByUser: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoMember'
                },
                {
                    type: 'null'
                }
            ],
            description: 'User who created the resource',
            nullable: true
        },
        updatedByUser: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoMember'
                },
                {
                    type: 'null'
                }
            ],
            description: 'User who last updated the resource',
            nullable: true
        },
        createdByApiKey: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoApiKey'
                },
                {
                    type: 'null'
                }
            ],
            description: 'API key used to create the resource',
            nullable: true
        },
        updatedByApiKey: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoApiKey'
                },
                {
                    type: 'null'
                }
            ],
            description: 'API key used to last update the resource',
            nullable: true
        },
        createdAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'When the resource was created',
            example: '2023-01-01T00:00:00Z',
            nullable: true
        },
        updatedAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'When the resource was last updated',
            example: '2023-01-01T00:00:00Z',
            nullable: true
        }
    },
    required: ['id', 'name', 'options', 'metadata'],
    description: 'Response schema for a template'
} as const;

export const $OptionsRequiredMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Options are required and cannot be empty'
        }
    },
    required: ['message'],
    description: 'Error response when required options are missing for an operation'
} as const;

export const $TemplateNameTakenMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'Template name is already taken'
        }
    },
    required: ['message'],
    description: 'Error response when a template entity name is already taken within the scope (organization/workspace)'
} as const;

export const $TemplateBase = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            minLength: 1,
            maxLength: 100,
            description: 'Name of the template',
            example: 'Marketing Template'
        },
        description: {
            type: 'string',
            maxLength: 500,
            description: 'Description of the template',
            example: 'A template for marketing campaigns'
        },
        options: {
            type: 'object',
            properties: {
                shape: {
                    type: ['string', 'null'],
                    enum: ['square', 'circle', null],
                    description: 'Overall shape of the QR code',
                    example: 'square'
                },
                margin: {
                    type: ['number', 'null'],
                    description: 'Margin around the QR code in pixels',
                    example: 10
                },
                isResponsive: {
                    type: ['boolean', 'null'],
                    description: 'Whether QR code is responsive',
                    example: true
                },
                scale: {
                    type: ['number', 'null'],
                    minimum: 0,
                    maximum: 1.5,
                    description: 'Scale factor for QR code (0-1.5)',
                    example: 1
                },
                offset: {
                    type: ['number', 'null'],
                    description: 'General offset in pixels',
                    example: 0
                },
                verticalOffset: {
                    type: ['number', 'null'],
                    description: 'Vertical offset in pixels',
                    example: 0
                },
                horizontalOffset: {
                    type: ['number', 'null'],
                    description: 'Horizontal offset in pixels',
                    example: 0
                },
                qrOptions: {
                    type: ['object', 'null'],
                    properties: {
                        typeNumber: {
                            type: ['number', 'null'],
                            minimum: 0,
                            maximum: 40,
                            description: 'QR code type number (0-40)',
                            example: 0
                        },
                        mode: {
                            type: 'string',
                            enum: ['numeric', 'alphanumeric', 'byte', 'kanji', 'unicode'],
                            description: 'QR code encoding mode',
                            example: 'byte'
                        },
                        errorCorrectionLevel: {
                            type: ['string', 'null'],
                            enum: ['L', 'M', 'Q', 'H', null],
                            description: 'Error correction level',
                            example: 'M'
                        }
                    },
                    description: 'QR code specific options'
                },
                dotsOptions: {
                    type: ['object', 'null'],
                    properties: {
                        type: {
                            type: ['string', 'null'],
                            enum: ['dot', 'square', 'rounded', 'extra-rounded', 'classy', 'classy-rounded', 'vertical-line', 'horizontal-line', 'random-dot', 'small-square', 'tiny-square', 'star', 'plus', 'diamond', null],
                            description: 'Type of dots',
                            example: 'rounded'
                        },
                        color: {
                            type: ['string', 'null'],
                            description: 'Color of dots in CSS format',
                            example: '#000000'
                        },
                        size: {
                            type: ['number', 'null'],
                            description: 'Size of dots relative to module size (0-1)',
                            example: 0.5
                        },
                        gradient: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/Gradient'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Gradient for dots'
                        }
                    },
                    description: 'Options for QR code dots'
                },
                cornersSquareOptions: {
                    type: ['object', 'null'],
                    properties: {
                        type: {
                            type: ['string', 'null'],
                            enum: ['dot', 'square', 'rounded', 'classy', 'outpoint', 'inpoint', null],
                            description: 'Type of corner squares',
                            example: 'square'
                        },
                        color: {
                            type: ['string', 'null'],
                            description: 'Color of corner squares in CSS format',
                            example: '#000000'
                        },
                        gradient: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/Gradient'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Gradient for corner squares'
                        }
                    },
                    description: 'Options for QR code corner squares'
                },
                cornersDotOptions: {
                    type: ['object', 'null'],
                    properties: {
                        type: {
                            type: ['string', 'null'],
                            enum: ['dot', 'square', 'heart', 'rounded', 'classy', 'outpoint', 'inpoint', null],
                            description: 'Type of corner dots',
                            example: 'dot'
                        },
                        color: {
                            type: ['string', 'null'],
                            description: 'Color of corner dots in CSS format',
                            example: '#000000'
                        },
                        gradient: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/Gradient'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Gradient for corner dots'
                        }
                    },
                    description: 'Options for QR code corner dots'
                },
                backgroundOptions: {
                    anyOf: [
                        {
                            type: 'object',
                            properties: {
                                color: {
                                    type: ['string', 'null'],
                                    description: 'Background color in CSS format',
                                    example: '#ffffff'
                                },
                                round: {
                                    anyOf: [
                                        {
                                            type: 'number',
                                            minimum: 0,
                                            maximum: 1
                                        },
                                        {
                                            type: 'string'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Background corner rounding (0-1 or CSS value)',
                                    example: 0.1
                                },
                                gradient: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/Gradient'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Gradient for background'
                                }
                            },
                            required: ['color']
                        },
                        {
                            type: 'boolean',
                            const: false
                        }
                    ],
                    description: 'Options for QR code background or false to disable'
                },
                image: {
                    anyOf: [
                        {
                            type: 'string'
                        },
                        {},
                        {},
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Image to embed in the QR code (URL, Buffer, or Blob)',
                    example: 'https://example.com/logo.png'
                },
                imageOptions: {
                    type: ['object', 'null'],
                    properties: {
                        mode: {
                            type: ['string', 'null'],
                            enum: ['center', 'overlay', 'background', null],
                            description: 'Mode for embedded image',
                            example: 'center'
                        },
                        imageSize: {
                            type: ['number', 'null'],
                            minimum: 0,
                            maximum: 1,
                            description: 'Size of image relative to QR code (0-1)',
                            example: 0.2
                        },
                        margin: {
                            type: ['number', 'null'],
                            description: 'Margin around the image in pixels',
                            example: 5
                        },
                        crossOrigin: {
                            type: ['string', 'null'],
                            description: 'Cross-origin attribute for image',
                            example: 'anonymous'
                        },
                        fill: {
                            type: ['object', 'null'],
                            properties: {
                                color: {
                                    type: ['string', 'null'],
                                    description: 'Fill color in CSS format',
                                    example: '#ffffff'
                                },
                                gradient: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/Gradient'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Gradient for fill'
                                }
                            },
                            description: 'Fill options for image area'
                        }
                    },
                    description: 'Options for embedded image'
                },
                borderOptions: {
                    type: ['object', 'null'],
                    properties: {
                        hasBorder: {
                            type: ['boolean', 'null'],
                            description: 'Whether to show border',
                            example: true
                        },
                        thickness: {
                            type: ['number', 'null'],
                            description: 'Border thickness in pixels',
                            example: 2
                        },
                        color: {
                            type: ['string', 'null'],
                            description: 'Border color in CSS format',
                            example: '#000000'
                        },
                        radius: {
                            type: ['string', 'null'],
                            description: 'Border radius in CSS format',
                            example: '10px'
                        },
                        noBorderThickness: {
                            type: ['number', 'null'],
                            description: 'Thickness when no border is shown',
                            example: 0
                        },
                        background: {
                            type: ['string', 'null'],
                            description: 'Border background color in CSS format',
                            example: '#ffffff'
                        },
                        inner: {
                            type: ['object', 'null'],
                            properties: {
                                radius: {
                                    type: ['string', 'null'],
                                    description: 'Inner radius in CSS format',
                                    example: '5px'
                                },
                                scale: {
                                    type: ['number', 'null'],
                                    minimum: 0,
                                    maximum: 1.5,
                                    description: 'Inner scale factor (0-1.5)',
                                    example: 1
                                },
                                horizontalOffset: {
                                    type: ['number', 'null'],
                                    description: 'Inner horizontal offset in pixels',
                                    example: 0
                                },
                                verticalOffset: {
                                    type: ['number', 'null'],
                                    description: 'Inner vertical offset in pixels',
                                    example: 0
                                }
                            },
                            description: 'Inner border configuration'
                        },
                        borderOuter: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/BorderInnerOuter'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Outer border configuration'
                        },
                        borderInner: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/BorderInnerOuter'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Inner border configuration'
                        },
                        decorations: {
                            type: ['object', 'null'],
                            properties: {
                                top: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/DecorationOptions'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Top decoration configuration'
                                },
                                right: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/DecorationOptions'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Right decoration configuration'
                                },
                                bottom: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/DecorationOptions'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Bottom decoration configuration'
                                },
                                left: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/DecorationOptions'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Left decoration configuration'
                                }
                            },
                            description: 'Border decorations configuration'
                        }
                    },
                    description: 'Border configuration options'
                }
            },
            description: 'QR code options for the template (without data field)'
        },
        metadata: {
            type: ['object', 'null'],
            additionalProperties: {},
            description: 'Custom metadata for the template as JSON object',
            example: {
                category: 'marketing',
                layout: 'modern',
                targetAudience: ['B2B', 'events'],
                settings: {
                    responsive: true,
                    highContrast: false
                }
            },
            nullable: true
        },
        workspaceId: {
            type: ['string', 'null'],
            description: 'Workspace ID if the template is workspace-specific',
            example: 'cmaeeh20u0000ys0ptfsekbtc',
            nullable: true
        }
    },
    required: ['name', 'options'],
    description: 'Base template schema'
} as const;

export const $CreateTemplate = {
    '$ref': '#/components/schemas/TemplateBase',
    description: 'Schema for creating a new template'
} as const;

export const $GetTemplatesResponse = {
    type: 'object',
    properties: {
        organizations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TemplateResponse'
            },
            description: 'Templates available at the organization level'
        },
        workspaces: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TemplateResponse'
            },
            description: 'Templates available at the workspace level'
        }
    },
    required: ['organizations', 'workspaces'],
    description: 'Response schema for getting templates'
} as const;

export const $EmptyTemplatesOrgContextResponse = {
    type: 'object',
    properties: {
        organizations: {
            type: 'array',
            items: {},
            description: 'Should be empty or not present'
        },
        workspaces: {
            type: 'array',
            items: {},
            description: 'Should be empty or not present'
        }
    },
    required: ['organizations', 'workspaces'],
    description: 'Response body when no templates are found for the organization context'
} as const;

export const $BaseTemplates = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/BaseTemplate'
    },
    description: 'A list of predefined base templates'
} as const;

export const $BaseTemplate = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier of the base template',
            example: 'basic'
        },
        name: {
            type: 'string',
            description: 'Name of the base template',
            example: 'Basic'
        },
        options: {
            type: 'object',
            properties: {
                shape: {
                    type: ['string', 'null'],
                    enum: ['square', 'circle', null],
                    description: 'Overall shape of the QR code',
                    example: 'square'
                },
                margin: {
                    type: ['number', 'null'],
                    description: 'Margin around the QR code in pixels',
                    example: 10
                },
                isResponsive: {
                    type: ['boolean', 'null'],
                    description: 'Whether QR code is responsive',
                    example: true
                },
                scale: {
                    type: ['number', 'null'],
                    minimum: 0,
                    maximum: 1.5,
                    description: 'Scale factor for QR code (0-1.5)',
                    example: 1
                },
                offset: {
                    type: ['number', 'null'],
                    description: 'General offset in pixels',
                    example: 0
                },
                verticalOffset: {
                    type: ['number', 'null'],
                    description: 'Vertical offset in pixels',
                    example: 0
                },
                horizontalOffset: {
                    type: ['number', 'null'],
                    description: 'Horizontal offset in pixels',
                    example: 0
                },
                qrOptions: {
                    type: ['object', 'null'],
                    properties: {
                        typeNumber: {
                            type: ['number', 'null'],
                            minimum: 0,
                            maximum: 40,
                            description: 'QR code type number (0-40)',
                            example: 0
                        },
                        mode: {
                            type: 'string',
                            enum: ['numeric', 'alphanumeric', 'byte', 'kanji', 'unicode'],
                            description: 'QR code encoding mode',
                            example: 'byte'
                        },
                        errorCorrectionLevel: {
                            type: ['string', 'null'],
                            enum: ['L', 'M', 'Q', 'H', null],
                            description: 'Error correction level',
                            example: 'M'
                        }
                    },
                    description: 'QR code specific options'
                },
                dotsOptions: {
                    type: ['object', 'null'],
                    properties: {
                        type: {
                            type: ['string', 'null'],
                            enum: ['dot', 'square', 'rounded', 'extra-rounded', 'classy', 'classy-rounded', 'vertical-line', 'horizontal-line', 'random-dot', 'small-square', 'tiny-square', 'star', 'plus', 'diamond', null],
                            description: 'Type of dots',
                            example: 'rounded'
                        },
                        color: {
                            type: ['string', 'null'],
                            description: 'Color of dots in CSS format',
                            example: '#000000'
                        },
                        size: {
                            type: ['number', 'null'],
                            description: 'Size of dots relative to module size (0-1)',
                            example: 0.5
                        },
                        gradient: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/Gradient'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Gradient for dots'
                        }
                    },
                    description: 'Options for QR code dots'
                },
                cornersSquareOptions: {
                    type: ['object', 'null'],
                    properties: {
                        type: {
                            type: ['string', 'null'],
                            enum: ['dot', 'square', 'rounded', 'classy', 'outpoint', 'inpoint', null],
                            description: 'Type of corner squares',
                            example: 'square'
                        },
                        color: {
                            type: ['string', 'null'],
                            description: 'Color of corner squares in CSS format',
                            example: '#000000'
                        },
                        gradient: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/Gradient'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Gradient for corner squares'
                        }
                    },
                    description: 'Options for QR code corner squares'
                },
                cornersDotOptions: {
                    type: ['object', 'null'],
                    properties: {
                        type: {
                            type: ['string', 'null'],
                            enum: ['dot', 'square', 'heart', 'rounded', 'classy', 'outpoint', 'inpoint', null],
                            description: 'Type of corner dots',
                            example: 'dot'
                        },
                        color: {
                            type: ['string', 'null'],
                            description: 'Color of corner dots in CSS format',
                            example: '#000000'
                        },
                        gradient: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/Gradient'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Gradient for corner dots'
                        }
                    },
                    description: 'Options for QR code corner dots'
                },
                backgroundOptions: {
                    anyOf: [
                        {
                            type: 'object',
                            properties: {
                                color: {
                                    type: ['string', 'null'],
                                    description: 'Background color in CSS format',
                                    example: '#ffffff'
                                },
                                round: {
                                    anyOf: [
                                        {
                                            type: 'number',
                                            minimum: 0,
                                            maximum: 1
                                        },
                                        {
                                            type: 'string'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Background corner rounding (0-1 or CSS value)',
                                    example: 0.1
                                },
                                gradient: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/Gradient'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Gradient for background'
                                }
                            },
                            required: ['color']
                        },
                        {
                            type: 'boolean',
                            const: false
                        }
                    ],
                    description: 'Options for QR code background or false to disable'
                },
                image: {
                    anyOf: [
                        {
                            type: 'string'
                        },
                        {},
                        {},
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Image to embed in the QR code (URL, Buffer, or Blob)',
                    example: 'https://example.com/logo.png'
                },
                imageOptions: {
                    type: ['object', 'null'],
                    properties: {
                        mode: {
                            type: ['string', 'null'],
                            enum: ['center', 'overlay', 'background', null],
                            description: 'Mode for embedded image',
                            example: 'center'
                        },
                        imageSize: {
                            type: ['number', 'null'],
                            minimum: 0,
                            maximum: 1,
                            description: 'Size of image relative to QR code (0-1)',
                            example: 0.2
                        },
                        margin: {
                            type: ['number', 'null'],
                            description: 'Margin around the image in pixels',
                            example: 5
                        },
                        crossOrigin: {
                            type: ['string', 'null'],
                            description: 'Cross-origin attribute for image',
                            example: 'anonymous'
                        },
                        fill: {
                            type: ['object', 'null'],
                            properties: {
                                color: {
                                    type: ['string', 'null'],
                                    description: 'Fill color in CSS format',
                                    example: '#ffffff'
                                },
                                gradient: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/Gradient'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Gradient for fill'
                                }
                            },
                            description: 'Fill options for image area'
                        }
                    },
                    description: 'Options for embedded image'
                },
                borderOptions: {
                    type: ['object', 'null'],
                    properties: {
                        hasBorder: {
                            type: ['boolean', 'null'],
                            description: 'Whether to show border',
                            example: true
                        },
                        thickness: {
                            type: ['number', 'null'],
                            description: 'Border thickness in pixels',
                            example: 2
                        },
                        color: {
                            type: ['string', 'null'],
                            description: 'Border color in CSS format',
                            example: '#000000'
                        },
                        radius: {
                            type: ['string', 'null'],
                            description: 'Border radius in CSS format',
                            example: '10px'
                        },
                        noBorderThickness: {
                            type: ['number', 'null'],
                            description: 'Thickness when no border is shown',
                            example: 0
                        },
                        background: {
                            type: ['string', 'null'],
                            description: 'Border background color in CSS format',
                            example: '#ffffff'
                        },
                        inner: {
                            type: ['object', 'null'],
                            properties: {
                                radius: {
                                    type: ['string', 'null'],
                                    description: 'Inner radius in CSS format',
                                    example: '5px'
                                },
                                scale: {
                                    type: ['number', 'null'],
                                    minimum: 0,
                                    maximum: 1.5,
                                    description: 'Inner scale factor (0-1.5)',
                                    example: 1
                                },
                                horizontalOffset: {
                                    type: ['number', 'null'],
                                    description: 'Inner horizontal offset in pixels',
                                    example: 0
                                },
                                verticalOffset: {
                                    type: ['number', 'null'],
                                    description: 'Inner vertical offset in pixels',
                                    example: 0
                                }
                            },
                            description: 'Inner border configuration'
                        },
                        borderOuter: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/BorderInnerOuter'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Outer border configuration'
                        },
                        borderInner: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/BorderInnerOuter'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Inner border configuration'
                        },
                        decorations: {
                            type: ['object', 'null'],
                            properties: {
                                top: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/DecorationOptions'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Top decoration configuration'
                                },
                                right: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/DecorationOptions'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Right decoration configuration'
                                },
                                bottom: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/DecorationOptions'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Bottom decoration configuration'
                                },
                                left: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/DecorationOptions'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Left decoration configuration'
                                }
                            },
                            description: 'Border decorations configuration'
                        }
                    },
                    description: 'Border configuration options'
                }
            },
            description: 'QR code options for the template (without data field)'
        }
    },
    required: ['id', 'name', 'options'],
    description: 'A predefined base template that can be used as a template'
} as const;

export const $UpdateTemplate = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            minLength: 1,
            maxLength: 100,
            description: 'Name of the template',
            example: 'Updated Template Name'
        },
        description: {
            type: 'string',
            maxLength: 500,
            description: 'Description of the template',
            example: 'Updated description'
        },
        options: {
            type: 'object',
            properties: {
                shape: {
                    type: ['string', 'null'],
                    enum: ['square', 'circle', null],
                    description: 'Overall shape of the QR code',
                    example: 'square'
                },
                margin: {
                    type: ['number', 'null'],
                    description: 'Margin around the QR code in pixels',
                    example: 10
                },
                isResponsive: {
                    type: ['boolean', 'null'],
                    description: 'Whether QR code is responsive',
                    example: true
                },
                scale: {
                    type: ['number', 'null'],
                    minimum: 0,
                    maximum: 1.5,
                    description: 'Scale factor for QR code (0-1.5)',
                    example: 1
                },
                offset: {
                    type: ['number', 'null'],
                    description: 'General offset in pixels',
                    example: 0
                },
                verticalOffset: {
                    type: ['number', 'null'],
                    description: 'Vertical offset in pixels',
                    example: 0
                },
                horizontalOffset: {
                    type: ['number', 'null'],
                    description: 'Horizontal offset in pixels',
                    example: 0
                },
                qrOptions: {
                    type: ['object', 'null'],
                    properties: {
                        typeNumber: {
                            type: ['number', 'null'],
                            minimum: 0,
                            maximum: 40,
                            description: 'QR code type number (0-40)',
                            example: 0
                        },
                        mode: {
                            type: 'string',
                            enum: ['numeric', 'alphanumeric', 'byte', 'kanji', 'unicode'],
                            description: 'QR code encoding mode',
                            example: 'byte'
                        },
                        errorCorrectionLevel: {
                            type: ['string', 'null'],
                            enum: ['L', 'M', 'Q', 'H', null],
                            description: 'Error correction level',
                            example: 'M'
                        }
                    },
                    description: 'QR code specific options'
                },
                dotsOptions: {
                    type: ['object', 'null'],
                    properties: {
                        type: {
                            type: ['string', 'null'],
                            enum: ['dot', 'square', 'rounded', 'extra-rounded', 'classy', 'classy-rounded', 'vertical-line', 'horizontal-line', 'random-dot', 'small-square', 'tiny-square', 'star', 'plus', 'diamond', null],
                            description: 'Type of dots',
                            example: 'rounded'
                        },
                        color: {
                            type: ['string', 'null'],
                            description: 'Color of dots in CSS format',
                            example: '#000000'
                        },
                        size: {
                            type: ['number', 'null'],
                            description: 'Size of dots relative to module size (0-1)',
                            example: 0.5
                        },
                        gradient: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/Gradient'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Gradient for dots'
                        }
                    },
                    description: 'Options for QR code dots'
                },
                cornersSquareOptions: {
                    type: ['object', 'null'],
                    properties: {
                        type: {
                            type: ['string', 'null'],
                            enum: ['dot', 'square', 'rounded', 'classy', 'outpoint', 'inpoint', null],
                            description: 'Type of corner squares',
                            example: 'square'
                        },
                        color: {
                            type: ['string', 'null'],
                            description: 'Color of corner squares in CSS format',
                            example: '#000000'
                        },
                        gradient: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/Gradient'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Gradient for corner squares'
                        }
                    },
                    description: 'Options for QR code corner squares'
                },
                cornersDotOptions: {
                    type: ['object', 'null'],
                    properties: {
                        type: {
                            type: ['string', 'null'],
                            enum: ['dot', 'square', 'heart', 'rounded', 'classy', 'outpoint', 'inpoint', null],
                            description: 'Type of corner dots',
                            example: 'dot'
                        },
                        color: {
                            type: ['string', 'null'],
                            description: 'Color of corner dots in CSS format',
                            example: '#000000'
                        },
                        gradient: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/Gradient'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Gradient for corner dots'
                        }
                    },
                    description: 'Options for QR code corner dots'
                },
                backgroundOptions: {
                    anyOf: [
                        {
                            type: 'object',
                            properties: {
                                color: {
                                    type: ['string', 'null'],
                                    description: 'Background color in CSS format',
                                    example: '#ffffff'
                                },
                                round: {
                                    anyOf: [
                                        {
                                            type: 'number',
                                            minimum: 0,
                                            maximum: 1
                                        },
                                        {
                                            type: 'string'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Background corner rounding (0-1 or CSS value)',
                                    example: 0.1
                                },
                                gradient: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/Gradient'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Gradient for background'
                                }
                            },
                            required: ['color']
                        },
                        {
                            type: 'boolean',
                            const: false
                        }
                    ],
                    description: 'Options for QR code background or false to disable'
                },
                image: {
                    anyOf: [
                        {
                            type: 'string'
                        },
                        {},
                        {},
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Image to embed in the QR code (URL, Buffer, or Blob)',
                    example: 'https://example.com/logo.png'
                },
                imageOptions: {
                    type: ['object', 'null'],
                    properties: {
                        mode: {
                            type: ['string', 'null'],
                            enum: ['center', 'overlay', 'background', null],
                            description: 'Mode for embedded image',
                            example: 'center'
                        },
                        imageSize: {
                            type: ['number', 'null'],
                            minimum: 0,
                            maximum: 1,
                            description: 'Size of image relative to QR code (0-1)',
                            example: 0.2
                        },
                        margin: {
                            type: ['number', 'null'],
                            description: 'Margin around the image in pixels',
                            example: 5
                        },
                        crossOrigin: {
                            type: ['string', 'null'],
                            description: 'Cross-origin attribute for image',
                            example: 'anonymous'
                        },
                        fill: {
                            type: ['object', 'null'],
                            properties: {
                                color: {
                                    type: ['string', 'null'],
                                    description: 'Fill color in CSS format',
                                    example: '#ffffff'
                                },
                                gradient: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/Gradient'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Gradient for fill'
                                }
                            },
                            description: 'Fill options for image area'
                        }
                    },
                    description: 'Options for embedded image'
                },
                borderOptions: {
                    type: ['object', 'null'],
                    properties: {
                        hasBorder: {
                            type: ['boolean', 'null'],
                            description: 'Whether to show border',
                            example: true
                        },
                        thickness: {
                            type: ['number', 'null'],
                            description: 'Border thickness in pixels',
                            example: 2
                        },
                        color: {
                            type: ['string', 'null'],
                            description: 'Border color in CSS format',
                            example: '#000000'
                        },
                        radius: {
                            type: ['string', 'null'],
                            description: 'Border radius in CSS format',
                            example: '10px'
                        },
                        noBorderThickness: {
                            type: ['number', 'null'],
                            description: 'Thickness when no border is shown',
                            example: 0
                        },
                        background: {
                            type: ['string', 'null'],
                            description: 'Border background color in CSS format',
                            example: '#ffffff'
                        },
                        inner: {
                            type: ['object', 'null'],
                            properties: {
                                radius: {
                                    type: ['string', 'null'],
                                    description: 'Inner radius in CSS format',
                                    example: '5px'
                                },
                                scale: {
                                    type: ['number', 'null'],
                                    minimum: 0,
                                    maximum: 1.5,
                                    description: 'Inner scale factor (0-1.5)',
                                    example: 1
                                },
                                horizontalOffset: {
                                    type: ['number', 'null'],
                                    description: 'Inner horizontal offset in pixels',
                                    example: 0
                                },
                                verticalOffset: {
                                    type: ['number', 'null'],
                                    description: 'Inner vertical offset in pixels',
                                    example: 0
                                }
                            },
                            description: 'Inner border configuration'
                        },
                        borderOuter: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/BorderInnerOuter'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Outer border configuration'
                        },
                        borderInner: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/BorderInnerOuter'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Inner border configuration'
                        },
                        decorations: {
                            type: ['object', 'null'],
                            properties: {
                                top: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/DecorationOptions'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Top decoration configuration'
                                },
                                right: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/DecorationOptions'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Right decoration configuration'
                                },
                                bottom: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/DecorationOptions'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Bottom decoration configuration'
                                },
                                left: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/DecorationOptions'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Left decoration configuration'
                                }
                            },
                            description: 'Border decorations configuration'
                        }
                    },
                    description: 'Border configuration options'
                }
            },
            description: 'QR code options for the template (without data field)'
        },
        metadata: {
            type: ['object', 'null'],
            additionalProperties: {},
            description: 'Updated custom metadata for the template as JSON object',
            example: {
                category: 'premium',
                version: 'v2',
                lastModified: '2024-01-15'
            },
            nullable: true
        }
    },
    description: 'Schema for updating a template'
} as const;

export const $UpdateTemplateOptionsRequest = {
    type: 'object',
    properties: {
        options: {
            type: 'object',
            properties: {
                shape: {
                    type: ['string', 'null'],
                    enum: ['square', 'circle', null],
                    description: 'Shape of the QR code',
                    example: 'square'
                },
                margin: {
                    type: ['number', 'null']
                },
                isResponsive: {
                    type: ['boolean', 'null']
                },
                scale: {
                    type: ['number', 'null'],
                    minimum: 0,
                    maximum: 1.5
                },
                offset: {
                    type: ['number', 'null']
                },
                verticalOffset: {
                    type: ['number', 'null']
                },
                horizontalOffset: {
                    type: ['number', 'null']
                },
                qrOptions: {
                    type: ['object', 'null'],
                    properties: {
                        typeNumber: {
                            type: ['number', 'null'],
                            minimum: 0,
                            maximum: 40
                        },
                        mode: {
                            type: 'string',
                            enum: ['numeric', 'alphanumeric', 'byte', 'kanji', 'unicode'],
                            description: 'QR code encoding mode',
                            example: 'byte'
                        },
                        errorCorrectionLevel: {
                            type: ['string', 'null'],
                            enum: ['L', 'M', 'Q', 'H', null],
                            description: 'Error correction level (L: 7%, M: 15%, Q: 25%, H: 30%)',
                            example: 'M'
                        }
                    }
                },
                dotsOptions: {
                    type: ['object', 'null'],
                    properties: {
                        type: {
                            type: ['string', 'null'],
                            enum: ['dot', 'square', 'rounded', 'extra-rounded', 'classy', 'classy-rounded', 'vertical-line', 'horizontal-line', 'random-dot', 'small-square', 'tiny-square', 'star', 'plus', 'diamond', null],
                            description: 'Type of dots in QR code',
                            example: 'rounded'
                        },
                        color: {
                            type: ['string', 'null']
                        },
                        size: {
                            type: ['number', 'null']
                        },
                        gradient: {
                            type: ['object', 'null'],
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['linear', 'radial']
                                },
                                rotation: {
                                    type: 'number'
                                },
                                colorStops: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            offset: {
                                                type: 'number',
                                                minimum: 0,
                                                maximum: 1
                                            },
                                            color: {
                                                type: 'string'
                                            }
                                        },
                                        additionalProperties: false,
                                        description: 'Color stop in a gradient'
                                    },
                                    minItems: 2
                                }
                            },
                            additionalProperties: false,
                            description: 'Gradient definition'
                        }
                    }
                },
                cornersSquareOptions: {
                    type: ['object', 'null'],
                    properties: {
                        type: {
                            type: ['string', 'null'],
                            enum: ['dot', 'square', 'rounded', 'classy', 'outpoint', 'inpoint', null],
                            description: 'Type of corner squares in QR code',
                            example: 'square'
                        },
                        color: {
                            type: ['string', 'null']
                        },
                        gradient: {
                            type: ['object', 'null'],
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['linear', 'radial']
                                },
                                rotation: {
                                    type: 'number'
                                },
                                colorStops: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            offset: {
                                                type: 'number',
                                                minimum: 0,
                                                maximum: 1
                                            },
                                            color: {
                                                type: 'string'
                                            }
                                        },
                                        additionalProperties: false,
                                        description: 'Color stop in a gradient'
                                    },
                                    minItems: 2
                                }
                            },
                            additionalProperties: false,
                            description: 'Gradient definition'
                        }
                    }
                },
                cornersDotOptions: {
                    type: ['object', 'null'],
                    properties: {
                        type: {
                            type: ['string', 'null'],
                            enum: ['dot', 'square', 'heart', 'rounded', 'classy', 'outpoint', 'inpoint', null],
                            description: 'Type of corner dots in QR code',
                            example: 'dot'
                        },
                        color: {
                            type: ['string', 'null']
                        },
                        gradient: {
                            type: ['object', 'null'],
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['linear', 'radial']
                                },
                                rotation: {
                                    type: 'number'
                                },
                                colorStops: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            offset: {
                                                type: 'number',
                                                minimum: 0,
                                                maximum: 1
                                            },
                                            color: {
                                                type: 'string'
                                            }
                                        },
                                        additionalProperties: false,
                                        description: 'Color stop in a gradient'
                                    },
                                    minItems: 2
                                }
                            },
                            additionalProperties: false,
                            description: 'Gradient definition'
                        }
                    }
                },
                backgroundOptions: {
                    anyOf: [
                        {
                            type: 'object',
                            properties: {
                                color: {
                                    type: ['string', 'null'],
                                    description: 'Background color in CSS format',
                                    example: '#ffffff'
                                },
                                round: {
                                    anyOf: [
                                        {
                                            type: 'number',
                                            minimum: 0,
                                            maximum: 1
                                        },
                                        {
                                            type: 'string'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Background corner rounding (0-1 or CSS value)',
                                    example: 0.1
                                },
                                gradient: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/Gradient'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Gradient for background'
                                }
                            },
                            required: ['color']
                        },
                        {
                            type: 'boolean',
                            const: false
                        }
                    ]
                },
                image: {
                    anyOf: [
                        {
                            type: 'string'
                        },
                        {},
                        {},
                        {
                            type: 'null'
                        }
                    ]
                },
                imageOptions: {
                    type: ['object', 'null'],
                    properties: {
                        mode: {
                            type: ['string', 'null'],
                            enum: ['center', 'overlay', 'background', null],
                            description: 'Mode for embedding images in QR code',
                            example: 'center'
                        },
                        imageSize: {
                            type: ['number', 'null'],
                            minimum: 0,
                            maximum: 1
                        },
                        margin: {
                            type: ['number', 'null']
                        },
                        crossOrigin: {
                            type: ['string', 'null']
                        },
                        fill: {
                            type: ['object', 'null'],
                            properties: {
                                color: {
                                    type: ['string', 'null']
                                },
                                gradient: {
                                    type: ['object', 'null'],
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['linear', 'radial']
                                        },
                                        rotation: {
                                            type: 'number'
                                        },
                                        colorStops: {
                                            type: 'array',
                                            items: {
                                                type: 'object',
                                                properties: {
                                                    offset: {
                                                        type: 'number',
                                                        minimum: 0,
                                                        maximum: 1
                                                    },
                                                    color: {
                                                        type: 'string'
                                                    }
                                                },
                                                additionalProperties: false,
                                                description: 'Color stop in a gradient'
                                            },
                                            minItems: 2
                                        }
                                    },
                                    additionalProperties: false,
                                    description: 'Gradient definition'
                                }
                            }
                        }
                    }
                },
                borderOptions: {
                    type: ['object', 'null'],
                    properties: {
                        hasBorder: {
                            type: ['boolean', 'null']
                        },
                        thickness: {
                            type: ['number', 'null']
                        },
                        color: {
                            type: ['string', 'null']
                        },
                        radius: {
                            type: ['string', 'null']
                        },
                        noBorderThickness: {
                            type: ['number', 'null']
                        },
                        background: {
                            type: ['string', 'null']
                        },
                        inner: {
                            type: ['object', 'null'],
                            properties: {
                                radius: {
                                    type: ['string', 'null']
                                },
                                scale: {
                                    type: ['number', 'null'],
                                    minimum: 0,
                                    maximum: 1.5
                                },
                                horizontalOffset: {
                                    type: ['number', 'null']
                                },
                                verticalOffset: {
                                    type: ['number', 'null']
                                }
                            }
                        },
                        borderOuter: {
                            type: ['object', 'null'],
                            properties: {
                                color: {
                                    type: 'string'
                                },
                                thickness: {
                                    type: 'number'
                                }
                            },
                            additionalProperties: false,
                            description: 'Inner or outer border configuration'
                        },
                        borderInner: {
                            type: ['object', 'null'],
                            properties: {
                                color: {
                                    type: 'string'
                                },
                                thickness: {
                                    type: 'number'
                                }
                            },
                            additionalProperties: false,
                            description: 'Inner or outer border configuration'
                        },
                        decorations: {
                            type: ['object', 'null'],
                            properties: {
                                top: {
                                    type: ['object', 'null'],
                                    properties: {
                                        disabled: {
                                            type: 'boolean'
                                        },
                                        enableText: {
                                            type: 'boolean'
                                        },
                                        offset: {
                                            type: 'number'
                                        },
                                        curveAdjustment: {
                                            type: 'number'
                                        },
                                        curveDisabled: {
                                            type: 'boolean'
                                        },
                                        curveRadius: {
                                            type: 'string'
                                        },
                                        type: {
                                            type: 'string',
                                            enum: ['text', 'image']
                                        },
                                        value: {
                                            type: 'string'
                                        },
                                        style: {
                                            type: 'object',
                                            properties: {
                                                fontFace: {
                                                    type: 'string'
                                                },
                                                fontSize: {
                                                    type: 'number'
                                                },
                                                fontColor: {
                                                    type: 'string'
                                                },
                                                letterSpacing: {
                                                    type: 'number'
                                                },
                                                fontWeight: {
                                                    type: 'string',
                                                    enum: ['normal', 'bold']
                                                }
                                            },
                                            additionalProperties: false,
                                            description: 'Text decoration style'
                                        }
                                    },
                                    additionalProperties: false,
                                    description: 'Options for QR code decoration'
                                },
                                right: {
                                    type: ['object', 'null'],
                                    properties: {
                                        disabled: {
                                            type: 'boolean'
                                        },
                                        enableText: {
                                            type: 'boolean'
                                        },
                                        offset: {
                                            type: 'number'
                                        },
                                        curveAdjustment: {
                                            type: 'number'
                                        },
                                        curveDisabled: {
                                            type: 'boolean'
                                        },
                                        curveRadius: {
                                            type: 'string'
                                        },
                                        type: {
                                            type: 'string',
                                            enum: ['text', 'image']
                                        },
                                        value: {
                                            type: 'string'
                                        },
                                        style: {
                                            type: 'object',
                                            properties: {
                                                fontFace: {
                                                    type: 'string'
                                                },
                                                fontSize: {
                                                    type: 'number'
                                                },
                                                fontColor: {
                                                    type: 'string'
                                                },
                                                letterSpacing: {
                                                    type: 'number'
                                                },
                                                fontWeight: {
                                                    type: 'string',
                                                    enum: ['normal', 'bold']
                                                }
                                            },
                                            additionalProperties: false,
                                            description: 'Text decoration style'
                                        }
                                    },
                                    additionalProperties: false,
                                    description: 'Options for QR code decoration'
                                },
                                bottom: {
                                    type: ['object', 'null'],
                                    properties: {
                                        disabled: {
                                            type: 'boolean'
                                        },
                                        enableText: {
                                            type: 'boolean'
                                        },
                                        offset: {
                                            type: 'number'
                                        },
                                        curveAdjustment: {
                                            type: 'number'
                                        },
                                        curveDisabled: {
                                            type: 'boolean'
                                        },
                                        curveRadius: {
                                            type: 'string'
                                        },
                                        type: {
                                            type: 'string',
                                            enum: ['text', 'image']
                                        },
                                        value: {
                                            type: 'string'
                                        },
                                        style: {
                                            type: 'object',
                                            properties: {
                                                fontFace: {
                                                    type: 'string'
                                                },
                                                fontSize: {
                                                    type: 'number'
                                                },
                                                fontColor: {
                                                    type: 'string'
                                                },
                                                letterSpacing: {
                                                    type: 'number'
                                                },
                                                fontWeight: {
                                                    type: 'string',
                                                    enum: ['normal', 'bold']
                                                }
                                            },
                                            additionalProperties: false,
                                            description: 'Text decoration style'
                                        }
                                    },
                                    additionalProperties: false,
                                    description: 'Options for QR code decoration'
                                },
                                left: {
                                    type: ['object', 'null'],
                                    properties: {
                                        disabled: {
                                            type: 'boolean'
                                        },
                                        enableText: {
                                            type: 'boolean'
                                        },
                                        offset: {
                                            type: 'number'
                                        },
                                        curveAdjustment: {
                                            type: 'number'
                                        },
                                        curveDisabled: {
                                            type: 'boolean'
                                        },
                                        curveRadius: {
                                            type: 'string'
                                        },
                                        type: {
                                            type: 'string',
                                            enum: ['text', 'image']
                                        },
                                        value: {
                                            type: 'string'
                                        },
                                        style: {
                                            type: 'object',
                                            properties: {
                                                fontFace: {
                                                    type: 'string'
                                                },
                                                fontSize: {
                                                    type: 'number'
                                                },
                                                fontColor: {
                                                    type: 'string'
                                                },
                                                letterSpacing: {
                                                    type: 'number'
                                                },
                                                fontWeight: {
                                                    type: 'string',
                                                    enum: ['normal', 'bold']
                                                }
                                            },
                                            additionalProperties: false,
                                            description: 'Text decoration style'
                                        }
                                    },
                                    additionalProperties: false,
                                    description: 'Options for QR code decoration'
                                }
                            }
                        }
                    }
                }
            },
            description: 'Partial QR code options for the template (without data field) to update. All fields are optional. Use null as a value to delete a field. At least one option field must be provided.'
        }
    },
    required: ['options']
} as const;

export const $ResourceInUseMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Resource is currently in use and cannot be deleted or modified in that way'
        }
    },
    required: ['message'],
    description: 'Error response when a resource cannot be modified/deleted because it is in use'
} as const;

export const $TemplateArrayResponse = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/TemplateResponse'
    },
    description: 'Array of template responses'
} as const;

export const $StyleResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier of the style',
            example: 'cmaeeh20u0000ys0ptfsekbtc'
        },
        name: {
            type: 'string',
            description: 'Name of the style',
            example: 'Corporate Brand Style'
        },
        description: {
            type: ['string', 'null'],
            description: 'Description of the style',
            example: 'Official corporate branding style for QR codes'
        },
        options: {
            type: 'object',
            properties: {
                primaryColor: {
                    type: ['string', 'null'],
                    description: 'Primary color for QR code elements in CSS format',
                    example: '#000000'
                },
                secondaryColor: {
                    type: ['string', 'null'],
                    description: 'Secondary color for QR code elements in CSS format',
                    example: '#ffffff'
                },
                thirdColor: {
                    type: ['string', 'null'],
                    description: 'Tertiary color for QR code elements in CSS format',
                    example: '#cccccc'
                },
                backgroundColor: {
                    type: ['string', 'null'],
                    description: 'Background color of the QR code in CSS format',
                    example: '#ffffff'
                },
                dotsGradient: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/Gradient'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Gradient configuration for QR code dots'
                },
                cornersDotGradient: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/Gradient'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Gradient configuration for corner dots'
                },
                cornersGradient: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/Gradient'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Gradient configuration for corners'
                },
                backgroundGradient: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/Gradient'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Gradient configuration for QR code background'
                },
                dotShape: {
                    type: ['string', 'null'],
                    enum: ['dot', 'square', 'rounded', 'extra-rounded', 'classy', 'classy-rounded', 'vertical-line', 'horizontal-line', 'random-dot', 'small-square', 'tiny-square', 'star', 'plus', 'diamond', null],
                    description: 'Shape style for the QR code dots',
                    example: 'rounded'
                },
                cornerSquareShape: {
                    type: ['string', 'null'],
                    enum: ['dot', 'square', 'rounded', 'classy', 'outpoint', 'inpoint', null],
                    description: 'Shape style for the QR code corner squares',
                    example: 'square'
                },
                cornerDotShape: {
                    type: ['string', 'null'],
                    enum: ['dot', 'square', 'heart', 'rounded', 'classy', 'outpoint', 'inpoint', null],
                    description: 'Shape style for the QR code corner dots',
                    example: 'dot'
                },
                logo: {
                    anyOf: [
                        {
                            type: 'string'
                        },
                        {},
                        {},
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Logo to be placed on the QR code (URL, Base64, Buffer, or Blob)',
                    example: 'https://example.com/logo.png'
                },
                logoSize: {
                    type: ['number', 'null'],
                    minimum: 0,
                    maximum: 1,
                    description: 'Size of the logo relative to QR code (0-1)',
                    example: 0.2
                },
                logoMode: {
                    type: ['string', 'null'],
                    enum: ['center', 'overlay', 'background', null],
                    description: 'Placement mode for the logo',
                    example: 'center'
                },
                logoMargin: {
                    type: ['number', 'null'],
                    description: 'Margin around the logo in pixels',
                    example: 5
                },
                logoBackgroundColor: {
                    type: ['string', 'null'],
                    description: 'Background color for logo in CSS format',
                    example: '#ffffff'
                },
                logoPadding: {
                    type: ['number', 'null'],
                    description: 'Padding around the logo in pixels',
                    example: 2
                },
                logoRadius: {
                    anyOf: [
                        {
                            type: 'string'
                        },
                        {
                            type: 'number'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Border radius for logo in pixels or CSS format',
                    example: '5px'
                },
                borderColor: {
                    type: ['string', 'null'],
                    description: 'Color of the QR code border in CSS format',
                    example: '#000000'
                },
                borderThickness: {
                    type: ['number', 'null'],
                    description: 'Thickness of the border in pixels',
                    example: 4
                },
                borderRadius: {
                    anyOf: [
                        {
                            type: 'string'
                        },
                        {
                            type: 'number'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Border radius in pixels or CSS format',
                    example: '10px'
                },
                borderInnerColor: {
                    type: ['string', 'null'],
                    description: 'Color of the inner border in CSS format',
                    example: '#000000'
                },
                borderInnerThickness: {
                    type: ['number', 'null'],
                    description: 'Thickness of the inner border in pixels',
                    example: 2
                },
                borderInnerRadius: {
                    anyOf: [
                        {
                            type: 'string'
                        },
                        {
                            type: 'number'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Inner border radius in pixels or CSS format',
                    example: '8px'
                },
                borderOuterColor: {
                    type: ['string', 'null'],
                    description: 'Color of the outer border in CSS format',
                    example: '#000000'
                },
                borderOuterThickness: {
                    type: ['number', 'null'],
                    description: 'Thickness of the outer border in pixels',
                    example: 4
                },
                borderTextTop: {
                    type: ['string', 'null'],
                    description: 'Text to display on top border',
                    example: 'Scan me'
                },
                borderTextRight: {
                    type: ['string', 'null'],
                    description: 'Text to display on right border',
                    example: 'Visit our website'
                },
                borderTextBottom: {
                    type: ['string', 'null'],
                    description: 'Text to display on bottom border',
                    example: 'www.example.com'
                },
                borderTextLeft: {
                    type: ['string', 'null'],
                    description: 'Text to display on left border',
                    example: 'Premium QR'
                },
                borderFontFace: {
                    type: ['string', 'null'],
                    description: 'Font family for border text',
                    example: 'Arial, sans-serif'
                },
                borderFontSize: {
                    type: ['number', 'null'],
                    description: 'Font size for border text in pixels',
                    example: 14
                },
                borderFontColor: {
                    type: ['string', 'null'],
                    description: 'Font color for border text in CSS format',
                    example: '#000000'
                },
                borderLetterSpacing: {
                    type: ['number', 'null'],
                    description: 'Letter spacing for border text in pixels',
                    example: 1
                },
                borderTextTransform: {
                    type: ['string', 'null'],
                    enum: ['uppercase', 'lowercase', 'capitalize', null],
                    description: 'Text transformation for border text',
                    example: 'uppercase'
                },
                borderFontWeight: {
                    type: 'string',
                    description: 'Font weight for border text',
                    example: 'bold'
                }
            },
            additionalProperties: false,
            description: 'Style configuration options'
        },
        metadata: {
            type: ['object', 'null'],
            additionalProperties: {},
            description: 'Custom metadata for the style as JSON object',
            example: {
                category: 'corporate',
                designSystem: 'v2',
                colors: ['#000000', '#ffffff']
            },
            nullable: true
        },
        workspaceId: {
            type: ['string', 'null'],
            description: 'ID of the workspace this style belongs to (null for organization-level styles)',
            example: 'cmaeeh20u0000ys0ptfsekbtc'
        },
        createdByUser: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoMember'
                },
                {
                    type: 'null'
                }
            ],
            description: 'User who created the resource',
            nullable: true
        },
        updatedByUser: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoMember'
                },
                {
                    type: 'null'
                }
            ],
            description: 'User who last updated the resource',
            nullable: true
        },
        createdByApiKey: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoApiKey'
                },
                {
                    type: 'null'
                }
            ],
            description: 'API key used to create the resource',
            nullable: true
        },
        updatedByApiKey: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoApiKey'
                },
                {
                    type: 'null'
                }
            ],
            description: 'API key used to last update the resource',
            nullable: true
        },
        createdAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'When the resource was created',
            example: '2023-01-01T00:00:00Z',
            nullable: true
        },
        updatedAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'When the resource was last updated',
            example: '2023-01-01T00:00:00Z',
            nullable: true
        }
    },
    required: ['id', 'name', 'options', 'metadata'],
    description: 'Style data returned in API responses'
} as const;

export const $StyleNameTakenMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            const: 'Style name is already taken'
        }
    },
    required: ['message'],
    description: 'Error response when a style entity name is already taken within the scope (organization/workspace)'
} as const;

export const $StyleBase = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            minLength: 1,
            maxLength: 100,
            description: 'Name of the style',
            example: 'Corporate Brand Style'
        },
        description: {
            type: 'string',
            maxLength: 500,
            description: 'Description of the style',
            example: 'Official corporate branding style for QR codes'
        },
        options: {
            '$ref': '#/components/schemas/StyleOptions',
            description: 'Style configuration options'
        },
        metadata: {
            type: ['object', 'null'],
            additionalProperties: {},
            description: 'Custom metadata for the style as JSON object',
            example: {
                category: 'corporate',
                designSystem: 'v2',
                colors: ['#000000', '#ffffff']
            },
            nullable: true
        },
        workspaceId: {
            type: ['string', 'null'],
            description: 'ID of the workspace this style belongs to (null for organization-level styles)',
            example: 'cmaeeh20u0000ys0ptfsekbtc'
        }
    },
    required: ['name', 'options'],
    description: 'Base schema for style definitions'
} as const;

export const $CreateStyle = {
    '$ref': '#/components/schemas/StyleBase',
    description: 'Schema for creating a new style'
} as const;

export const $BaseStyles = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/BaseStyle'
    },
    description: 'A list of predefined base styles'
} as const;

export const $BaseStyle = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier of the base style',
            example: 'basic'
        },
        name: {
            type: 'string',
            description: 'Name of the base style',
            example: 'Basic'
        },
        options: {
            type: 'object',
            properties: {
                primaryColor: {
                    type: ['string', 'null'],
                    description: 'Primary color for QR code elements in CSS format',
                    example: '#000000'
                },
                secondaryColor: {
                    type: ['string', 'null'],
                    description: 'Secondary color for QR code elements in CSS format',
                    example: '#ffffff'
                },
                thirdColor: {
                    type: ['string', 'null'],
                    description: 'Tertiary color for QR code elements in CSS format',
                    example: '#cccccc'
                },
                backgroundColor: {
                    type: ['string', 'null'],
                    description: 'Background color of the QR code in CSS format',
                    example: '#ffffff'
                },
                dotsGradient: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/Gradient'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Gradient configuration for QR code dots'
                },
                cornersDotGradient: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/Gradient'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Gradient configuration for corner dots'
                },
                cornersGradient: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/Gradient'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Gradient configuration for corners'
                },
                backgroundGradient: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/Gradient'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Gradient configuration for QR code background'
                },
                dotShape: {
                    type: ['string', 'null'],
                    enum: ['dot', 'square', 'rounded', 'extra-rounded', 'classy', 'classy-rounded', 'vertical-line', 'horizontal-line', 'random-dot', 'small-square', 'tiny-square', 'star', 'plus', 'diamond', null],
                    description: 'Shape style for the QR code dots',
                    example: 'rounded'
                },
                cornerSquareShape: {
                    type: ['string', 'null'],
                    enum: ['dot', 'square', 'rounded', 'classy', 'outpoint', 'inpoint', null],
                    description: 'Shape style for the QR code corner squares',
                    example: 'square'
                },
                cornerDotShape: {
                    type: ['string', 'null'],
                    enum: ['dot', 'square', 'heart', 'rounded', 'classy', 'outpoint', 'inpoint', null],
                    description: 'Shape style for the QR code corner dots',
                    example: 'dot'
                },
                logo: {
                    anyOf: [
                        {
                            type: 'string'
                        },
                        {},
                        {},
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Logo to be placed on the QR code (URL, Base64, Buffer, or Blob)',
                    example: 'https://example.com/logo.png'
                },
                logoSize: {
                    type: ['number', 'null'],
                    minimum: 0,
                    maximum: 1,
                    description: 'Size of the logo relative to QR code (0-1)',
                    example: 0.2
                },
                logoMode: {
                    type: ['string', 'null'],
                    enum: ['center', 'overlay', 'background', null],
                    description: 'Placement mode for the logo',
                    example: 'center'
                },
                logoMargin: {
                    type: ['number', 'null'],
                    description: 'Margin around the logo in pixels',
                    example: 5
                },
                logoBackgroundColor: {
                    type: ['string', 'null'],
                    description: 'Background color for logo in CSS format',
                    example: '#ffffff'
                },
                logoPadding: {
                    type: ['number', 'null'],
                    description: 'Padding around the logo in pixels',
                    example: 2
                },
                logoRadius: {
                    anyOf: [
                        {
                            type: 'string'
                        },
                        {
                            type: 'number'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Border radius for logo in pixels or CSS format',
                    example: '5px'
                },
                borderColor: {
                    type: ['string', 'null'],
                    description: 'Color of the QR code border in CSS format',
                    example: '#000000'
                },
                borderThickness: {
                    type: ['number', 'null'],
                    description: 'Thickness of the border in pixels',
                    example: 4
                },
                borderRadius: {
                    anyOf: [
                        {
                            type: 'string'
                        },
                        {
                            type: 'number'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Border radius in pixels or CSS format',
                    example: '10px'
                },
                borderInnerColor: {
                    type: ['string', 'null'],
                    description: 'Color of the inner border in CSS format',
                    example: '#000000'
                },
                borderInnerThickness: {
                    type: ['number', 'null'],
                    description: 'Thickness of the inner border in pixels',
                    example: 2
                },
                borderInnerRadius: {
                    anyOf: [
                        {
                            type: 'string'
                        },
                        {
                            type: 'number'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Inner border radius in pixels or CSS format',
                    example: '8px'
                },
                borderOuterColor: {
                    type: ['string', 'null'],
                    description: 'Color of the outer border in CSS format',
                    example: '#000000'
                },
                borderOuterThickness: {
                    type: ['number', 'null'],
                    description: 'Thickness of the outer border in pixels',
                    example: 4
                },
                borderTextTop: {
                    type: ['string', 'null'],
                    description: 'Text to display on top border',
                    example: 'Scan me'
                },
                borderTextRight: {
                    type: ['string', 'null'],
                    description: 'Text to display on right border',
                    example: 'Visit our website'
                },
                borderTextBottom: {
                    type: ['string', 'null'],
                    description: 'Text to display on bottom border',
                    example: 'www.example.com'
                },
                borderTextLeft: {
                    type: ['string', 'null'],
                    description: 'Text to display on left border',
                    example: 'Premium QR'
                },
                borderFontFace: {
                    type: ['string', 'null'],
                    description: 'Font family for border text',
                    example: 'Arial, sans-serif'
                },
                borderFontSize: {
                    type: ['number', 'null'],
                    description: 'Font size for border text in pixels',
                    example: 14
                },
                borderFontColor: {
                    type: ['string', 'null'],
                    description: 'Font color for border text in CSS format',
                    example: '#000000'
                },
                borderLetterSpacing: {
                    type: ['number', 'null'],
                    description: 'Letter spacing for border text in pixels',
                    example: 1
                },
                borderTextTransform: {
                    type: ['string', 'null'],
                    enum: ['uppercase', 'lowercase', 'capitalize', null],
                    description: 'Text transformation for border text',
                    example: 'uppercase'
                },
                borderFontWeight: {
                    type: 'string',
                    description: 'Font weight for border text',
                    example: 'bold'
                }
            },
            additionalProperties: false,
            description: 'Style configuration options'
        }
    },
    required: ['id', 'name', 'options'],
    description: 'A predefined base style that can be used as a template'
} as const;

export const $GetStylesResponse = {
    type: 'object',
    properties: {
        organizations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StyleResponse'
            },
            description: 'Organization-level styles'
        },
        workspaces: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StyleResponse'
            },
            description: 'Workspace-level styles'
        }
    },
    required: ['organizations', 'workspaces'],
    description: 'Response containing organization and workspace styles'
} as const;

export const $EmptyStylesOrgContextResponse = {
    type: 'object',
    properties: {
        organizations: {
            type: 'array',
            items: {},
            description: 'Should be empty or not present'
        },
        workspaces: {
            type: 'array',
            items: {},
            description: 'Should be empty or not present'
        }
    },
    required: ['organizations', 'workspaces'],
    description: 'Response body when no styles are found for the organization context'
} as const;

export const $UpdateStyle = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            minLength: 1,
            maxLength: 100,
            description: 'Updated name of the style',
            example: 'Updated Corporate Style'
        },
        description: {
            type: 'string',
            maxLength: 500,
            description: 'Updated description of the style',
            example: 'Updated corporate branding style for QR codes'
        },
        options: {
            '$ref': '#/components/schemas/StyleOptions',
            description: 'Updated style configuration options'
        },
        metadata: {
            type: ['object', 'null'],
            additionalProperties: {},
            description: 'Updated custom metadata for the style as JSON object',
            example: {
                category: 'premium',
                designVersion: 'v3',
                lastModified: '2024-01-15'
            },
            nullable: true
        }
    },
    description: 'Schema for updating an existing style'
} as const;

export const $UpdateStyleOptionsRequest = {
    type: 'object',
    properties: {
        options: {
            type: 'object',
            properties: {
                primaryColor: {
                    type: ['string', 'null']
                },
                secondaryColor: {
                    type: ['string', 'null']
                },
                thirdColor: {
                    type: ['string', 'null']
                },
                backgroundColor: {
                    type: ['string', 'null']
                },
                dotsGradient: {
                    type: ['object', 'null'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['linear', 'radial']
                        },
                        rotation: {
                            type: 'number'
                        },
                        colorStops: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    offset: {
                                        type: 'number',
                                        minimum: 0,
                                        maximum: 1
                                    },
                                    color: {
                                        type: 'string'
                                    }
                                },
                                additionalProperties: false,
                                description: 'Color stop in a gradient'
                            },
                            minItems: 2
                        }
                    },
                    additionalProperties: false,
                    description: 'Gradient definition'
                },
                cornersDotGradient: {
                    type: ['object', 'null'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['linear', 'radial']
                        },
                        rotation: {
                            type: 'number'
                        },
                        colorStops: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    offset: {
                                        type: 'number',
                                        minimum: 0,
                                        maximum: 1
                                    },
                                    color: {
                                        type: 'string'
                                    }
                                },
                                additionalProperties: false,
                                description: 'Color stop in a gradient'
                            },
                            minItems: 2
                        }
                    },
                    additionalProperties: false,
                    description: 'Gradient definition'
                },
                cornersGradient: {
                    type: ['object', 'null'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['linear', 'radial']
                        },
                        rotation: {
                            type: 'number'
                        },
                        colorStops: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    offset: {
                                        type: 'number',
                                        minimum: 0,
                                        maximum: 1
                                    },
                                    color: {
                                        type: 'string'
                                    }
                                },
                                additionalProperties: false,
                                description: 'Color stop in a gradient'
                            },
                            minItems: 2
                        }
                    },
                    additionalProperties: false,
                    description: 'Gradient definition'
                },
                backgroundGradient: {
                    type: ['object', 'null'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['linear', 'radial']
                        },
                        rotation: {
                            type: 'number'
                        },
                        colorStops: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    offset: {
                                        type: 'number',
                                        minimum: 0,
                                        maximum: 1
                                    },
                                    color: {
                                        type: 'string'
                                    }
                                },
                                additionalProperties: false,
                                description: 'Color stop in a gradient'
                            },
                            minItems: 2
                        }
                    },
                    additionalProperties: false,
                    description: 'Gradient definition'
                },
                dotShape: {
                    type: ['string', 'null'],
                    enum: ['dot', 'square', 'rounded', 'extra-rounded', 'classy', 'classy-rounded', 'vertical-line', 'horizontal-line', 'random-dot', 'small-square', 'tiny-square', 'star', 'plus', 'diamond', null],
                    description: 'Type of dots in QR code',
                    example: 'rounded'
                },
                cornerSquareShape: {
                    type: ['string', 'null'],
                    enum: ['dot', 'square', 'rounded', 'classy', 'outpoint', 'inpoint', null],
                    description: 'Type of corner squares in QR code',
                    example: 'square'
                },
                cornerDotShape: {
                    type: ['string', 'null'],
                    enum: ['dot', 'square', 'heart', 'rounded', 'classy', 'outpoint', 'inpoint', null],
                    description: 'Type of corner dots in QR code',
                    example: 'dot'
                },
                logo: {
                    anyOf: [
                        {
                            type: 'string'
                        },
                        {},
                        {},
                        {
                            type: 'null'
                        }
                    ]
                },
                logoSize: {
                    type: ['number', 'null'],
                    minimum: 0,
                    maximum: 1
                },
                logoMode: {
                    type: ['string', 'null'],
                    enum: ['center', 'overlay', 'background', null],
                    description: 'Mode for embedding images in QR code',
                    example: 'center'
                },
                logoMargin: {
                    type: ['number', 'null']
                },
                logoBackgroundColor: {
                    type: ['string', 'null']
                },
                logoPadding: {
                    type: ['number', 'null']
                },
                logoRadius: {
                    anyOf: [
                        {
                            type: 'string'
                        },
                        {
                            type: 'number'
                        },
                        {
                            type: 'null'
                        }
                    ]
                },
                borderColor: {
                    type: ['string', 'null']
                },
                borderThickness: {
                    type: ['number', 'null']
                },
                borderRadius: {
                    anyOf: [
                        {
                            type: 'string'
                        },
                        {
                            type: 'number'
                        },
                        {
                            type: 'null'
                        }
                    ]
                },
                borderInnerColor: {
                    type: ['string', 'null']
                },
                borderInnerThickness: {
                    type: ['number', 'null']
                },
                borderInnerRadius: {
                    anyOf: [
                        {
                            type: 'string'
                        },
                        {
                            type: 'number'
                        },
                        {
                            type: 'null'
                        }
                    ]
                },
                borderOuterColor: {
                    type: ['string', 'null']
                },
                borderOuterThickness: {
                    type: ['number', 'null']
                },
                borderTextTop: {
                    type: ['string', 'null']
                },
                borderTextRight: {
                    type: ['string', 'null']
                },
                borderTextBottom: {
                    type: ['string', 'null']
                },
                borderTextLeft: {
                    type: ['string', 'null']
                },
                borderFontFace: {
                    type: ['string', 'null']
                },
                borderFontSize: {
                    type: ['number', 'null']
                },
                borderFontColor: {
                    type: ['string', 'null']
                },
                borderLetterSpacing: {
                    type: ['number', 'null']
                },
                borderTextTransform: {
                    type: ['string', 'null'],
                    enum: ['uppercase', 'lowercase', 'capitalize', null]
                },
                borderFontWeight: {
                    type: 'string'
                }
            },
            additionalProperties: false,
            description: 'Partial style options to update. All fields are optional. Use null as a value to delete a field. At least one option field must be provided.'
        }
    },
    required: ['options']
} as const;

export const $StyleArray = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/StyleResponse'
    },
    description: 'Array of style objects'
} as const;

export const $TextResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier for the text',
            example: 'cmaeeh20u0000ys0ptfsekbtc'
        },
        name: {
            type: 'string',
            description: 'Name of the text',
            example: 'Standard Marketing Text'
        },
        description: {
            type: ['string', 'null'],
            description: 'Description of the text',
            example: 'Standard text for marketing QR codes'
        },
        options: {
            type: 'object',
            properties: {
                value: {
                    type: ['string', 'null'],
                    description: 'Text value for all positions',
                    example: 'Scan me'
                },
                topValue: {
                    type: ['string', 'null'],
                    description: 'Text value for the top position',
                    example: 'Scan me!'
                },
                bottomValue: {
                    type: ['string', 'null'],
                    description: 'Text value for the bottom position',
                    example: 'www.example.com'
                },
                rightValue: {
                    type: ['string', 'null'],
                    description: 'Text value for the right position',
                    example: 'Product info'
                },
                leftValue: {
                    type: ['string', 'null'],
                    description: 'Text value for the left position',
                    example: 'Contact us'
                }
            },
            additionalProperties: false,
            description: 'Text configuration options',
            example: {
                topValue: 'Scan me!',
                bottomValue: 'www.example.com'
            }
        },
        metadata: {
            type: ['object', 'null'],
            additionalProperties: {},
            description: 'Custom metadata for the text as JSON object',
            example: {
                category: 'marketing',
                language: 'en',
                purpose: 'CTA',
                content: {
                    theme: 'professional',
                    length: 'short'
                }
            },
            nullable: true
        },
        workspaceId: {
            type: ['string', 'null'],
            description: 'ID of the workspace this text belongs to, if any',
            example: 'cmaeeh20u0000ys0ptfsekbtc'
        },
        createdByUser: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoMember'
                },
                {
                    type: 'null'
                }
            ],
            description: 'User who created the resource',
            nullable: true
        },
        updatedByUser: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoMember'
                },
                {
                    type: 'null'
                }
            ],
            description: 'User who last updated the resource',
            nullable: true
        },
        createdByApiKey: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoApiKey'
                },
                {
                    type: 'null'
                }
            ],
            description: 'API key used to create the resource',
            nullable: true
        },
        updatedByApiKey: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoApiKey'
                },
                {
                    type: 'null'
                }
            ],
            description: 'API key used to last update the resource',
            nullable: true
        },
        createdAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'When the resource was created',
            example: '2023-01-01T00:00:00Z',
            nullable: true
        },
        updatedAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'When the resource was last updated',
            example: '2023-01-01T00:00:00Z',
            nullable: true
        }
    },
    required: ['id', 'name', 'options', 'metadata'],
    description: 'Text data returned in API responses'
} as const;

export const $TextNameTakenMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Text name is already taken'
        }
    },
    required: ['message'],
    description: 'Error response when a text entity name is already taken within the scope (organization/workspace)'
} as const;

export const $TextBase = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            minLength: 1,
            maxLength: 100,
            description: 'Name of the text',
            example: 'Standard Marketing Text'
        },
        description: {
            type: 'string',
            maxLength: 500,
            description: 'Description of the text',
            example: 'Standard text for marketing QR codes'
        },
        options: {
            '$ref': '#/components/schemas/TextOptions',
            description: 'Text configuration options'
        },
        metadata: {
            type: ['object', 'null'],
            additionalProperties: {},
            description: 'Custom metadata for the text as JSON object',
            example: {
                category: 'marketing',
                language: 'en',
                purpose: 'CTA',
                content: {
                    theme: 'professional',
                    length: 'short'
                }
            },
            nullable: true
        },
        workspaceId: {
            type: ['string', 'null'],
            description: 'ID of the workspace this text belongs to, if any',
            example: 'cmaeeh20u0000ys0ptfsekbtc'
        }
    },
    required: ['name', 'options'],
    description: 'Base schema for text definitions'
} as const;

export const $CreateText = {
    '$ref': '#/components/schemas/TextBase',
    description: 'Schema for creating a new text'
} as const;

export const $GetTextsResponse = {
    type: 'object',
    properties: {
        organizations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TextResponse'
            },
            description: 'Texts available at the organization level'
        },
        workspaces: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TextResponse'
            },
            description: 'Texts available in specific workspaces'
        }
    },
    required: ['organizations', 'workspaces'],
    description: 'List of texts grouped by organization and workspace'
} as const;

export const $EmptyTextsOrgContextResponse = {
    type: 'object',
    properties: {
        organizations: {
            type: 'array',
            items: {},
            description: 'Should be empty or not present'
        },
        workspaces: {
            type: 'array',
            items: {},
            description: 'Should be empty or not present'
        }
    },
    required: ['organizations', 'workspaces'],
    description: 'Response body when no text entities are found for the organization context'
} as const;

export const $BaseTexts = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/BaseText'
    },
    description: 'A list of predefined base texts'
} as const;

export const $BaseText = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier of the base text',
            example: 'basic'
        },
        name: {
            type: 'string',
            description: 'Name of the base text',
            example: 'Basic'
        },
        options: {
            type: 'object',
            properties: {
                value: {
                    type: ['string', 'null'],
                    description: 'Text value for all positions',
                    example: 'Scan me'
                },
                topValue: {
                    type: ['string', 'null'],
                    description: 'Text value for the top position',
                    example: 'Scan me!'
                },
                bottomValue: {
                    type: ['string', 'null'],
                    description: 'Text value for the bottom position',
                    example: 'www.example.com'
                },
                rightValue: {
                    type: ['string', 'null'],
                    description: 'Text value for the right position',
                    example: 'Product info'
                },
                leftValue: {
                    type: ['string', 'null'],
                    description: 'Text value for the left position',
                    example: 'Contact us'
                }
            },
            additionalProperties: false,
            description: 'Text configuration options',
            example: {
                topValue: 'Scan me!',
                bottomValue: 'www.example.com'
            }
        }
    },
    required: ['id', 'name', 'options'],
    description: 'A predefined base text that can be used as a template'
} as const;

export const $UpdateText = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            minLength: 1,
            maxLength: 100,
            description: 'Name of the text',
            example: 'Standard Marketing Text'
        },
        description: {
            type: 'string',
            maxLength: 500,
            description: 'Description of the text',
            example: 'Standard text for marketing QR codes'
        },
        options: {
            '$ref': '#/components/schemas/TextOptions',
            description: 'Updated text configuration options'
        },
        metadata: {
            type: ['object', 'null'],
            additionalProperties: {},
            description: 'Updated custom metadata for the text as JSON object',
            example: {
                category: 'promotional',
                version: 'v2',
                lastModified: '2024-01-15'
            },
            nullable: true
        },
        workspaceId: {
            type: ['string', 'null'],
            description: 'ID of the workspace this text belongs to, if any',
            example: 'cmaeeh20u0000ys0ptfsekbtc'
        }
    },
    description: 'Schema for updating an existing text'
} as const;

export const $UpdateTextOptionsRequest = {
    type: 'object',
    properties: {
        options: {
            type: 'object',
            properties: {
                value: {
                    type: ['string', 'null']
                },
                topValue: {
                    type: ['string', 'null']
                },
                bottomValue: {
                    type: ['string', 'null']
                },
                rightValue: {
                    type: ['string', 'null']
                },
                leftValue: {
                    type: ['string', 'null']
                }
            },
            additionalProperties: false,
            description: 'Partial text options to update. All fields are optional. Use null as a value to delete a field. At least one option field must be provided.',
            example: {
                topValue: 'Scan me!',
                bottomValue: 'www.example.com'
            }
        }
    },
    required: ['options']
} as const;

export const $DeleteTextResponse = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            description: 'Success message',
            example: 'Text deleted successfully'
        }
    },
    required: ['message'],
    description: 'Response for successful text deletion'
} as const;

export const $TextArray = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/TextResponse'
    },
    description: 'Array of text objects'
} as const;

export const $BorderResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier for the border',
            example: 'cmaeeh20u0000ys0ptfsekbtc'
        },
        name: {
            type: 'string',
            description: 'Name of the border',
            example: 'Premium Rounded Border'
        },
        description: {
            type: ['string', 'null'],
            description: 'Description of the border',
            example: 'A premium border with rounded corners and decorative text elements'
        },
        options: {
            '$ref': '#/components/schemas/BorderOptions'
        },
        metadata: {
            type: ['object', 'null'],
            additionalProperties: {},
            description: 'Custom metadata for the border as JSON object',
            example: {
                style: 'decorative',
                usage: ['print', 'digital'],
                design: {
                    thickness: 'medium',
                    pattern: 'solid'
                }
            },
            nullable: true
        },
        workspaceId: {
            type: ['string', 'null'],
            description: 'ID of the workspace this border belongs to, if any',
            example: 'cmaeeh20u0000ys0ptfsekbtc'
        },
        createdByUser: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoMember'
                },
                {
                    type: 'null'
                }
            ],
            description: 'User who created the resource',
            nullable: true
        },
        updatedByUser: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoMember'
                },
                {
                    type: 'null'
                }
            ],
            description: 'User who last updated the resource',
            nullable: true
        },
        createdByApiKey: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoApiKey'
                },
                {
                    type: 'null'
                }
            ],
            description: 'API key used to create the resource',
            nullable: true
        },
        updatedByApiKey: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/AuditInfoApiKey'
                },
                {
                    type: 'null'
                }
            ],
            description: 'API key used to last update the resource',
            nullable: true
        },
        createdAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'When the resource was created',
            example: '2023-01-01T00:00:00Z',
            nullable: true
        },
        updatedAt: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'When the resource was last updated',
            example: '2023-01-01T00:00:00Z',
            nullable: true
        }
    },
    required: ['id', 'name', 'options', 'metadata'],
    description: 'Border Response Schema'
} as const;

export const $BorderNameTakenMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Border name is already taken'
        }
    },
    required: ['message'],
    description: 'Error response when a border name is already taken within the scope (organization/workspace)'
} as const;

export const $BorderBase = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            minLength: 1,
            maxLength: 100,
            description: 'Name of the border',
            example: 'Standard Black Border'
        },
        description: {
            type: 'string',
            maxLength: 500,
            description: 'Description of the border',
            example: 'A standard black border for QR codes'
        },
        options: {
            '$ref': '#/components/schemas/BorderOptions'
        },
        metadata: {
            type: ['object', 'null'],
            additionalProperties: {},
            description: 'Custom metadata for the border as JSON object',
            example: {
                style: 'decorative',
                usage: ['print', 'digital'],
                design: {
                    thickness: 'medium',
                    pattern: 'solid'
                }
            },
            nullable: true
        },
        workspaceId: {
            type: ['string', 'null'],
            description: 'ID of the workspace this border belongs to, if any',
            example: 'cmaeeh20u0000ys0ptfsekbtc'
        }
    },
    required: ['name', 'options'],
    description: 'Border Base Schema'
} as const;

export const $GetBordersResponse = {
    type: 'object',
    properties: {
        organizations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BorderResponse'
            },
            description: 'Borders available at the organization level'
        },
        workspaces: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BorderResponse'
            },
            description: 'Borders available in specific workspaces'
        }
    },
    required: ['organizations', 'workspaces'],
    description: 'List of borders grouped by organization and workspace'
} as const;

export const $EmptyBordersOrgContextResponseMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'No borders found for the specified organization and workspace',
            description: 'No borders found for the specified organization and workspace'
        }
    },
    required: ['message'],
    description: 'Response body when no border entities are found for the organization context'
} as const;

export const $BaseBorders = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/BaseBorder'
    },
    description: 'A list of predefined base borders'
} as const;

export const $BaseBorder = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier of the base border',
            example: 'basic'
        },
        name: {
            type: 'string',
            description: 'Name of the base border',
            example: 'Basic'
        },
        options: {
            allOf: [
                {
                    '$ref': '#/components/schemas/BorderOptions'
                }
            ],
            description: 'Border configuration options',
            example: {
                borderOptions: {
                    hasBorder: true,
                    thickness: 2,
                    radius: '10px'
                }
            }
        }
    },
    required: ['id', 'name', 'options'],
    description: 'A predefined base border that can be used as a template'
} as const;

export const $UpdateBorder = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            minLength: 1,
            maxLength: 100,
            description: 'Name of the border',
            example: 'Standard Black Border'
        },
        description: {
            type: 'string',
            maxLength: 500,
            description: 'Description of the border',
            example: 'A standard black border for QR codes'
        },
        options: {
            '$ref': '#/components/schemas/BorderOptions'
        },
        metadata: {
            type: ['object', 'null'],
            additionalProperties: {},
            description: 'Updated custom metadata for the border as JSON object',
            example: {
                style: 'modern',
                version: 'v2',
                lastUpdated: '2024-01-15'
            },
            nullable: true
        }
    },
    description: 'Update Border Schema'
} as const;

export const $DeleteBorderResponse = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            description: 'Success message',
            example: 'Border deleted successfully'
        }
    },
    required: ['message'],
    description: 'Delete Border Response Schema'
} as const;

export const $UpdateBorderOptionsRequest = {
    type: 'object',
    properties: {
        options: {
            type: 'object',
            properties: {
                borderOptions: {
                    type: 'object',
                    properties: {
                        hasBorder: {
                            type: ['boolean', 'null']
                        },
                        thickness: {
                            type: ['number', 'null']
                        },
                        color: {
                            type: ['string', 'null']
                        },
                        radius: {
                            type: ['string', 'null']
                        },
                        noBorderThickness: {
                            type: ['number', 'null']
                        },
                        background: {
                            type: ['string', 'null']
                        },
                        inner: {
                            type: ['object', 'null'],
                            properties: {
                                radius: {
                                    type: ['string', 'null']
                                },
                                scale: {
                                    type: ['number', 'null'],
                                    minimum: 0,
                                    maximum: 1.5
                                },
                                horizontalOffset: {
                                    type: ['number', 'null']
                                },
                                verticalOffset: {
                                    type: ['number', 'null']
                                }
                            }
                        },
                        borderOuter: {
                            type: ['object', 'null'],
                            properties: {
                                color: {
                                    type: 'string'
                                },
                                thickness: {
                                    type: 'number'
                                }
                            },
                            additionalProperties: false,
                            description: 'Inner or outer border configuration'
                        },
                        borderInner: {
                            type: ['object', 'null'],
                            properties: {
                                color: {
                                    type: 'string'
                                },
                                thickness: {
                                    type: 'number'
                                }
                            },
                            additionalProperties: false,
                            description: 'Inner or outer border configuration'
                        },
                        decorations: {
                            type: ['object', 'null'],
                            properties: {
                                top: {
                                    type: ['object', 'null'],
                                    properties: {
                                        disabled: {
                                            type: 'boolean'
                                        },
                                        enableText: {
                                            type: 'boolean'
                                        },
                                        offset: {
                                            type: 'number'
                                        },
                                        curveAdjustment: {
                                            type: 'number'
                                        },
                                        curveDisabled: {
                                            type: 'boolean'
                                        },
                                        curveRadius: {
                                            type: 'string'
                                        },
                                        type: {
                                            type: 'string',
                                            enum: ['text', 'image']
                                        },
                                        value: {
                                            type: 'string'
                                        },
                                        style: {
                                            type: 'object',
                                            properties: {
                                                fontFace: {
                                                    type: 'string'
                                                },
                                                fontSize: {
                                                    type: 'number'
                                                },
                                                fontColor: {
                                                    type: 'string'
                                                },
                                                letterSpacing: {
                                                    type: 'number'
                                                },
                                                fontWeight: {
                                                    type: 'string',
                                                    enum: ['normal', 'bold']
                                                }
                                            },
                                            additionalProperties: false,
                                            description: 'Text decoration style'
                                        }
                                    },
                                    additionalProperties: false,
                                    description: 'Options for QR code decoration'
                                },
                                right: {
                                    type: ['object', 'null'],
                                    properties: {
                                        disabled: {
                                            type: 'boolean'
                                        },
                                        enableText: {
                                            type: 'boolean'
                                        },
                                        offset: {
                                            type: 'number'
                                        },
                                        curveAdjustment: {
                                            type: 'number'
                                        },
                                        curveDisabled: {
                                            type: 'boolean'
                                        },
                                        curveRadius: {
                                            type: 'string'
                                        },
                                        type: {
                                            type: 'string',
                                            enum: ['text', 'image']
                                        },
                                        value: {
                                            type: 'string'
                                        },
                                        style: {
                                            type: 'object',
                                            properties: {
                                                fontFace: {
                                                    type: 'string'
                                                },
                                                fontSize: {
                                                    type: 'number'
                                                },
                                                fontColor: {
                                                    type: 'string'
                                                },
                                                letterSpacing: {
                                                    type: 'number'
                                                },
                                                fontWeight: {
                                                    type: 'string',
                                                    enum: ['normal', 'bold']
                                                }
                                            },
                                            additionalProperties: false,
                                            description: 'Text decoration style'
                                        }
                                    },
                                    additionalProperties: false,
                                    description: 'Options for QR code decoration'
                                },
                                bottom: {
                                    type: ['object', 'null'],
                                    properties: {
                                        disabled: {
                                            type: 'boolean'
                                        },
                                        enableText: {
                                            type: 'boolean'
                                        },
                                        offset: {
                                            type: 'number'
                                        },
                                        curveAdjustment: {
                                            type: 'number'
                                        },
                                        curveDisabled: {
                                            type: 'boolean'
                                        },
                                        curveRadius: {
                                            type: 'string'
                                        },
                                        type: {
                                            type: 'string',
                                            enum: ['text', 'image']
                                        },
                                        value: {
                                            type: 'string'
                                        },
                                        style: {
                                            type: 'object',
                                            properties: {
                                                fontFace: {
                                                    type: 'string'
                                                },
                                                fontSize: {
                                                    type: 'number'
                                                },
                                                fontColor: {
                                                    type: 'string'
                                                },
                                                letterSpacing: {
                                                    type: 'number'
                                                },
                                                fontWeight: {
                                                    type: 'string',
                                                    enum: ['normal', 'bold']
                                                }
                                            },
                                            additionalProperties: false,
                                            description: 'Text decoration style'
                                        }
                                    },
                                    additionalProperties: false,
                                    description: 'Options for QR code decoration'
                                },
                                left: {
                                    type: ['object', 'null'],
                                    properties: {
                                        disabled: {
                                            type: 'boolean'
                                        },
                                        enableText: {
                                            type: 'boolean'
                                        },
                                        offset: {
                                            type: 'number'
                                        },
                                        curveAdjustment: {
                                            type: 'number'
                                        },
                                        curveDisabled: {
                                            type: 'boolean'
                                        },
                                        curveRadius: {
                                            type: 'string'
                                        },
                                        type: {
                                            type: 'string',
                                            enum: ['text', 'image']
                                        },
                                        value: {
                                            type: 'string'
                                        },
                                        style: {
                                            type: 'object',
                                            properties: {
                                                fontFace: {
                                                    type: 'string'
                                                },
                                                fontSize: {
                                                    type: 'number'
                                                },
                                                fontColor: {
                                                    type: 'string'
                                                },
                                                letterSpacing: {
                                                    type: 'number'
                                                },
                                                fontWeight: {
                                                    type: 'string',
                                                    enum: ['normal', 'bold']
                                                }
                                            },
                                            additionalProperties: false,
                                            description: 'Text decoration style'
                                        }
                                    },
                                    additionalProperties: false,
                                    description: 'Options for QR code decoration'
                                }
                            }
                        }
                    }
                },
                shape: {
                    type: ['string', 'null'],
                    enum: ['square', 'circle', null],
                    description: 'Overall shape of the QR code',
                    example: 'square'
                },
                margin: {
                    type: ['number', 'null'],
                    description: 'Margin around the QR code in pixels',
                    example: 10
                },
                isResponsive: {
                    type: ['boolean', 'null'],
                    description: 'Whether QR code is responsive',
                    example: true
                },
                scale: {
                    type: ['number', 'null'],
                    minimum: 0,
                    maximum: 1.5,
                    description: 'Scale factor for QR code (0-1.5)',
                    example: 1
                },
                offset: {
                    type: ['number', 'null'],
                    description: 'General offset in pixels',
                    example: 0
                },
                verticalOffset: {
                    type: ['number', 'null'],
                    description: 'Vertical offset in pixels',
                    example: 0
                },
                horizontalOffset: {
                    type: ['number', 'null'],
                    description: 'Horizontal offset in pixels',
                    example: 0
                },
                qrOptions: {
                    type: ['object', 'null'],
                    properties: {
                        typeNumber: {
                            type: ['number', 'null'],
                            minimum: 0,
                            maximum: 40,
                            description: 'QR code type number (0-40)',
                            example: 0
                        },
                        mode: {
                            type: 'string',
                            enum: ['numeric', 'alphanumeric', 'byte', 'kanji', 'unicode'],
                            description: 'QR code encoding mode',
                            example: 'byte'
                        },
                        errorCorrectionLevel: {
                            type: ['string', 'null'],
                            enum: ['L', 'M', 'Q', 'H', null],
                            description: 'Error correction level',
                            example: 'M'
                        }
                    },
                    description: 'QR code specific options'
                },
                dotsOptions: {
                    type: ['object', 'null'],
                    properties: {
                        type: {
                            type: ['string', 'null'],
                            enum: ['dot', 'square', 'rounded', 'extra-rounded', 'classy', 'classy-rounded', 'vertical-line', 'horizontal-line', 'random-dot', 'small-square', 'tiny-square', 'star', 'plus', 'diamond', null],
                            description: 'Type of dots',
                            example: 'rounded'
                        },
                        color: {
                            type: ['string', 'null'],
                            description: 'Color of dots in CSS format',
                            example: '#000000'
                        },
                        size: {
                            type: ['number', 'null'],
                            description: 'Size of dots relative to module size (0-1)',
                            example: 0.5
                        },
                        gradient: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/Gradient'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Gradient for dots'
                        }
                    },
                    description: 'Options for QR code dots'
                },
                cornersSquareOptions: {
                    type: ['object', 'null'],
                    properties: {
                        type: {
                            type: ['string', 'null'],
                            enum: ['dot', 'square', 'rounded', 'classy', 'outpoint', 'inpoint', null],
                            description: 'Type of corner squares',
                            example: 'square'
                        },
                        color: {
                            type: ['string', 'null'],
                            description: 'Color of corner squares in CSS format',
                            example: '#000000'
                        },
                        gradient: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/Gradient'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Gradient for corner squares'
                        }
                    },
                    description: 'Options for QR code corner squares'
                },
                cornersDotOptions: {
                    type: ['object', 'null'],
                    properties: {
                        type: {
                            type: ['string', 'null'],
                            enum: ['dot', 'square', 'heart', 'rounded', 'classy', 'outpoint', 'inpoint', null],
                            description: 'Type of corner dots',
                            example: 'dot'
                        },
                        color: {
                            type: ['string', 'null'],
                            description: 'Color of corner dots in CSS format',
                            example: '#000000'
                        },
                        gradient: {
                            oneOf: [
                                {
                                    '$ref': '#/components/schemas/Gradient'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            description: 'Gradient for corner dots'
                        }
                    },
                    description: 'Options for QR code corner dots'
                },
                backgroundOptions: {
                    anyOf: [
                        {
                            type: 'object',
                            properties: {
                                color: {
                                    type: ['string', 'null'],
                                    description: 'Background color in CSS format',
                                    example: '#ffffff'
                                },
                                round: {
                                    anyOf: [
                                        {
                                            type: 'number',
                                            minimum: 0,
                                            maximum: 1
                                        },
                                        {
                                            type: 'string'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Background corner rounding (0-1 or CSS value)',
                                    example: 0.1
                                },
                                gradient: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/Gradient'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Gradient for background'
                                }
                            },
                            required: ['color']
                        },
                        {
                            type: 'boolean',
                            const: false
                        }
                    ],
                    description: 'Options for QR code background or false to disable'
                },
                image: {
                    anyOf: [
                        {
                            type: 'string'
                        },
                        {},
                        {},
                        {
                            type: 'null'
                        }
                    ],
                    description: 'Image to embed in the QR code (URL, Buffer, or Blob)',
                    example: 'https://example.com/logo.png'
                },
                imageOptions: {
                    type: ['object', 'null'],
                    properties: {
                        mode: {
                            type: ['string', 'null'],
                            enum: ['center', 'overlay', 'background', null],
                            description: 'Mode for embedded image',
                            example: 'center'
                        },
                        imageSize: {
                            type: ['number', 'null'],
                            minimum: 0,
                            maximum: 1,
                            description: 'Size of image relative to QR code (0-1)',
                            example: 0.2
                        },
                        margin: {
                            type: ['number', 'null'],
                            description: 'Margin around the image in pixels',
                            example: 5
                        },
                        crossOrigin: {
                            type: ['string', 'null'],
                            description: 'Cross-origin attribute for image',
                            example: 'anonymous'
                        },
                        fill: {
                            type: ['object', 'null'],
                            properties: {
                                color: {
                                    type: ['string', 'null'],
                                    description: 'Fill color in CSS format',
                                    example: '#ffffff'
                                },
                                gradient: {
                                    oneOf: [
                                        {
                                            '$ref': '#/components/schemas/Gradient'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    description: 'Gradient for fill'
                                }
                            },
                            description: 'Fill options for image area'
                        }
                    },
                    description: 'Options for embedded image'
                }
            },
            required: ['borderOptions'],
            additionalProperties: false,
            description: 'Partial border options to update. borderOptions is required and must contain at least one field (can be nullable). Other top-level options are optional. Use null as a value to delete a field.'
        }
    },
    required: ['options']
} as const;

export const $RouterRuleTemplateNotFoundMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            example: 'Router Rule Template not found',
            description: 'The specified router rule template could not be found'
        }
    },
    required: ['message'],
    description: 'Indicates that the specified router rule template was not found'
} as const;

export const $WorkspaceRouterRuleResponse = {
    allOf: [
        {
            '$ref': '#/components/schemas/CodeRouterRuleResponse'
        }
    ],
    properties: {
        code: {
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: 'QR code ID'
                },
                name: {
                    type: 'string',
                    description: 'QR code name'
                },
                type: {
                    type: ['string', 'null'],
                    description: 'QR code type'
                },
                shortAlias: {
                    type: ['string', 'null'],
                    description: 'QR code short alias'
                },
                workspaceId: {
                    type: ['string', 'null'],
                    description: 'Workspace ID'
                }
            },
            required: ['id', 'name'],
            description: 'Associated QR code information'
        }
    },
    required: ['code'],
    description: 'Workspace router rule assignment response object with code context'
} as const;